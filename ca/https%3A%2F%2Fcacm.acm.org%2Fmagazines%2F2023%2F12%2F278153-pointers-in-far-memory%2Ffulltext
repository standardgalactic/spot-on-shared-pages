<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta http-equiv="content-language" content="en" />
<title>Pointers in Far Memory | December 2023 | Communications of the ACM</title>
<meta name="title" content="Pointers in Far Memory" />
<meta name="author" content="Ethan L Miller, George Neville-Neil, Achilles Benetopoulos, Pankaj Mehra, Daniel Bittman" />
<meta name="date" content="2023-12-1" />
<meta name="year" content="2023" />
<meta name="subjects" content="communications / networking,computer systems,data / storage and retrieval,hardware,management,performance and reliability,security,software,theory" />
<meta name="sections" content="Practice" />
<script src="/cdn-cgi/apps/head/nLYIPopMPWKseIlIthEH-UJkbT0.js"></script><link rel="alternate" type="application/rss+xml" href="/magazine.rss" title="Communications of the ACM: Current Issue [RSS 2.0]" />
<link rel="canonical" href="https://cacm.acm.org/magazines/2023/12/278153-pointers-in-far-memory/fulltext" />
<link href="/stylesheets/all.css" rel="stylesheet" />
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>

<link href="/stylesheets/jplayer.pink.flag.css" rel="stylesheet" />
<link href="/stylesheets/sections/videos.css" rel="stylesheet" />
<link href="/stylesheets/tipsy.css" rel="stylesheet" />
<link href="/stylesheets/colorbox.css" rel="stylesheet" />
<script src="/javascripts/cookie.js"></script>
<script src="/javascripts/modernizr.js"></script>
<style>
      html{overflow: auto !important;}
    </style>
<meta property="og:type" content="article" /><meta property="og:url" content="https://cacm.acm.org/magazines/2023/12/278153-pointers-in-far-memory/fulltext" /><meta property="og:title" content="Pointers in Far Memory" /><meta property="og:image" content="https://cacm.acm.org/system/assets/0004/6658/111623_CACMpg41_Pointers-in-Far1.large.jpg?1699913917&amp;1699913917" /><meta property="og:description" content="Rethinking how data and computations should be organized.
" />
<script src="https://s7.addthis.com/js/250/addthis_widget.js#pubid=xa-4dcbeff2515fc93c"></script>
<script>
  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){
  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);
  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);
  })(window,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st');
  
  _st('install','F_pTME7mydky5kHVQaaa','2.0.0');
</script>
<script>
  window.onload = function() {
    $("a[href*='dlsearch']").click(function(event) {
      if (location.hash) {
        event.preventDefault();

        var initialHref = $(event.target).attr('href').replace('query=&', "").replace('query=', "");

        var query = location.hash.substring(1).split("&")

        if (query) {
          query = query.find(function(e) { return e.indexOf("stq=") !== -1 })

          if (query) {
            query = query.substring(4);
          }
        }

        query = initialHref + "&query=" + query;

        window.location.href = query;
      }
    });
  }
</script>

<script async src="https://www.googletagmanager.com/gtag/js?id=G-XYTVD2CXR4"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XYTVD2CXR4');
</script>
<style>
iframe body { overflow: hidden;  }
iframe { border: none; margin: 0; }
    .fav_hacker_news {
      background:url('https://img.icons8.com/color/48/000000/hacker-news.png') no-repeat center #FFF;
      background-size: 21.5px;
    }
    .fav_hacker_news:hover {
      background:url('https://img.icons8.com/color/48/000000/hacker-news.png') no-repeat center #e6e9ea;
      background-size: 21.5px;
    }
    .fav_bar a.fav_reddit {
      background-size: 22px;
      background:url('https://cacm.acm.org/images/icons/reddit.gif') no-repeat center #FFF;
    }
    .fav_bar a.fav_reddit:hover {
      background-color: #e6e9ea;
    }
    .fav_bar a.fav_facebook {
      background-size: 22px;
      background:url('https://cacm.acm.org/images/icons/facebook.gif') no-repeat center #FFF;
    }
    .fav_bar a.fav_facebook:hover {
      background-color: #e6e9ea;
      background:url('https://cacm.acm.org/images/icons/facebook.gif') no-repeat center #e6e9ea;
    }

    body { margin: 0 }
    #acmWidget.resourcesWidget .dateNews { margin-left: 10px; }
</style>
<meta property="og:type" content="article" /><meta property="og:url" content="https://cacm.acm.org/magazines/2023/12/278153-pointers-in-far-memory/fulltext" /><meta property="og:title" content="Pointers in Far Memory" /><meta property="og:image" content="https://cacm.acm.org/system/assets/0004/6658/111623_CACMpg41_Pointers-in-Far1.large.jpg?1699913917&amp;1699913917" /><meta property="og:description" content="Rethinking how data and computations should be organized.
" />
</head>
<body id="body-main" itemscope itemtype="http://schema.org/Article">
<div id="domain-info" data-domain="cacm.acm.org"></div>
<div class="JumpLink" id="PageTop"></div>
<div id="container">
<div id="layout">
<header class="topHeader">
<a href="/" title="ACM" id="topLogo">ACM</a>
<div id="instName"><img src="/images/icons/acm_header.png" height="40" width="40" class="logo-mini" alt="acm-header" /></div>
<a href="/login" title="Login" id="topSignIn">Sign In</a>
<div id="topForm">
<form action="/search" method="get">
<div class="portaInput">
<label for="searchInput" id="labelSearchInput" class="inField"></label>
<input type="text" id="searchInput" class="st-default-search-input" placeholder="Search" name="q" aria-label="Search" />
</div>
<button name="search submit" type="submit" id="searchSubmit">Go</button>
</form>
</div>
<div id="topBar">
<ul>
<li><a href="http://www.acm.org/" title="ACM.org">ACM.org</a></li>
<li><a href="https://services.acm.org/public/qj/brandingqj/cacm.cfm" target="_blank" title="Join ACM">Join ACM</a></li>
<li><a href="/about-communications" title="About Communications">About Communications</a></li>
<li><a href="/acm-resources" title="ACM Resources">ACM Resources</a></li>
<li class="last-child"><a href="/alerts-and-feeds" title="Alerts &#38; Feeds">Alerts &#38; Feeds</a></li>
<li class="last-child">
<a href="https://www.facebook.com/Communications-of-the-ACM-521319564596131/" style="margin: 0;padding: 0;margin-right: 1px;margin-top: -2px;"><img src="/images/icons/facebook.png" alt="facebook" style="height: 18px;width: 18px;"></a>
<a href="https://twitter.com/cacmmag" style="margin: 0;padding: 0;margin-top: -1px;margin-right: 4px;"><img src="/images/icons/twitter.png" alt="twitter" style="width: 16px;height: 16px;"></a>
<a href="/alerts-and-feeds/rss-feeds" style="margin: 0;padding: 0;"><img src="/images/icons/rss.png" alt="rss" style="width: 14px;height: 14px;"></a>
</li>
</ul>
</div>
<hgroup>
<h1><a href="/" title="Communications of the ACM">Communications of the ACM</a></h1>
</hgroup>
<nav>
<ul>
<li class="first-child"><a href="/" class="menuText itemHome">Home</a></li>
<li>
<div class="portaDropdown">
<a class="withMenu menuText itemCurrent" href="/magazines/2023/12">Current Issue</a>
<div class="menuLinks currenIssueDropdown">
<a class="menuCover" href="/magazines/2023/12">
<img src="https://cacm.acm.org/system/assets/0004/6665/December2023.Cover.1000x1338.large.jpg?1699914061&1699914060" width="145" height="192" alt="Latest issue" />
</a>
<span class="dropDownIssueTitle">Current Issue: December 2023</span>
<a href="/magazines/2023/12/278156-data-analytics-anywhere-and-everywhere">Data Analytics Anywhere and Everywhere</a>
<a href="/magazines/2023/12/278155-when-two-cameras-are-a-crowd">When Two Cameras Are a Crowd</a>
<a href="/magazines/2023/12/278146-thus-spake-chatgpt">Thus Spake ChatGPT</a>
<a class="lastLink" href="/magazines/2023/12">VIEW TABLE OF CONTENTS</a>
</div>
</div>
</li>
<li>
<div class="portaDropdown">
<a href="/news" class="withMenu menuText itemNews">News</a>
<div class="menuLinks newsDropdown">
<a href="/news" class="lastLink">Latest News</a>
<a href="/news/archive" class="lastLink">News Archive</a>
</div>
</div>
</li>
<li>
<div class="portaDropdown">
<a href="/blogs/about-the-blogs" class="withMenu menuText itemBlogs">Blogs</a>
<div class="menuLinks blogsDropdown">
<a href="/blogs/about-the-blogs">About the Blogs</a>
<a href="/blogs/blog-cacm">BLOG@CACM</a>
<a href="/blogs/blogroll">Blogroll</a>
<a href="/blogs/archive" class="lastLink">Blogs Archive</a>
</div>
</div>
</li>
<li>
<div class="portaDropdown">
<a href="/opinion" class="withMenu menuText itemOpinion">Opinion</a>
<div class="menuLinks opinionDropdown">
<a href="/opinion/articles">Articles</a>
<a href="/opinion/interviews">Interviews</a>
<a href="/opinion/archive" class="lastLink">Opinion Archive</a>
</div>
</div>
</li>
<li>
<div class="portaDropdown">
<a href="/research" class="withMenu menuText itemResearch">Research</a>
<div class="menuLinks researchDropdown">
<a href="/research">Latest Research</a>
<a href="/research/archive" class="lastLink">Research Archive</a>
</div>
</div>
</li>
<li>
<div class="portaDropdown">
<a href="/practice" class="withMenu menuText itemPractice">Practice</a>
<div class="menuLinks practiceDropdown">
<a href="/practice">Latest Practice</a>
<a href="/practice/archive" class="lastLink">Practice Archive</a>
</div>
</div>
</li>
<li>
<div id="careersNav" class="portaDropdown">
<a href="/careers" class="withMenu menuText itemOpinion">Careers</a>
<div class="menuLinks opinionDropdown">
<ul>
<li><a href="http://jobs.acm.org/jobs/search/results?rows=15&radius=0&view=List_Detail&sort=score+desc" target="_blank">Search for Jobs</a></li>
<li><a href="http://jobs.acm.org/jobs/resumes/create" target="_blank">Post a Resume</a></li>
<li><a href="http://jobs.acm.org/jobs/products" target="_blank">Post A Job</a></li>
<li><a href="http://www.acm.org/publications/advertising" target="_blank">Advertise with Us</a></li>
<li class="lastLink"><a href="mailto:careers@acm.org">Contact Us</a></li>
</ul>
</div>
</div>
</li>
<li>
<div class="portaDropdown">
<a href="/magazines" class="withMenu menuText itemPrevious on">Archive</a>
<div class="menuLinks previousDropdown">
<span class="previousIssueTitle">The magazine archive includes every article published in <i>Communications of the ACM</i> for over the past 50 years.</span>
<div class="issue">
<a href="/magazines/2023/12">
December 2023 (Vol. 66, No. 12)
</a>
</div>
<div class="issue">
<a href="/magazines/2023/11">
November 2023 (Vol. 66, No. 11)
</a>
</div>
<div class="issue">
<a href="/magazines/2023/10">
October 2023 (Vol. 66, No. 10)
</a>
</div>
<a href="/magazines" class="lastLink">VIEW MORE ISSUES</a>
</div>
</div>
</li>
<li>
<a href="/videos" class="menuText itemVideos">Videos</a>
</li>
</ul>
</nav>
</header>
<section>
<script src="https://s7.addthis.com/js/250/addthis_widget.js#pubid=xa-4dcbeff2515fc93c"></script>
<div class="breadcrum">
<a href="/">Home</a><span>/</span><a href="/magazines/decade">Magazine Archive</a><span>/</span><a href="/magazines/2023/12">December 2023 (Vol. 66, No. 12)</a><span>/</span><a href="/magazines/2023/12/278153-pointers-in-far-memory">Pointers in Far Memory</a><span>/</span>Full Text
</div>
<div class="col0 floatLeft firstCol">
<span class="label">Practice</span>
<h2>Pointers in Far Memory</h2>
<h6 class="subheader"></h6>
</div>
<hr class="dotted" />
<div id="articleFullText" class="col1 floatLeft firstCol">
<span class="byline">
By Ethan L. Miller, George Neville-Neil, Achilles Benetopoulos, Pankaj Mehra, Daniel Bittman
<br/>
Communications of the ACM,
December 2023,
Vol. 66 No. 12, Pages 40-45<br/>
10.1145/3617581<br/>
<a href="#comments">Comments</a>
</span>
<style>

.fav_bar { float:left; border:1px solid #a7b1b5; margin-top:10px; margin-bottom:20px; }
.fav_bar span.fav_bar-label { text-align:center; padding:8px 0px 0px 0px; float:left; margin-left:-1px; border-right:1px dotted #a7b1b5; border-left:1px solid #a7b1b5; display:block; width:69px; height:24px; color:#6e7476; font-weight:bold; font-size:12px; text-transform:uppercase; font-family:Arial, Helvetica, sans-serif; }
.fav_bar a, #plus-one { float:left; border-right:1px dotted #a7b1b5; display:block; width:36px; height:32px; text-indent:-9999px; }
.fav_bar a.fav_print { background:url('/images/icons/print.gif') no-repeat 0px 0px #FFF; }
.fav_bar a.fav_print:hover { background:url('/images/icons/print.gif') no-repeat 0px 0px #e6e9ea; }
.fav_bar a.mobile-apps { background:url('/images/icons/generic.gif') no-repeat 13px 7px #FFF; background-size: 10px; }
.fav_bar a.mobile-apps:hover { background:url('/images/icons/generic.gif') no-repeat 13px 7px #e6e9ea; background-size: 10px}
.fav_bar a.fav_de { background: url(/images/icons/de.gif) no-repeat 0 0 #fff }
.fav_bar a.fav_de:hover { background: url(/images/icons/de.gif) no-repeat 0 0 #e6e9ea }
.fav_bar a.fav_acm_digital { background:url('/images/icons/acm_digital_library.gif') no-repeat 0px 0px #FFF; }
.fav_bar a.fav_acm_digital:hover { background:url('/images/icons/acm_digital_library.gif') no-repeat 0px 0px #e6e9ea; }
.fav_bar a.fav_pdf { background:url('/images/icons/pdf.gif') no-repeat 0px 0px #FFF; }
.fav_bar a.fav_pdf:hover { background:url('/images/icons/pdf.gif') no-repeat 0px 0px #e6e9ea; }

.fav_bar a.fav_more .at-icon-wrapper{
  height: 33px !important ;
  width: 35px !important;
  padding: 0 !important;
  border-right: none !important;
}

.a2a_kit {
  line-height: 24px !important;
  width: unset !important;
  height: unset !important;
  padding: 0 !important;
  border-right: unset !important;
  border-left: unset !important;
}

.fav_bar .a2a_kit a .a2a_svg {
  margin-left: 7px;
  margin-top: 4px;
  padding: unset !important;
}
</style>

<div class="fav_bar">
<span class="fav_bar-label">View as:</span>
<a href="#" onclick="javascript:window.print();" class="fav_print" title="Print">Print</a>
<a href="/about-communications/mobile-apps/" class="mobile-apps" title="MOBILE APPS">Mobile App</a>
<a href="https://dl.acm.org/citation.cfm?id=3633437.3617581&amp;coll=portal&amp;dl=ACM" class="fav_acm_digital" target="_blank" title="View in ACM Digital Library">ACM Digital Library</a>
<a href="/magazines/2023/12/278153-pointers-in-far-memory/pdf" class="fav_pdf" rel="nofollow" target="_blank" title="View as PDF">Full Text (PDF)</a>
<a href="https://dl.acm.org/ft_gateway.cfm?id=3617581&ftid=2298940&dwn=1" class="fav_de" target="_blank" title="View in Digital Edition">In the Digital Edition</a>
<span class="fav_bar-label">Share:</span>

<span class="a2a_kit a2a_kit_size_24 a2a_default_style">
<a class="a2a_button_email"></a>
<a class="a2a_button_reddit"></a>
<a class="a2a_button_hacker_news"></a>
<a class="a2a_button_facebook"></a>
<a class="a2a_button_twitter"></a>
<a class="a2a_button_linkedin"></a>
<a class="a2a_dd" href="https://www.addtoany.com/share"></a>
</span>
<script async src="https://static.addtoany.com/menu/page.js"></script>

</div>

<div class="clearer"></div>
<div class="imageWithCaptionLeft" id="asset-46658">
<figure>
<img alt="beams of transparent colored squares, illustration" src="/system/assets/0004/6658/111623_CACMpg41_Pointers-in-Far1.large.jpg?1699913917&amp;1699913917" title="beams of transparent colored squares, illustration" />
<figcaption>
<p class="credit">Credit: Olga Salt</p>
</figcaption>
</figure>
</div>

<p><a name="body-1"></a></p>
<p><a href="#top"><img alt="back to top" src="http://dl.acm.org/img/arrowu.gif" />&nbsp;</a></p>
<p>It is the best of times and it is the worst of times in the world of datacenter memory technology. According to International Data Corporation (IDC), dynamic random-access memory (DRAM) revenues exceeded $100 billion in 2022. Yet, the anticipated growth rate is hugging the zero line, and many producers either reported loss-making quarters or are rumored to do so soon. From the perspective of datacenter customers, by some estimates, the cost of renting memory ranges from $20 to $30 per gigabyte per year, for a resource that costs only $2 to $4 to procure outright. On top of this, software as a service (SaaS) end users, for example, are forced to rent all the memory they will need up front. By some estimates, they end up using less than 25% of that memory more than 75% of the time.<sup><a href="#R10">10</a></sup></p>
<p>Compute Express Link (CXL), a new technology emerging from the hardware side,<sup><a href="#R9">9</a></sup> is promising to provide <em>far</em> memory. Thus, there will be more memory capacity and perhaps even more bandwidth, but at the expense of greater latency. Optimization will first seek to keep memory in far tiers colder, and, second, minimize the rates of both access into and promotion out of these tiers.<sup><a href="#R1">1</a>,<a href="#R5">5</a></sup> Third, proactive promotion and demotion techniques being developed for far memory promote/demote whole objects instead of one cache line at a time to take advantage of bulk caching and eviction in order to avoid repeatedly incurring its long latency. Finally, offloading computations with many dependent accesses to a near-memory processor is already being seen as a way to keep the latency of memory out of the denominator of application throughput.<sup><a href="#R11">11</a></sup> With far memory, this will be a required optimization. </p>
<p>Applications that operate over richly connected data in memory engage heavily in pointer-chasing operations either directly (for example, graph processing in deep-learning recommendation models) or indirectly (for example, B+ tree index management in databases). <a href="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f1.jpg" onclick="window.open(this.href, '', 'resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no,width=1021,height=756'); return false;">Figure 1</a> shows an example of pointer-chasing applications in far memory: graph traversal; key lookup in a B+ index; and, collision resolution under open hashing.</p>
<p><a href="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f1.jpg" onclick="window.open(this.href, '', 'resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no,width=1021,height=756'); return false;"><img alt="f1.jpg" height="307" src="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f1.jpg" width="415" /></a><br/>
<strong>Figure 1. Example of pointer applications in far memory.</strong></p>
<p>Data from previous work<sup><a href="#R2">2</a></sup> suggests that as data structures scale beyond the memory limits of a single host, causing application data to spill into far memory, programmers are forced to make complex decisions about function and data placement, intercommunication, and orchestration.</p>
<p><strong>Performance characteristics of far memory.</strong> By default, pointers (like the internode ones in <a href="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f1.jpg" onclick="window.open(this.href, '', 'resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no,width=1021,height=756'); return false;">Figure 1</a>) are defined in the virtual address space of the process that created them. Because of this, if left unoptimized, pointer-chasing operations and their dependent accesses can overwhelm the microarchitecture resources that support memory-level parallelism (for example reorder buffers) even on a single CPU with local memory. With latencies that can range from 150ns to more than 300ns,<sup><a href="#R2">2</a></sup> far memory further compounds this problem.</p>
<p>In a distributed setting, implementing a simple-minded pointer-chasing offload without taking care of virtual-to-physical address translation results in chatty internode coordination with the parent process.<sup><a href="#R15">15</a></sup> Effective optimization of pointer-chasing operations entails minimizing communication between the near-memory processor executing the traversal and the server running the parent process.</p>
<p><strong>Developing far memory-ready applications.</strong> Evidence from high-performance computing (HPC) and database workloads points to the extreme inefficiency of pointer-rich sparse memory operations on CPUs and GPUs alike,<sup><a href="#R4">4</a>,<a href="#R14">14</a></sup> in some cases hitting less than 1% of peak performance. This leads applications to want to offload such work to near-memory processors. In the case of far memory, that near-memory processor is itself outside the translation context of the parent process of the pointer-rich data. Pointers therefore must make sense everywhere in these new heterogeneous disaggregated systems.</p>
<p>In order to lower infrastructure rent, cloud applications also wish to exploit disaggregated far memory as a fungible memory resource that can grow and shrink with the amount of data. Moreover, they want to independently scale their memory and compute resources. For example, database services want to flex compute up or down in proportion to query load. Pointer-rich data in far memory must be shareable at low overhead between existing and new compute instances.</p>

<p><a href="#PageTop">Back to Top</a></p>

<p><a name="body-2"></a></p>
<h3>Prior Work on Far Memory</h3>
<p>Pointers in traditional operating systems were valid only in the memory space of the process in which they were created. Sharing pointer-rich data among processes, nodes, and devices therefore required serialization-deserialization. This limitation remained even when prior art was recently extended by taking an approach of tombstoning dangling references to data demoted to far memory using special pointers.<sup><a href="#R7">7</a>,<a href="#R16">16</a></sup> Those pointers could be dereferenced only from the original context of data creation, precluding independent scaling of memory and computation.</p>
<p>Global address spaces, such as partitioned global address space (PGAS), support a limited form of global pointers that persist only for the life time of a set of processes across multiple nodes. Nonvolatile memory (NVM) libraries such as Persistent Memory Development Kit (PMDK) support object-based pointers, but their &quot;large&quot; storage-format pointers are more than 64-bits long, and their traversal cannot be offloaded.</p>
<p>Commercial virtualization frameworks such as VMware&#39;s Nu proclets<sup><a href="#R13">13</a></sup> can only maintain the illusion of global pointers by compromising security (for example, by turning address space layout randomization off).</p>
<p>Microsoft CompuCache<sup><a href="#R14">14</a></sup> also supported global pointers, but by using a heavy database runtime atop full VMs even on disaggregated memory devices. All pointers, whether at hosts or in the CompuCache, are VM-local only. Pointer chasing across devices requires repeatedly returning to the host.</p>
<p>Teleport<sup><a href="#R15">15</a></sup> supported pointer-chasing offload to remote memory but by directed, on-demand shipping of the virtual-to-physical translation context to the target locale of each function shipped.</p>
<p>Prior work on OS constructs for far memory is therefore missing a foundation of globally invariant pointers that can be shared with and dereferenced by any node or device in a cluster containing far memory.</p>

<p><a href="#PageTop">Back to Top</a></p>

<p><a name="body-3"></a></p>
<h3>Invariant Pointers</h3>
<p>When organizing data at object granularity, a globally invariant pointer must contain the ID of the object containing the target data, as well as an offset to that data. This object ID must be interpreted anywhere the pointer can be dereferenced. Ideally, invariant pointers should be no larger than 64 bits and permit access to partially resident objects. Existing approaches do not meet the first criterion (for example, PMDK) or the second criterion (for example, application-integrated far memory, AIFM,<sup><a href="#R12">12</a></sup> which has a different pointer form for resident and nonresident objects).</p>
<p>Providing truly globally invariant pointers, however, is necessary for offloading &quot;run anywhere&quot; code.</p>
<p>Twizzler<sup><a href="#R3">3</a></sup> is an operating system that introduces globally invariant pointers by using a context local to the object in which the pointer is stored, shortening its representation while allowing any CPU that can read the pointer to fully resolve its destination. This is done using an foreign object table (FOT) that is part of each object in the system, ensuring any individual object is self-contained.</p>
<p>An object&#39;s FOT contains identifying information for each foreign object that is the destination for a pointer in the object. Since these are stored in an ordered table, stored pointers use the index into the FOT as a stand-in for the full addressing information, a translation process shown in <a href="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f2.jpg" onclick="window.open(this.href, '', 'resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no,width=1021,height=334'); return false;">Figure 2</a>. This approach allows pointers to remain small: a 64-bit pointer can, for example, include a 24-bit &quot;local&quot; object ID and 40-bit offset. While this limits the number of foreign objects that can be referenced from a single object to 2<sup>24</sup>, different objects have their own FOTs and can reference a different set of objects, so the total number of objects in the system is limited only by the size of an object ID.</p>
<p><a href="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f2.jpg" onclick="window.open(this.href, '', 'resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no,width=1021,height=334'); return false;"><img alt="f2.jpg" height="136" src="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f2.jpg" width="415" /></a><br/>
<strong>Figure 2. Stored pointers use the index into the FOT as placeholder.</strong></p>
<p>This approach also allows for a wide range of resolvers that translate identifying information in the FOT into an object ID. For example, the FOT might contain a static object ID or the equivalent of a file-system name to be resolved to an object ID by a name resolver. There is no requirement that a name resolve to the same object ID in different places: for example, an object named /var/log/syslog might resolve to different object IDs on different system nodes. Name resolvers themselves can be pluggable: The FOT need only identify the resolver in a way that any node in the system can run the resolver to return an object ID.</p>
<p>While the first access to a foreign object may be relatively slow, subsequent accesses are very fast, since the resolution to an object ID is cached. The system maps the object into the node&#39;s &quot;guest physical&quot; address space, leveraging memory management unit (MMU) hardware already in use for virtualization. It then maps the guest physical space in which the object resides into the guest virtual space for any processes that reference the object, using extended page tables to remove software from the CPU load/store path and allowing the system to run at memory speed. This is necessary for efficiency; even minimal system software interaction on each load and store will slow the computation significantly.</p>
<p>Preliminary experiments<sup><a href="#R3">3</a></sup> show that Twizzler&#39;s approach is effective at preserving low-latency pointer dereferencing for both intra-object and inter-object invariant pointers. On an Intel Xeon Gold CPU running at 2.3GHz, intra-object pointer dereferences take about 0.4ns, approximately the same time as &quot;normal&quot; dereferences. Cached inter-object pointer dereferences take 3.2ns, somewhat slower than intra-object dereferences but still sufficiently fast because relatively few such references are expected, given multi-megabyte objects. The first reference to a foreign object is slower, at 28ns, but still reasonable. If name resolution is more complex than interpreting a static full-length (128-bit) object ID, it would be longer still; however, these penalties are paid only once, regardless of how many times pointers from object A to object B are dereferenced in the same process.</p>
<p>Benchmarks on both microscale (in-memory key/value store) and macroscale (Yahoo! Cloud Serving Benchmark, YCSB, using different back ends) likewise show excellent performance for this approach. The left graph in <a href="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f3.jpg" onclick="window.open(this.href, '', 'resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no,width=1550,height=491'); return false;">Figure 3</a> shows throughput of the YCSB benchmark on SQLite using four back ends: the native SQLite back end; the Lightning Memory-mapped Database (LMDB) backend, which leverages mmap; our implementation of a PMDK backend, which uses a red-black tree under PMDK; and Twizzler, which uses a red-black tree with the invariant pointer approach.</p>
<p><a href="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f3.jpg" onclick="window.open(this.href, '', 'resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no,width=1550,height=491'); return false;"><img alt="f3.jpg" height="131" src="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f3.jpg" width="415" /></a><br/>
<strong>Figure 3. Performance and latency of the YCSB benchmark,</strong></p>
<p>The invariant pointer approach outperforms every other approach while providing the flexibility of &quot;run anywhere&quot; invariant pointers. The graph on the right of <a href="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f3.jpg" onclick="window.open(this.href, '', 'resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no,width=1550,height=491'); return false;">Figure 3</a> similarly shows that these invariant pointers provide lower latency than other approaches because of the simplicity of the programming model and the low overhead for dereferencing pointers. PMDK, in particular, is significantly slower because its pointers are 128-bits long, requiring additional register space and memory operations to read and dereference.</p>
<p>It is important to note the PMDK and Twizzler implementations are running the same back-end code, with changes made only to accommodate the different programming models; this shows the benefit of using 64-bit pointers local to an object context rather than 128-bit pointers, as PMDK does.</p>
<p>Elephance MemOS is a fork of Twizzler being developed to run on CXL far memory devices. It will be ported and optimized for the systems-on-chip (SoCs) used as controllers in CXL-disaggregated memory nodes.</p>

<p><a href="#PageTop">Back to Top</a></p>

<p><a name="body-4"></a></p>
<h3>Programming with Memory Objects and Invariant Pointers</h3>
<p>For software developers, what does memory disaggregation mean and how will systems be built around it? The architecture of such systems will aim to hide the details from the majority of programmers, so their code will not need to change to run on these new systems.</p>
<p>There are three ways in which systems can be built to provide disaggregated memory: application libraries, modification to the operating system&#39;s memory system, and changes beneath the operating system at the hardware layers, as seen in <a href="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f4.jpg" onclick="window.open(this.href, '', 'resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no,width=1021,height=843'); return false;">Figure 4</a>. In the figure, a set of application servers is connected to a set of MemOS nodes over a shared bus. Pointer-rich application data in far memory lives on MemOS nodes. Pointers can be: inter-object and on the same device, inter-object across devices, or intra-object.</p>
<p><a href="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f4.jpg" onclick="window.open(this.href, '', 'resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no,width=1021,height=843'); return false;"><img alt="f4.jpg" height="343" src="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f4.jpg" width="415" /></a><br/>
<strong>Figure 4. Example MemOS deployment.</strong></p>
<p>It is likely the first way that disaggregated memory will be made available will be through application libraries linked directly into the application, seen at the top of <a href="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f5.jpg" onclick="window.open(this.href, '', 'resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no,width=1021,height=526'); return false;">Figure 5</a>. The memory shim acts as a specialized memory allocator that knows how to handle remote memory using a memory access protocol (MAP). The MAP may depend on a current technology such as RDMA (remote direct memory access (RDMA), or may be something newer such as CXL3.</p>
<p><a href="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f5.jpg" onclick="window.open(this.href, '', 'resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no,width=1021,height=526'); return false;"><img alt="f5.jpg" height="214" src="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f5.jpg" width="415" /></a><br/>
<strong>Figure 5. Extending the OS&#39;s virtual memory system.</strong></p>
<p>Many languages, such as Python, which depend on the C library for memory, will be able to use the memory shim to handle memory for objects in the language, freeing the Python programmer from having to know anything about disaggregated memory. For languages such as C and C++, which handle pointers directly, the programmer will have to work with the memory shim APIs in order to manage remote memory. The prevalence of Python and similar managed memory languages in big data and machine-learning applications means that programmers in those fields can use disaggregated memory in a transparent way, no matter where the memory shim is located in the software stack.</p>
<p>Extending the operating system&#39;s virtual memory system to integrate with the memory shim is the next logical place to interpose disaggregated memory in the stack, seen in (B) in <a href="https://dl.acm.org/cms/attachment/html/10.1145/3617581/assets/html/f5.jpg" onclick="window.open(this.href, '', 'resizable=yes,status=no,location=no,toolbar=no,menubar=no,fullscreen=no,scrollbars=no,dependent=no,width=1021,height=526'); return false;">Figure 5</a>. Again, the specific MAP is not exposed to the kernel developer, only the memory shim APIs. The Linux operating system already has heterogeneous memory management (HMM),<sup><a href="#R8">8</a></sup> which is a natural place to slot in the memory shim. Once the shim is integrated into the operating system itself, all applications can use disaggregated memory transparently without modifications to their source code or linking with specialized libraries.</p>
<p>The deepest that far memory can be placed in the stack is in the hardware itself. Memory controllers integrated in CPUs from Intel and AMD are already starting to support early versions of CXL disaggregated memory. In the future, more featureful controllers will present memory to the operating system both locally and remotely in a transparent manner but, like the other two cases, will require a MAP to be interposed between the hardware and the remote memory. The protocol in this instance will be CXL 3. While putting the memory shim into hardware will likely result in the highest bandwidth, lowest latency, and maximum portability, there are reasons to continue to use a memory shim as a linked library into the software. First and foremost is the level of control that linking directly to the memory shim gives to the programmer. Once such functionality is embedded into the operating system or the memory controller, application programmers will lose control and visibility into the remote memory system. While many will be happy not to have to manage memory on their own, applications will remain where such control is a feature. Novel memory architectures for distributed memory must first be tried in software, and some may be too specialized ever to be implemented in hardware.</p>
<hr/>
<blockquote>
<p><em>Effectively exploiting emerging far-memory technology requires consideration of operating on richly connected data outside the parent process.</em></p>
</blockquote>
<hr/>
<p>Consider a memory system where pointers are globally invariant, which will be possible with MemOS but is not yet common in pointer-based systems. Building and debugging such a system in software makes it possible to rapidly iterate on the design&mdash;impossible in a memory controller and certainly more difficult to debug in the operating system. Applications that can use globally invariant pointers have distinct advantages because computation can take place on any node without the application having to know where a pointer might reside. Furthermore, it will be possible to move code, rather than data, to achieve computational efficiency&mdash;again, because no matter which compute node a pointer resides on, the pointer itself is the global handle that computation depends on, rather than an address in local memory, as things stand today.</p>

<p><a href="#PageTop">Back to Top</a></p>

<p><a name="body-5"></a></p>
<h3>Key Takeaways</h3>
<p>Effectively exploiting emerging far-memory technology requires consideration of operating on richly connected data outside the context of the parent process. Operating-system technology in development offers help by exposing abstractions such as memory objects and globally invariant pointers that can be traversed by devices and newly instantiated compute. Such ideas will allow applications running on future heterogeneous distributed systems with disaggregated memory nodes to exploit near-memory processing for higher performance and to independently scale their memory and compute resources for lower cost.</p>

<p><a href="#PageTop">Back to Top</a></p>

<div id="article-references"><a name="references"></a>
<h3>References</h3>
<p><a name="R1"></a>1. Al Maruf, H. et al. TPP: Transparent page placement for CXL-enabled tiered-memory. In <em>Proceedings of the 28<sup>th</sup> ACM Intern. Conf. Architectural Support for Programming Languages and Operating Systems 3</em>, (2023), 742&ndash;755; <a href="https://dl.acm.org/doi/10.1145/3582016.3582063">https://dl.acm.org/doi/10.1145/3582016.3582063</a>.</p>
<p><a name="R2"></a>2. Berger, D.S. et al. Design trade-offs in CXL-based memory pools for public cloud platforms. <em>IEEE Micro 43</em>, 2 (2023), 30&ndash;38; <a href="https://dl.acm.org/doi/abs/10.1109/MM.2023.3241586">https://dl.acm.org/doi/abs/10.1109/MM.2023.3241586</a>.</p>
<p><a name="R3"></a>3. Bittman, D. et al. Twizzler: a data-centric OS for non-volatile memory. In <em>Proceedings of the 2020 Usenix Annual Tech. Conf.</em>; <a href="https://dl.acm.org/doi/pdf/10.5555/3489146.3489151">https://dl.acm.org/doi/pdf/10.5555/3489146.3489151</a>.</p>
<p><a name="R4"></a>4. Dongarra, J. A not so simple matter of software. <em>ACM Turing Award Lecture</em> (2021); <a href="https://www.youtube.com/watch?v=cSO0Tc2w5Dg">https://www.youtube.com/watch?v=cSO0Tc2w5Dg</a>.</p>
<p><a name="R5"></a>5. Duraisamy, P. et al. Towards an adaptable systems architecture for memory tiering at warehouse-scale. In <em>Proceedings of the 28<sup>th</sup> ACM Intern. Conf. Architectural Support for Programming Languages and Operating Systems 3</em>, (2023), 727&ndash;741; <a href="https://dl.acm.org/doi/10.1145/3582016.3582031">https://dl.acm.org/doi/10.1145/3582016.3582031</a>.</p>
<p><a name="R6"></a>6. Hsieh, K. et al. Accelerating pointer chasing in 3D-stacked memory: challenges, mechanisms, evaluation. In <em>Proceedings of the IEEE 34<sup>th</sup> Intern. Conf. Computer Design.</em> (2016), 25&ndash;32; <a href="https://ieeexplore.ieee.org/document/7753257">https://ieeexplore.ieee.org/document/7753257</a>.</p>
<p><a name="R7"></a>7. Jennings, S. The zswap compressed swap cache. <em>LWNNet.</em> (2013); <a href="https://lwn.net/Articles/537422/">https://lwn.net/Articles/537422/</a>.</p>
<p><a name="R8"></a>8. Kernel Development Community. Heterogeneous memory management. <em>The Linux Kernel 5.0.0</em>; <a href="https://www.kernel.org/doc/html/v5.0/vm/hmm.html">https://www.kernel.org/doc/html/v5.0/vm/hmm.html</a>.</p>
<p><a name="R9"></a>9. Mehra, P. and Coughlin, T. Taming memory with disaggregation. <em>Computer 55</em>, 9 (2022), 94&ndash;98; <a href="https://ieeexplore.ieee.org/document/9869614">https://ieeexplore.ieee.org/document/9869614</a>.</p>
<p><a name="R10"></a>10. Michelogiannakis, G. et al. A case for intra-rack resource disaggregation in HPC. <em>ACM Trans Architecture and Code Optimizations 19</em>, 2 (2022), 1&ndash;26; <a href="https://dl.acm.org/doi/10.1145/3514245">https://dl.acm.org/doi/10.1145/3514245</a>.</p>
<p><a name="R11"></a>11. Rodrigues, A. et al. Towards a scatter-gather architecture: hardware and software issues. In <em>Proceedings of the 2019 Intern. Symp. Memory Systems.</em> 261&ndash;271; <a href="https://dl.acm.org/doi/10.1145/3357526.3357571">https://dl.acm.org/doi/10.1145/3357526.3357571</a>.</p>
<p><a name="R12"></a>12. Ruan, Z. et al. AIFM: High-performance, application-integrated far memory. In <em>Proceedings of the 14<sup>th</sup> Usenix Symp. Operating Systems Design and Implementation.</em> (2023); <a href="https://dl.acm.org/doi/pdf/10.5555/3488766.3488784">https://dl.acm.org/doi/pdf/10.5555/3488766.3488784</a>.</p>
<p><a name="R13"></a>13. Ruan, Z. et al. Nu: Achieving microsecond-scale resource fungibility with logical processes. In <em>Proceedings of the 20<sup>th</sup> Usenix Symp. Networked Systems Design and Implementation.</em> (2023); <a href="https://www.usenix.org/system/files/nsdi23-ruan.pdf">https://www.usenix.org/system/files/nsdi23-ruan.pdf</a>.</p>
<p><a name="R14"></a>14. Zhang, Q. et al. CompuCache: Remote computable caching using spot VMs. In <em>Proceedings of the 12<sup>th</sup> Annual Conf. Innovative Data Systems Research.</em> (2022); <a href="https://www.cidrdb.org/cidr2022/papers/p31-zhang.pdf">https://www.cidrdb.org/cidr2022/papers/p31-zhang.pdf</a>.</p>
<p><a name="R15"></a>15. Zhang, Q. et al. Optimizing data-intensive systems in disaggregated data centers with Teleport. In <em>Proceedings of the 2022 Intern. Conf. Management of Data</em>; <a href="https://dl.acm.org/doi/10.1145/3514221.3517856">https://dl.acm.org/doi/10.1145/3514221.3517856</a>.</p>
<p><a name="R16"></a>16. Zhou, Y. et al. Carbink: Fault-tolerant far memory. In <em>Proceedings of the 16<sup>th</sup> Usenix Symp. Operating Systems Design and Implementation.</em> (2022); <a href="https://www.usenix.org/system/files/osdi22-zhou-yang.pdf">https://www.usenix.org/system/files/osdi22-zhou-yang.pdf</a>.</p>
</div>

<p><a href="#PageTop">Back to Top</a></p>

<div id="article-authorinfo"><a name="authorinfo"></a>
<h3>Authors</h3>
<p><strong>Ethan Miller</strong> has been a member of the technical staff at Pure Storage since 2009. He is a professor emeritus in computer science and engineering at the University of California, Santa Cruz, CA, USA, where he held the Veritas Presidential Chair in Storage; founded the Center for Research in Storage Systems; and led the development of the Ceph distributed file system, the Twizzler operating system.</p>
<p><strong>George Neville-Neil</strong> works on networking and operating system code as well as teaches courses on various subjects related to programming. He is the author of <em>The Kollected Kode Vicious</em> and a co-author of <em>The Design and Implementation of the FreeBSD Operating System.</em></p>
<p><strong>Achilles Benetopoulos</strong> is a Ph.D. student at the University of California, Santa Cruz, CA, USA, working at the intersection of distributed systems, databases, and programming languages.</p>
<p><strong>Pankaj Mehra</strong> is founder of Elephance Memory. He was previously Vice President of Product Planning at Samsung, a senior fellow at SanDisk and Western Digital, and a distinguished technologist at Hewlett-Packard.</p>
<p><strong>Daniel Bittman</strong> is a co-founder of Elephance Memory and principal maintainer of the Twizzler operating system.</p>
</div>

<div id="article-permission">
<hr/><a name="permission"></a>
<p>Copyright held by owner(s)/author(s).<br/>
Request permission to (re)publish from the owner/author</p>
</div>

<p>The Digital Library is published by the Association for Computing Machinery. Copyright&nbsp;&copy;&nbsp;2023 ACM, Inc.</p>

<p>&nbsp;</p>
<div class="clearer"></div>
<hr class="thick" />
<a name="comments"></a>
<div id="ArticleComments">
<span id="CommentHeader">&nbsp;</span>
</div>
<p class="view-all">
No entries found
</p>

</div>
<div class="col3 floatLeft lastCol">
<div class="signInWidget widget">
<span class="signInTitle">Sign In <span class="noTransform">for Full Access</span></span>
<form action="https://cacm.acm.org/login" method="post">
<div class="portaInputSignIn">
<label for="inputUser" class="inField">User Name</label>
<input name="current_member[user]" type="text" id="inputUser" />
</div>
<div class="portaInputSignIn">
<label for="inputPassword" class="inField">Password</label>
<input type="password" name="current_member[passwd]" id="inputPassword" />
</div>
<a href="/accounts/forgot-password" class="subText">&raquo; Forgot Password?</a>
<a href="/accounts/new" class="subText"><strong>&raquo; Create an ACM Web Account</strong></a>
<button type="submit" class="submitSignIn">Sign In</button>
</form>
</div>
<div id="article-contents-widget" class="widget contentsWidget">
<h6 class="loud">Article Contents:</h6>
<ul>
<li class="miniWidgetItem"><a href="#body-1">Introduction</a></li>
<li class="miniWidgetItem"><a href="#body-2">Prior Work on Far Memory</a></li>
<li class="miniWidgetItem"><a href="#body-3">Invariant Pointers</a></li>
<li class="miniWidgetItem"><a href="#body-4">Programming with Memory Objects and Invariant Pointers</a></li>
<li class="miniWidgetItem"><a href="#body-5">Key Takeaways</a></li>
<li class="miniWidgetItem"><a href="#references">References</a></li>
<li class="miniWidgetItem"><a href="#authorinfo">Authors</a></li>
</ul>
</div>
<div id="SideColumn">

<div id="related-news-opinion-widget" class="blueWidget widget noBottom" data-swiftype-index="false">
<span class="widgetName">More News &amp; opinions</span>
<div class="singleNews firstNews">
<h5>
<a href="/news/277288-medical-imaging-fails-dark-skin-researchers-fixed-it">
Medical Imaging Fails Dark Skin. Researchers Fixed It
</a>
</h5>
<span class="dateNews">Johns Hopkins University Hub</span>
</div>
<div class="singleNews">
<h5>
<a href="/magazines/2023/12/278149-halfway-around-the-world">
Halfway Around the World
</a>
</h5>
<span class="dateNews">George V. Neville-Neil</span>
</div>
<div class="singleNews">
<h5>
<a href="/blogs/blog-cacm/276277-the-life-or-death-importance-of-medical-device-security">
The Life-or-Death Importance of Medical Device Security
</a>
</h5>
<span class="dateNews">Alex Vakulov</span>
</div>
</div>

</div>
</div>
<a class=" hidden video-link" href=" "></a>
</section>
<button class="to-top"></button>
<footer>
<nav>
<ul>
<li class="first-child"><a href="/about-communications/author-center" title="For Authors">For Authors</a></li>
<li><a href="https://www.acm.org/publications/advertising" title="For Advertisers" target="_blank">For Advertisers <img src="/images/icons/new_page.png" alt="For Advertisers" /></a></li>
<li><a href="/privacy" title="Privacy Policy">Privacy Policy</a></li>
<li><a href="/help" title="Help">Help</a></li>
<li><a href="/about-communications/contact-us" title="Contact Us">Contact Us</a></li>
<li><a class="toggle-mobile" href="https://m-cacm.acm.org/magazines/2023/12/278153-pointers-in-far-memory/fulltext?mobile=true" data-domain="cacm.acm.org">Mobile Site</a></li>
</ul>
</nav>
<span id="footerText">Copyright &#169; 2023 by the ACM. All rights reserved.</span>
</footer>
</div>
</div>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script src="/javascripts/lib/jquery.jplayer.js"></script>
<!--[if lte IE 6]><script  src="/javascripts/iepngfix_tilebg.js"></script><![endif]-->
<script>!window.jQuery && document.write('<script src="/javascripts/jquery/jquery.min.js"><\/script>')</script>
<script src="/javascripts/jquery.infieldlabel.min.js"></script>
<script src="/javascripts/cufon.js"></script>
<script src="/javascripts/proxima_400.font.js"></script>
<script src="/javascripts/behaviors/jquery.tipsy.js"></script>
<script src="/javascripts/behaviors/jquery.colorbox-min.js"></script>
<script src="/javascripts/application.js"></script>
</body>
</html>
