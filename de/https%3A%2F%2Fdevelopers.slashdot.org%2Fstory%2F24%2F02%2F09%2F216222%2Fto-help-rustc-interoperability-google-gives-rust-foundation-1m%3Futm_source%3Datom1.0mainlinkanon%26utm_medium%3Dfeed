<!-- html-header type=current begin -->
	
	<!DOCTYPE html>
	
	<html lang="en">
	<head>
	<!-- Render IE9 -->
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

	

	<script id="before-content" type="text/javascript">
(function () {
    if (typeof window.sdmedia !== 'object') {
         window.sdmedia = {};
    }
    if (typeof window.sdmedia.site !== 'object') {
        window.sdmedia.site = {};
    }

    var site = window.sdmedia.site;
    site.rootdir = "//slashdot.org";
}());

var pageload = {
	pagemark: '167749347139521338',
	before_content: (new Date).getTime()
};
function pageload_done( $, console, maybe ){
	pageload.after_readycode	= (new Date).getTime();
	pageload.content_ready_time	= pageload.content_ready - pageload.before_content;
	pageload.script_ready_time	= pageload.after_readycode - pageload.content_ready;
	pageload.ready_time		= pageload.after_readycode - pageload.before_content;
	// Only report 1% of cases.
	maybe || (Math.random()>0.01) || $.ajax({ type: 'POST', data: {
		op: 'page_profile',
		pagemark: pageload.pagemark,
		dom: pageload.content_ready_time,
		js: pageload.script_ready_time
	} });
}
</script>
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"> 
	
		<title>To Help Rust/C++ Interoperability, Google Gives Rust Foundation $1M - Slashdot</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	  
		<meta name="description" content="An anonymous Slashdot reader shared this report from SiliconANGLE:


The Rust Foundation, which supports the development of the popular open-source Rust programming language... shared that Google LLC had made a $1 million contribution specifically earmarked for a C++/Rust interoperability effort kno...">
	    
		<meta name="twitter:card" content="summary">
		<meta name="twitter:site" content="@slashdot">
		<meta name="twitter:domain" content="developers.slashdot.org">
		<meta property="og:url" content="https://developers.slashdot.org/story/24/02/09/216222/to-help-rustc-interoperability-google-gives-rust-foundation-1m?utm_source=rss1.0mainlinkanon&utm_medium=feed">
	    
		<meta property="og:title" content="To Help Rust/C++ Interoperability, Google Gives Rust Foundation $1M - Slashdot">
		<meta property="og:description" content="An anonymous Slashdot reader shared this report from SiliconANGLE:


The Rust Foundation, which supports the development of the popular open-source Rust programming language... shared that Google LLC had made a $1 million contribution specifically earmarked for a C++/Rust interoperability effort kno...">
	  
	
	
		<meta property="og:image" content="https://a.fsdn.com/sd/topics/programming_64.png">
	
		<meta property="fb:admins" content="100000696822412">
		<meta property="fb:page_id" content="267995220856">
	
		<meta name="viewport" content="width=1000, user-scalable=yes, minimum-scale=0, maximum-scale=10.0" />
		<meta name="apple-mobile-web-app-capable" content="yes">
		<meta name="apple-mobile-web-app-status-bar-style" content="black">
	
		<link rel="canonical" href="https://developers.slashdot.org/story/24/02/09/216222/to-help-rustc-interoperability-google-gives-rust-foundation-1m">
		
		<link rel="alternate" media="only screen and (max-width: 640px)" href="https://m.slashdot.org/story/424742" >
	

		<link rel="stylesheet" type="text/css" media="screen, projection" href="//a.fsdn.com/sd/classic.ssl.css?ea201902b74ad159" >
		<!--[if IE 8]><link rel="stylesheet" type="text/css" media="screen, projection" href="//a.fsdn.com/sd/ie8-classic.ssl.css?ea201902b74ad159" ><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" type="text/css" media="screen, projection" href="//a.fsdn.com/sd/ie7-classic.ssl.css?ea201902b74ad159" ><![endif]-->
	
	
	



	
	<!--  -->

	
	

	
	<!-- SMACKS: NEW CSS -->
	<link rel="stylesheet" href="//a.fsdn.com/sd/css/app.css?ea201902b74ad159">

	<script src="//a.fsdn.com/con/js/sftheme/cmp2.js?2024-01"></script>
	<script src="https://slashdot.org/country.js"></script>
	<script>
		window.bizx.cmp.init({cmp_id: 12126, geo: window, gam_gdpr_technical_delivery: true});
	</script>
	<link rel="stylesheet" href="//a.fsdn.com/con/css/sftheme/sandiego/cmp.css?2020-06-11" type="text/css">

	<script type='text/javascript'>
var _gaq = _gaq || [];
</script>

<script>
window.SD = {};
window.SD.Ads = {};

bizx.cmp.ifConsent('', ['all'], function () {
    var bt = 'https://btloader.com/tag?o=5098683085881344&upapi=true';
    bizx.cmp.embedScript(bt, true);
    window.addEventListener('AcceptableAdsInit', function (e) {
      if(e.detail) {
        console.log('acceptable ads on');
        SD.Ads.acceptable_ads_active = true;
      } else {
        console.log('acceptable ads off');
        SD.Ads.acceptable_ads_active = false;
      }
    });
});
</script>



         
   
   

<script type="text/javascript" id="pbjs_script" data-dom="https://d3tglifpd8whs6.cloudfront.net"  src="https://d3tglifpd8whs6.cloudfront.net/js/prebid/slash-story/slash-story.min.js"></script>
<script type='text/javascript'>
    /*global performance */
    var googletag = window.googletag || {};
    googletag.cmd = googletag.cmd || [];

		window.SD.Ads.slotsById = {};
		window.SD.Ads.idsByPath = {};

		window.SD.Ads.visibleTime = {};
		window.SD.Ads.Helpers = {};

		//window.SD = SD;

    bizx.cmp.ifConsent('', ['all','prebid'], function(){
        window.bizxPrebid.Ads.initPrebid(window.bizxPrebid.adUnits);
    }, function() {
		// no 'prebid' consent (e.g. region without prebid consent string support) but try GPT directly
		bizx.cmp.ifConsent('', ['all', 'google-ads'], function () {
			bizx.cmp.embedScript('https://securepubads.g.doubleclick.net/tag/js/gpt.js');
		});
	});
</script>

<!-- prep GPT ads -->
<script type='text/javascript'>
(function() {
	function page_type (loc) {
		/*
		only four page types:
		- Story
		- Poll
		- Homepage (/ only)
		- Other (but AdOps wants 'Homepage' again)
		*/
		var path = loc.pathname;
		var just_the_root = /^\/?$/.test(path);
		var story_or_poll = /^\/(story(?=\/)|submission(?=\/)|poll(?=\/|Booth|s\b))/i.exec(path);

		var page_type = just_the_root ? 'homepage'
			: story_or_poll ? story_or_poll[1]
				: 'other'

		// exceptions
		if (page_type.toLowerCase() === 'submission')
			page_type = 'story'; // submissions are like stories, right?
		else if (page_type.toLowerCase() === 'other')
			page_type = 'homepage'; // this one might move out of here

		return page_type;
	}

	function page_section(loc) {
		//var greek = ['alpha', 'beta', 'gamma', 'delta'].join('|');
		//var hostwise = '^([a-z]+)(?:-(?:'+greek+'))?\\.(?:slashdot\\.org|\\.xb\\.sf\\.net)$';
		var pathwise = '^/(?:(recent|popular|blog)|stories/([^/]+))';
		var rootwise = '^\/?$';

		//var hostwisely = new RegExp(hostwise,'i').exec(loc.hostname);
		var pathwisely = new RegExp(pathwise, 'i').exec(loc.pathname);
		var rootwisely = new RegExp(rootwise, 'i').exec(loc.pathname);

		var section = (rootwisely && 'homepage')
			|| (pathwisely && (pathwisely[1] || pathwisely[2]))
			|| ''
		;

		return section.replace(/[^_a-z]/ig, '');
	}

	function single_size(size) {
		return '' + size[0] + 'x' + size[1];
	}

	function sz_sz(sz) {
		var str = '';
		var sizes = [];
		if (sz[0] instanceof Array) {
			for (size in sz) {
				sizes.push(single_size(sz[size]));
			}
			return sizes.join(',');
		} else {
			return single_size(sz);
		}
	}

	function unique_tpc_array(array1, array2) {
		var j = array1.concat(array2);
		j.forEach(function (v, i, a) {
			a[i] = v.replace(/[^_a-z]/ig, '');
		});
		return j.filter(function (v, i, a) {
			return v != '' && a.indexOf(v) === i;
		});
	}

	/* LEGEND:
		- 'sz' = "size"
		- 'npt' = "no page type" in ad unit name
	*/
	var tags = {
		'728x90_A': {'sz': [[728, 90], [970, 90], [970, 250], [980, 66]]},
		'728x90_B': {'sz': [728, 90]},
		'728x90_C': {'sz': [728, 90], 'skip': {'homepage': 1}},
		'HubIcon_200x90_A': {'sz': [[200, 90], [220, 90]]},
		'PowerSwitch_980x66_A': {'sz': [980, 66], 'skip': {'homepage': 1}},
		'PollPeel': {'sz': [200, 90], 'skip': {'homepage': 1}},
		//'VideoWidget_300x250': { 'sz': [300, 250], 'npt': 1 },
		'300x250_A': {'sz': [[300, 250], [300, 600], [300, 1050]]},
		'300x250_B': {'sz': [[300, 250], [300, 600]]},
		'300x250_C': {'sz': [[300, 250], [300, 600]]},
		'300x250_D': {'sz': [[300, 250], [300, 600]]},
		'Pulse_300x600_A': {'sz': [300, 600]},
		//'Polls_Detail_300x250_A': { 'sz': [[300, 250], [300, 600]], 'npt': 1 },
		//'Poll_300x250_A': { 'sz': [[300, 250], [300, 600]], 'npt': 1 },
		//'SD_Story_1x1': { 'sz': [1, 1] },
		'1x1': {'sz': [1, 1]}
	};

	//var network_path = '/41014381/Slashdot/';
	var network_path = '/41014381/Slashdot/';
	var tag_name_prefix = 'SD';
	var tag_name_linkage = '_';
	var tag_name_pagetype = page_type(location);
	var tag_topic = page_section(location);
	if (tag_name_pagetype == 'poll') {
		tag_name_pagetype = 'Poll';
	}
	var before_tag_pagetyped = network_path
		+ tag_name_prefix
		+ tag_name_linkage
		+ tag_name_pagetype
		+ tag_name_linkage
	;
	var before_tag_pagetypeless = network_path
		+ tag_name_prefix
		+ tag_name_linkage
		/* + tag_name_pagetype */
		/* + tag_name_linkage */
	;

		//can be safely called
		googletag.cmd.push(function () {

			function remove_sticky_top() {
				setTimeout(function () {
					$('#div-gpt-ad-728x90_a').parent('div').addClass('adwrap-viewed-banner');
					$('#div-gpt-ad-728x90_a').addClass('viewableImpression');
				}, 1000);
			}

			function remove_sticky_railad() {
				setTimeout(function () {
					$('#slashboxes .adwrap-unviewed').addClass('adwrap-viewed-railad');
					$('.railad').addClass('viewableImpression');
				}, 1000);
			}

			function viewable_imp(slot) {
				for (var i in slot) {
					remove_sticky_top();
					remove_sticky_railad();
					if (typeof slot[i] !== 'string') continue;
					switch (slot[i]) {
						//case "/41014381/Slashdot/SD_homepage_728x90_A":
						//case "/41014381/Slashdot/SD_story_728x90_A":
						//case "/41014381/Slashdot/SD_Poll_728x90_A":
						//case "/41014381/Slashdot/SD_homepage_728x90_Ref_A":
						//case "/41014381/Slashdot/SD_story_728x90_Ref_A":
						//case "/41014381/Slashdot/SD_Poll_728x90_Ref_A":
						//remove_sticky_top();
						//break;
						//case "/41014381/Slashdot/SD_homepage_300x250_A":
						//case "/41014381/Slashdot/SD_story_300x250_A":
						//case "/41014381/Slashdot/SD_Poll_300x250_A":
						//case "/41014381/Slashdot/SD_homepage_300x250_Ref_A":
						//case "/41014381/Slashdot/SD_story_300x250_Ref_A":
						//case "/41014381/Slashdot/SD_Poll_300x250_Ref_A":
						//remove_sticky_railad();
						//break;
					}
					//if(slot[i] === "/41014381/Slashdot/SD_homepage_728x90_A") remove_sticky_top();
					//if(slot[i] === "/41014381/Slashdot/SD_homepage_300x250_A") remove_sticky_railad();
				}
			}

			function define_me_a_slot(tag) {
				if (tags[tag].skip && tags[tag].skip[tag_name_pagetype])
					return;
				var sandbox_regex = /\.xb\.sf\.net$/i;
				var full_name = tags[tag].npt  // "no page type"
					? before_tag_pagetypeless + tag
					: before_tag_pagetyped + tag
				;
				var div_id = 'div-gpt-ad-' + tag.toLowerCase();
				// extend jQuery and get URL query params
				jQuery.extend({
					getQueryParameters: function (str) {
						return (str || document.location.search).replace(/(^\?)/, '').split("&").map(function (n) {
							return n = n.split("="), this[n[0]] = n[1], this
						}.bind({}))[0];
					}
				});

				var queryParams = $.getQueryParameters();

				if (queryParams.source === 'autorefresh') {
					full_name = full_name.replace(/(\d+x\d+)/, '$1_Ref');
					//console.log('TAG NAME: ', full_name);
				}

				var slot = googletag.defineSlot(
					full_name,
					tags[tag].sz,
					div_id
				);

				service = slot.addService(googletag.pubads());

				window.SD.Ads.slotsById[div_id] = slot;
				window.SD.Ads.idsByPath[full_name] = div_id;

				service.setTargeting('sz', tags[tag].sz);

				
				var frontend_tpc = tag_topic.split(",");
				var backend_tpc = [ "programming", "google", "developers" ];

				var tpc_final = unique_tpc_array(frontend_tpc, backend_tpc);
				service.setTargeting('tpc', tpc_final);
				if (location.hostname.match(sandbox_regex)) {
					service.setTargeting('test', 'adops');
				}

			}

		for (tag in tags) {
			define_me_a_slot(tag, false);
		}


			googletag.pubads().addEventListener('slotVisibilityChanged', window.SD.Ads.visibilityChangedTracker);


		googletag.pubads().addEventListener('impressionViewable', function(event) {
			viewable_imp(event.slot);
		    });

                googletag.pubads().setTargeting('requestSource', 'GPT');
		googletag.pubads().enableAsyncRendering();
		

		googletag.pubads().collapseEmptyDivs();
		window.bizxPrebid.SAFEFRAMES = true;
		window.SD.Ads.setupAdRefresh();
		bizxPrebid.Ads.pushToGoogle();
		googletag.enableServices();
	});
})();


/* Ad-Refresh code */
window.SD.Ads.visibilityChangedTracker = function(event) {
	var id = event.slot.getSlotElementId();
	if (!window.SD.Ads.visibleTime.hasOwnProperty(id)) {
		window.SD.Ads.visibleTime[id] = {
			visible: false,
			prevVisibleTotal: 0,
			wasVisibleBeforePageBgd: false,
			reloadCount: 0
		};
	}
	var timeinfo = window.SD.Ads.visibleTime[id];
	if (event.inViewPercentage >= 50 && !document.hidden) {
		if (!timeinfo.visible) {
			timeinfo.visible = performance.now();
		}
	} else {
		if (timeinfo.visible) {
			timeinfo.prevVisibleTotal += performance.now() - timeinfo.visible;
			timeinfo.visible = false;
		}
	}
};

window.SD.Ads.setupAdRefresh = function() {
	document.addEventListener('visibilitychange', function () {
		for (var id in window.SD.Ads.visibleTime) {
			if (window.SD.Ads.visibleTime.hasOwnProperty(id)) {
				var timeinfo = window.SD.Ads.visibleTime[id];
				if (document.hidden) {
					timeinfo.wasVisibleBeforePageBgd = !!timeinfo.visible;
					if (timeinfo.visible) {
						timeinfo.prevVisibleTotal += performance.now() - timeinfo.visible;
						timeinfo.visible = false;
					}
				} else if (!document.hidden && timeinfo.wasVisibleBeforePageBgd) {
					timeinfo.visible = performance.now();
				}
			}
		}
	}, false);

	// after 30 sec, start checking every second for reload
	var LIMIT_MS = 30000;
	setTimeout(function () {
		//
		setInterval(function () {
			if (document.hidden) {
				return;
			}
			for (var id in window.SD.Ads.visibleTime) {
				if (window.SD.Ads.visibleTime.hasOwnProperty(id)) {
					var timeinfo = window.SD.Ads.visibleTime[id];
					if (timeinfo.visible &&
						timeinfo.prevVisibleTotal + (performance.now() - timeinfo.visible) >= LIMIT_MS &&
						timeinfo.reloadCount < 50
					) {
						timeinfo.reloadCount++;
						timeinfo.visible = false;
						timeinfo.prevVisibleTotal = 0;
						window.SD.Ads.Helpers.refreshBids([id]);
					}
				}
			}
		}, 1000);
	}, LIMIT_MS);
};

window.SD.Ads.Helpers.refreshBids = function (reloadIds) {
		console.log('AD REFRESH: refreshBids', reloadIds);
		pbjs.que.push(function () {
			for (var i = reloadIds.length-1; i >= 0; i--) {
				var id = reloadIds[i];
				// clear out winner status from earlier auctions
				if (bizxPrebid.Ads.prebidWinners[id]) {
					delete bizxPrebid.Ads.prebidWinners[id];
				}
				// if has complement (hubicon), remove it since they are just house ads and can cause funky layouts if this leaderboard is refreshed to a different size
				var path = window.SD.Ads.slotsById[id].getAdUnitPath();
				/*var complement = gptadComplements[path];
				if (complement) {
					var complement_shortname = complement[0];
					var complement_path = "/41014381/SD/" + complement_shortname;
					var slot = window.SD.Ads.slotsById[window.SD.Ads.idsByPath[complement_path]];
					if (slot) {
						googletag.destroySlots([slot]);
						var $wrappedAd = $(window.SD.Ads.Helpers.getContainerIDFromPath(complement_path));
						$wrappedAd.remove();
						delete gptadComplements[path];
					}
				}*/

			}

			pbjs.requestBids({
				timeout: window.bizxPrebid.PREBID_TIMEOUT,
				adUnitCodes: reloadIds,
				bidsBackHandler: function () {
					var reloadSlots = reloadIds.map(function(id) { return window.SD.Ads.slotsById[id]; });

					// clear out previous sizing attrs, as they may change after refresh
/*
					for (var i = 0; i < reloadSlots.length; i++) {
						var $wrappedAd = $(window.SD.Ads.Helpers.getContainerIDFromPath(reloadSlots[i].getAdUnitPath()));
						var classes = $wrappedAd.attr('class').split(' ');
						for (var j = 0; j < classes.length; j++) {
							if (classes[j].indexOf('sz_') >= 0) {
								$wrappedAd.removeClass(classes[j]);
							}
						}
					}
*/
					pbjs.setTargetingForGPTAsync(reloadIds);
					googletag.pubads().refresh(reloadSlots);
				}
			});
		});
	}
</script>

<!-- CrossPixel -->
<script type="text/javascript">
if (window.is_euro_union === 0) {
    bizx.cmp.ifConsent('', ['all'], function(){
        try{(function(){ var cb = new Date().getTime(); var s = document.createElement("script"); s.defer = true; s.src = "//tag.crsspxl.com/s1.js?d=2397&cb="+cb; var s0 = document.getElementsByTagName('script')[0]; s0.parentNode.insertBefore(s, s0); })();}catch(e){}
    });
}
</script>




<!-- AdBlock Check -->
<script>
var sdAdBlockActive = true;
</script>
<script async src="//a.fsdn.com/sd/js/scripts/adsbanner.js?ea201902b74ad159"></script>
</head>

<body class="anon firehose ">

	
	<script src="//a.fsdn.com/sd/all-minified.js?ea201902b74ad159" type="text/javascript"></script>
	
	
	<script type="text/javascript">
(function(){
var regexp=/\s*(?:\d+|many)\s+more\s*/i;

	
	var auto_more_count = 1;

	function auto_more(){
		var $more_link = $('#more-experiment a');
		$more_link.each(function(){
			var $lastitem = $('#firehoselist>article.fhitem:visible:last');
			if ( Bounds.intersect(window, $lastitem) ) {
			
			
				!--auto_more_count && (auto_more=undefined);
				// don't allow a call till the next paginate gets built and |more_possible|
				$(document).unbind('scroll', call_auto_more);
			}
		});
	};

	function call_auto_more(){ auto_more && auto_more(); }
	

$('#more-experiment a').
	live('more-possible', function( event ){
		var $more_link=$(this);
		if ( regexp.test($more_link.text()) ) {
		
			$(document).bind('scroll', call_auto_more);
		} else {
			$(document).unbind('scroll', call_auto_more);
		
		}
	});
})();
</script>
	<!--[if lt IE 9]><script src="//a.fsdn.com/sd/html5.js"></script><![endif]-->
	
	
	<!-- index2_variant ||-->
		<script>
	if (window.is_euro_union === 0) {
            bizx.cmp.ifConsent('', ['all'], function () {
                (function (s,o,n,a,r,i,z,e) {s['StackSonarObject']=r;s[r]=s[r]||function(){
                (s[r].q=s[r].q||[]).push(arguments)},s[r].l=1*new Date();i=o.createElement(n),
                z=o.getElementsByTagName(n)[0];i.async=1;i.src=a;z.parentNode.insertBefore(i,z)
                })(window,document,'script','https://www.stack-sonar.com/ping.js','stackSonar');
                stackSonar('stack-connect', '66');
            });
        }
	</script>
        <!-- jobbio !-->

        <script type="text/javascript">
        bizx.cmp.ifConsent('', ['all'], function () {
        var j_script = document.createElement('script')
        j_script.setAttribute('src', 'https://widgets.jobbio.com/partner_fluid_widgets_v1.6.1/display.min.js')
        j_script.setAttribute('id','jobbio-display-script')
        j_script.setAttribute('async','')
        j_script.onload = function handle(){
        if (document.getElementById('bottom-masonry')){
            jobbio_display.widget({
                slug: 'slashdot-jobs',
                container: 'bottom-masonry',
                style: 'masonry',
                count: 6,
                type: 'multiple',
                content: 'jobs',
                searchTerm: '',
            });
        }

        jobbio_display.widget({
            slug: 'slashdot-jobs',
            container: 'horizontal',
            style: 'horizontal',
            count: 4,
            type: 'multiple',
            content: 'jobs',
            searchTerm: '',
        })
        if (document.getElementById('sidebar-j')){
            jobbio_display.widget({
                slug: 'slashdot-jobs',
                container: 'sidebar-j',
                style: 'sidebar',
                count: 6,
                type: 'multiple',
                content: 'jobs',
                searchTerm: '',
            });
        }

        }
        document.head.appendChild(j_script);
        })
        </script>
        <!-- mailchimp newsletter !-->
        <script id="mcjs">
        if (document.domain.match(/^(tech\.)?slashdot\.org$|\.xb\./)) {
            bizx.cmp.ifConsent('', ['all'], function () {
                !function(c,h,i,m,p){m=c.createElement(h),p=c.getElementsByTagName(h)[0],m.async=1,m.src=i,p.parentNode.insertBefore(m,p)}(document,"script","https://chimpstatic.com/mcjs-connected/js/users/aab6529d3675bd877963a652d/fc2aefbb539f9ecd8f1ab4cee.js");    
            });
        }
        </script>
		<!-- html-header type=current end --><!-- header type=current begin -->
	
	
	
	<link rel="top"       title="News for nerds, stuff that matters" href="//slashdot.org/" >
<link rel="search"    title="Search Slashdot" href="//developers.slashdot.org/search.pl">
<link rel="alternate" title="Slashdot RSS" href="https://rss.slashdot.org/Slashdot/slashdotDevelopers" type="application/rss+xml">
	<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">

	
		<div id="top_parent"></div>
		<a name="topothepage"></a>
		
		<div class="container">
			<div class="nav-wrap">
				<nav class="nav-primary" role="navigation" aria-label="Global Navigation">
					<h1 class="logo">
	<a href="//slashdot.org"><span>Slashdot</span></a>
</h1>

<ul class="nav-site">
	<li><a href="//slashdot.org"><i class="icon-book" title="Stories"></i><span>Stories</span></a></li>
	<li>
		<ul class="filter-firehose">
			<li class="nav-label">Firehose <i class="icon-angle-right"></i></li>
			<li><a href="//slashdot.org/recent">All</a></li>
			<li><a href="//slashdot.org/popular">Popular</a></li>
		</ul>
	</li>
	<li><a href="//slashdot.org/polls"><i class="icon-chart-bar" title="Polls"></i><span>Polls</span></a></li>

	<!--
	<li><a href="//ask.slashdot.org"><i class="icon-question-circle"></i><span>Ask</span></a></li>
	
	<li><a href="//events.slashdot.org"><i class="icon-calendar"></i><span>Events</span></a></li>
	-->
	<li><a href="https://slashdot.org/software/"><i class="sd-mini"></i> <span>Software</span></a></li>
        <li><a href="//slashdot.org/newsletter"><span>Newsletter</span></a></li>
        <li><a href="//slashdot.org/jobs" rel="nofollow"><span>Jobs</span></a></li>
</ul>
<a href="//slashdot.org/submission" class="btn btn-success">Submit</a>
				</nav>
				<nav class="nav-user" role="navigation" aria-label="user access and account controls">
					<form id="search" class="form-inline nav-search-form" method="get" action="//slashdot.org/index2.pl">
<!-- //developers.slashdot.org/index2.pl" -->
	<div class="form-group">
		<label class="sr-only" for="sitesearch">Search Slashdot</label>
		<div class="input-group">
			<input type="text" id="" class="" name="fhfilter" value="" placeholder="Search">
		</div>
	</div>
	<button type="submit" class="btn icon-search"></button>
</form>
<ul class="user-access">
	
		
			<li >
				<a href="//slashdot.org/my/login"  onclick="show_login_box(); return false;"><i class="icon-login"></i><span> Login</span></a>
				
			</li>
		
	
		
			<li class="nav-label">or</li>
		
	
		
			<li >
				<a href="//slashdot.org/my/newuser"  ><i class="icon-user-add"></i><span> Sign up</span></a>
				
			</li>
		
	
</ul>
				</nav>
			</div>
			<div class="nav-secondary-wrap">
				<nav class="nav-secondary" role="secondary-navigation">
	<ul>
		<li class="nav-label">Topics: </li>
		<li><a href="//devices.slashdot.org">Devices</a></li>
		<li><a href="//build.slashdot.org">Build</a></li>
		<li><a href="//entertainment.slashdot.org">Entertainment</a></li>
		<li><a href="//technology.slashdot.org">Technology</a></li>
		<li><a href="//slashdot.org/?fhfilter=opensource">Open Source</a></li>
		<li><a href="//science.slashdot.org">Science</a></li>
		<li><a href="//yro.slashdot.org">YRO</a></li>
		<!-- <li><a href="//slashdot.org/topics.pl">more...</a></li> -->
	</ul>
</nav>
<nav class="nav-social" role="social navigation">
	<ul>
		<li class="nav-label">Follow us:</li>
		<li><a href="https://rss.slashdot.org/Slashdot/slashdotMain" target="_blank" rel="nofollow"><i class="icon-rss-squared"></i><span class="sr-only">RSS</span></a></li>
		<li><a href="https://www.facebook.com/slashdot" target="_blank" rel="nofollow"><i class="icon-facebook-squared"></i><span class="sr-only">Facebook</span></a></li>
		<li><a href="https://www.linkedin.com/company/slashdot" target="_blank" rel="nofollow"><i class="icon-linkedin-squared"></i><span class="sr-only">LinkedIn</span></a></li>
		<li><a href="https://twitter.com/slashdot" target="_blank" rel="nofollow"><i class="icon-twitter-squared"></i><span class="sr-only">Twitter</span></a></li>
		<li><a href="https://www.youtube.com/channel/UCsW36751Gy-EAbHQwe9WBNw" target="_blank" rel="nofollow"><i class="icon-youtube-squared">
                    <!-- width="1792" height="1792" -->
                    <svg viewBox="0 260 1792 1260" xmlns="http://www.w3.org/2000/svg"><path d="M711 1128l484-250-484-253v503zm185-862q168 0 324.5 4.5t229.5 9.5l73 4q1 0 17 1.5t23 3 23.5 4.5 28.5 8 28 13 31 19.5 29 26.5q6 6 15.5 18.5t29 58.5 26.5 101q8 64 12.5 136.5t5.5 113.5v176q1 145-18 290-7 55-25 99.5t-32 61.5l-14 17q-14 15-29 26.5t-31 19-28 12.5-28.5 8-24 4.5-23 3-16.5 1.5q-251 19-627 19-207-2-359.5-6.5t-200.5-7.5l-49-4-36-4q-36-5-54.5-10t-51-21-56.5-41q-6-6-15.5-18.5t-29-58.5-26.5-101q-8-64-12.5-136.5t-5.5-113.5v-176q-1-145 18-290 7-55 25-99.5t32-61.5l14-17q14-15 29-26.5t31-19.5 28-13 28.5-8 23.5-4.5 23-3 17-1.5q251-18 627-18z"/></svg>
                </i><span class="sr-only">Youtube</span></a></li>
		<li><a href="https://mastodon.cloud/@slashdot" target="_blank" rel="me nofollow"><i class="icon-mastodon-squared">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M433 179.11c0-97.2-63.71-125.7-63.71-125.7-62.52-28.7-228.56-28.4-290.48 0 0 0-63.72 28.5-63.72 125.7 0 115.7-6.6 259.4 105.63 289.1 40.51 10.7 75.32 13 103.33 11.4 50.81-2.8 79.32-18.1 79.32-18.1l-1.7-36.9s-36.31 11.4-77.12 10.1c-40.41-1.4-83-4.4-89.63-54a102.54 102.54 0 0 1-.9-13.9c85.63 20.9 158.65 9.1 178.75 6.7 56.12-6.7 105-41.3 111.23-72.9 9.8-49.8 9-121.5 9-121.5zm-75.12 125.2h-46.63v-114.2c0-49.7-64-51.6-64 6.9v62.5h-46.33V197c0-58.5-64-56.6-64-6.9v114.2H90.19c0-122.1-5.2-147.9 18.41-175 25.9-28.9 79.82-30.8 103.83 6.1l11.6 19.5 11.6-19.5c24.11-37.1 78.12-34.8 103.83-6.1 23.71 27.3 18.4 53 18.4 175z"/></svg>
				</i><span class="sr-only">Mastodon</span></a></li>
		<li><a href="//slashdot.org/newsletter" target="_blank" rel="nofollow"><i class="icon-mail-squared"></i><span class="sr-only">Newsletter</span></a></li>
	</ul>
</nav>
			</div>
		</div>

		<section>
		
			<div class="message-bar" id="firehose-message-tray">
				<span class="icon-quote-left"></span>
				<p>
					
						
						Catch up on stories from the past week (and beyond) at the <a href="//slashdot.org/archive.pl">Slashdot story archive</a>
					
				</p>
			</div>
		
		
			<div id='embbeded_login_modal' class="hide">
<form action="https://slashdot.org/my/login" method="post" onsubmit="if (global_returnto) { this.returnto.value = global_returnto }" class="embedded"><fieldset style="-webkit-border-radius:10px 10px 0 0;border-radius:10px 10px 0 0;-moz-border-radius:10px 10px 0 0">
<div style='height:25px;'>&nbsp;</div>
    <input type="hidden" name="returnto" value="">
    <input type="hidden" name="op" value="userlogin">
    <p>
        <label class="fleft" for="unickname">Nickname:</label>
        <input type="text" name="unickname" value="">
    </p>
    <p>
        <label class="fleft" for="upasswd">Password:</label>
        <input type="password" name="upasswd">
    </p>
    <label class="checkbox"><input type="checkbox" name="login_temp" value="yes"> Public Terminal</label>
    <br>
    <hr>
    <input type="submit" name="userlogin" value="Log In" class="fno"> <a href="//slashdot.org/my/mailpassword" class="btn link" onclick="getModalPrefs('sendPasswdModal', 'Retrieve Password', 1); return false;">Forgot your password?</a>
</fieldset></form>

<div class="actions">
 <a class="ico close" onclick="hide_login_slider();" href=""><span>Close</span></a>
</div>
</div>
		
		
			<div class="banner-wrapper">
				<div class="adwrap adwrap-unviewed banner-contain">
					
					<div id='div-gpt-ad-728x90_a'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-728x90_a');});</script></div>
					<div id='div-gpt-ad-hubicon_200x90_a'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-hubicon_200x90_a');});</script></div>
				</div>
			</div>
		
		<a name="main-articles"></a>
	
	<!-- header type=current end --><!-- body begin -->







	

	<style type="text/css">
menu, menu * {
	text-decoration:none;
}

menu[type=context] {
	display:none;
	position:absolute;
	z-index:10000;
}

menu[type=context]:not(.brief) {
	background-color:#dfdfdf;
	margin:0;
	padding:2px 0.5em;
	border-style:solid;
	border-width:1px;
	border-color:#eeeeee #aaaaaa #aaaaaa #eeeeee;
	-moz-border-radius-topright:.7em;
	-webkit-border-top-right-radius: 0.7em 0.7em;
}

menu.full[type=context] > a.slash-hover:first-child {
	-moz-border-radius-topright:.6em;
	-webkit-border-top-right-radius: 0.6em 0.6em;
}



menu.brief[type=context] > a {
	-moz-border-radius:.6em;
	-webkit-border-radius: 0.6em;
	color:#ffffff;
	background-color:#000000;
}

/*
span.briefmenu a.tag:not(.datatype) {
    padding-left:.5em;
}
*/




/* #tag-menu a, #feedback-menu a  { */
menu.tag-menu-admin a {
	display:list-item;
	list-style:none;
	text-align:left;
	font-weight:bold;
	color:black;
	padding:0.1em 0.5em;
	margin:-0.1em -0.5em;
	cursor:pointer;
}


.tags .edit-bar { position:relative; }
article aside .share .addthis_toolbox { display:block; width:60px; float:left; }
article aside.view_mode .share { min-width:120px; padding-top:.5em; }
#firehose.list article header h2 {padding-left: 20px; !important}
.novote .vote { display:none; }

.vote > a, .votedup > a, .voteddown > a {
	display:inline-block;
	height:22px;
	width:22px;
	margin: 2px 10px 0 0;
	color:rgb(255,255,255);
	text-decoration:none;
	line-height:22px;
	text-align:center;
	font-weight:bold;
	font-size:14px;
	border-width:1px;
	border-style:solid;
	border-color:rgba(0,0,0,0.5);
}

.vote > a, .votedup > a, .voteddown > a {color:rgb(0,0,0);}

article.fhitem-submission h2 .vote > a, article.fhitem-submission h2 .votedup > a, article.fhitem-submission h2 .voteddown > a { border-color:rgba(0,0,0,0.15); }
.vote .up, .vote .down, .votedup .up, .votedup .down, .voteddown .up, .voteddown .down { border-radius: 4px; -moz-border-radius: 4px; -webkit-border-radius: 4px; /* text-shadow:0 0 2px #000000; }*/}
article:not(.fhitem-story) .vote .up,article:not(.fhitem-story) .vote .down,article:not(.fhitem-story) .votedup .up,article:not(.fhitem-story) .votedup .down,article:not(.fhitem-story) .voteddown .up,article:not(.fhitem-story) .voteddown .down { /*text-shadow:none !important; */}
.voteddown .down, .votedup .up { margin-right: 10px; text-indent:2px; line-height:24px; }
article:not(.fhitem-story) .votedup .up,article:not(.fhitem-story) .voteddown .down {background: rgb(174,174,174);background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(174,174,174)), to(rgb(193,193,193)));background-image: -moz-linear-gradient(100% 100% 90deg,rgb(193,193,193), rgb(174,174,174) 100%);color:rgb(0,0,0);}
article.fhitem-story .votedup .up,article.fhitem-story .voteddown .down {background: rgb(0,66,66);background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(0,53,53)), to(rgb(0,102,102)));background-image: -moz-linear-gradient(100% 100% 90deg,rgb(0,102,102), rgb(0,53,53) 100%);}




#tag-menu span.var-tag {
font-weight:normal;
color:#444444;
}

menu.reasons-menu a {
padding:0 .25em 0 .25em;
font-size:80%;
-moz-border-radius:.5em;
-webkit-border-radius:.5em;
cursor:pointer;
}

menu.reasons-menu a:hover {
background:rgb(153,153,153);
background:-moz-linear-gradient(100% 100% 90deg, rgb(102,102,102), rgb(153,153,153) 70%) repeat scroll 0 0 rgb(102,102,102);
background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(153,153,153)), to(rgb(102,102,102)));
color:#fff;
text-decoration:none;
font-weignt:normal;
}

article.fhitem-story menu.reasons-menu a:hover {
background:#002323 !important;
background:-moz-linear-gradient(100% 100% 90deg, #002323, #005353 70%) repeat scroll 0 0 #002323 !important;
background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#005353), to(#002323)) !important;
}


menu.reasons-menu {
	display:none;
	margin:0;
	padding:0;
}

div.fhitem h3 menu.reasons-menu {
margin:0.25em 0 0;
}

div.fhitem h3 menu.reasons-menu a.tag {
font-size:.8em;
}

#tag-menu a.slash-hover,
#feedback-menu a.slash-hover,

.tag-display span.tag:hover,
.tag-display span.tag.trigger {
	color:white;
	background-color:rgb(0, 85, 85);
}

#tag-menu a.slash-hover span.var-tag {
	color:#eee;
}

.tag-entry.default {
        color:#ccc;
}

.brief .nix {
	margin-top:-1.35em;
	margin-left:0px;
	margin-top:-1.15em;
	text-decoration:none;
	line-height:1.35em;
	padding:0 2px;
	-moz-border-radius:.6em 0 0 .6em;
	-webkit-border-radius:.6em 0 0 .6em;
	-o-border-radius:.6em 0 0 .6em;
	border-radius:.6em 0 0 .6em;
    color:#fff !important;
    background:transparent !important;
}

.brief .nix:hover {
    background:rgb(153,153,153) !important;
    background:-moz-linear-gradient(100% 100% 90deg, rgb(102,102,102), rgb(153,153,153) 70%) repeat scroll 0 0 rgb(102,102,102) !important;
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(153,153,153)), to(rgb(102,102,102))) !important;
}

</style>

<menu id="nix-reasons" style="display:none">
	<a class="tag">binspam</a><a class="tag">dupe</a><a class="tag">notthebest</a><a class="tag">offtopic</a><a class="tag">slownewsday</a><a class="tag">stale</a><a class="tag">stupid</a>
</menu>
<menu id="nod-reasons" style="display:none">
	<a class="tag">fresh</a><a class="tag">funny</a><a class="tag">insightful</a><a class="tag">interesting</a><a class="tag">maybe</a>
</menu>
<menu id="comment-nix-reasons" style="display:none">
	<a class="tag">offtopic</a><a class="tag">flamebait</a><a class="tag">troll</a><a class="tag">redundant</a><a class="tag">overrated</a>
</menu>
<menu id="comment-nod-reasons" style="display:none">
	<a class="tag">insightful</a><a class="tag">interesting</a><a class="tag">informative</a><a class="tag">funny</a><a class="tag">underrated</a>
</menu>

<menu id="tag-nod-reasons" style="display:none">
	<a class="tag">descriptive</a>
</menu>
<menu id="feedback-menu" class="tag-menu-admin" type="context">
	<a class="tag">typo</a><a class="tag">dupe</a><a class="tag">error</a>
</menu>
<menu id="tag-menu" class="tag-menu-admin none" type="context">

<!--	<a data-op="!" class="nix">!<span class="var-tag hide"></span></a>-->

</menu>

<script type="text/javascript">
$(function(){
var $CURRENT_MENU, $TAG_MENU=$('#tag-menu'), NOTNOT=/^!!/, IE7=/^7\.0/, TAG_PREFIX=/^\/tag\//;

function get_tag_name( $tag ){
	return ($tag.attr('href') || '').replace(TAG_PREFIX, '') || $tag.text().toLowerCase();
}

function trigger_menu( e, selector, $menu, menu_content ){
	var $target=$(original_target(e, selector)), in_use=$target.is('.trigger');
	if ( $CURRENT_MENU ) {
		$CURRENT_MENU.menu('cancel', e);
		$CURRENT_MENU = null;
	}

	if ( !in_use ) {
		menu_content && $menu.stop(true, true).hide().html(menu_content);
		($CURRENT_MENU=$menu).menu('context', e);
	}
	return !in_use;
}

function open_menu( trigger, $menu ){
	var $trigger=$(trigger), $fhitem=$trigger.closest('.fhitem');
	$fhitem.length && user_intent('interest', $fhitem[0]);

	$menu.appendTo(document.body).css({ opacity:0 }).show();

	var 	right	= $fhitem.offset().left + $fhitem.width(),
		global	= $trigger.offset(),
		local	= $menu.offsetParent().offset();

	// Ugly IE position hack required:
	$.browser.msie && IE7.test($.browser.version) && (local.top = 0);

	// pin the menu (horizontally) on-screen
	global.left = Math.min(global.left, right-$menu.width());

	$trigger.addClass('trigger');
	$menu.css({
		position:	'absolute',
		top:		global.top - local.top + $trigger.height(),
		left:		global.left - local.left,
		opacity:	1
	});
}

function close_menu( trigger, $menu ){
	$menu.hide();
	$(trigger).removeClass('trigger');
	($CURRENT_MENU===$menu) && ($CURRENT_MENU=false);
}

/* T2 tag context-menu */
var $TAG_MENU=$('#tag-menu'), NOTNOT=/^!!/;


    var user_is_admin = 0;



$('a[rel=tag]').live('mousedown',function(ea){
    window.open(this.href);
    return false;
})

$('.tag-bar .disagree').live('mousedown',function(ee){
	var fhitem = $(original_target(ee)).closest('.fhitem')[0],
		command = ('!' + $(original_target(ee)).attr("data-tag")).replace(NOTNOT, '');
    try { Tags.submit(fhitem, command); } catch ( err ) {  }
    return false;
})



$('a[rel=tag]').
	live('mousedown', function( e ){
        
            return true;
        

	}).
	live('click', function( e ){
		if ( !logged_in ) {
			var	target	= original_target(e),
				tag	= $(target).text();
			addfhfilter(tag);
		}
		e.preventDefault();
		return false;
	});

$TAG_MENU.menu({
	cssNamespace: 'slash',
	liveTriggers: true,
	clickDuration: 300,

	start: function( e, ui ){
		var	$tag	= $(ui.trigger),
			tag	= get_tag_name($tag),
			context	= firehose_settings && firehose_settings.viewtitle;

		// Insert the tagname into the menu items where needed.
		$TAG_MENU.find('span.var-tag').text(tag);
		$TAG_MENU.find('a.nix').attr('title','not ' + tag);


			// non-admins may only delete their own tags
		$TAG_MENU.find('a[data-op="-"]').toggle($tag.is('.my'));
	

		// *tagname* in *viewtitle*
		$TAG_MENU.find('a[data-op="="]').toggle(!!context);
		context && $TAG_MENU.find('span.var-view').text(context);

		open_menu($tag, $TAG_MENU);
	},

	select: function( e, ui ){
		var	$tag	= $(ui.trigger),
			tag	= get_tag_name($tag),
			op	= $(ui.event.target).attr('data-op'),
			fhitem,
			command;

		// Global for positioning other things.
		$related_trigger = $tag;

		switch ( op ) {
			case '=':
				addfhfilter(tag);
				break;

			default:
				fhitem = $tag.closest('.fhitem')[0];
				command = (op + tag).replace(NOTNOT, '');
				try { Tags.submit(fhitem, command); } catch ( err ) {  }
				break;
		}
	},

	stop: function( e, ui ){ close_menu(ui.trigger, $TAG_MENU); }
});




/* T2 feedback context-menu */



/* T2 datatype context-menu (admin-only) */






});
</script>

	

<!-- SMACKS: BEGIN STORY CONTENT -->
<div class="container">
	<!--SMACKS: BEGING CENTER COLUMN -->
	<div class="main-wrap has-rail-right">
		<div class="main-content">
			<div class="grid_24 a2 ">
			</div>
			<div id="firehose" class="nothumbs">
			<div id="firehoselist" class="fhroot fleft  grid_24">
				<div id="announcement">
  <div id="announcementText" style="display: none;"> <a href="https://slashdot.org/newsletter" rel="nofollow"><strong>Sign up for the Slashdot newsletter!</strong></a> OR <a href="https://jobs.slashdot.org/?source=boiler_plate&utm_source=boiler_plate&utm_medium=content&utm_campaign=bp_referral" rel="nofollow">check out the new Slashdot job board to browse remote jobs or jobs in your area</a><br><br></strong>Do you develop on GitHub? You can keep using GitHub but automatically <a href="https://sourceforge.net/p/forge/documentation/GitHub%20Importer/" rel="nofollow"><strong>sync your GitHub releases to SourceForge</a></strong> quickly and easily with <strong><a href="https://sourceforge.net/p/import_project/github/" rel="nofollow">this tool</a></strong> so your projects have a backup location, and get your project in front of SourceForge's nearly 30 million monthly users. It takes less than a minute. Get new users downloading your project releases today!</span><br></div>
  <a href="" class="btn-close" title="don't show me this again" onclick="closeAnnouncement(); return false;">&times;</a>
</div>


<script type="text/javascript">

if (!$.cookie('hide_sitenotice_36')) {
	$('#announcement').fadeIn(300);
}

function closeAnnouncement() {
	$('#announcement').fadeOut(300);
	$.cookie('hide_sitenotice_36', 'true', { path: '/', domain: 'slashdot.org', expires: 1 });
}
</script>
				<article id="firehose-173023710" data-fhid="173023710" data-fhtype="story" class="fhitem fhitem-story article usermode thumbs grid_24">
		<span class="sd-info-block" style="display: none">
			<span class="sd-key-firehose-id">173023710</span>
			<span class="type">story</span>
			
		</span>







	
	

<header>
	
		<span class="topic" id="topic-173023710">
			<a href="//developers.slashdot.org/index2.pl?fhfilter=programming" onclick="return addfhfilter('programming');">
			
				<img src="//a.fsdn.com/sd/topics/programming_64.png" width="64" height="64" alt="Programming" title="Programming">
			
		</a>
		
	
		
		
		
		

		
		<a href="//developers.slashdot.org/index2.pl?fhfilter=google" onclick="return addfhfilter('google');">
			
				<img src="//a.fsdn.com/sd/topics/google_64.png" width="64" height="64" alt="Google" title="Google">
			
		</a>
		</span>
	

	<h2 class="story">
		

		

		
		

		

		

		

		<span id="title-173023710" class="story-title"> <a   href="//developers.slashdot.org/story/24/02/09/216222/to-help-rustc-interoperability-google-gives-rust-foundation-1m">To Help Rust/C++ Interoperability, Google Gives Rust Foundation $1M</a> <span class=" no extlnk"><a class="story-sourcelnk" href="https://siliconangle.com/2024/02/05/google-donates-1m-rust-foundation-c-rust-interoperability-efforts/"  title="External link - https://siliconangle.com/2024/02/05/google-donates-1m-rust-foundation-c-rust-interoperability-efforts/" target="_blank"> (siliconangle.com) </a></span></span>

		
		
		<!--<span class="comments commentcnt-173023710" >41</span>-->
		

		
		<!-- comment bubble -->
		
			<span class="comment-bubble"><a href="//developers.slashdot.org/story/24/02/09/216222/to-help-rustc-interoperability-google-gives-rust-foundation-1m#comments" title="">41</a></span>
		
	</h2>
	<div class="details" id="details-173023710">
		<span class="story-details">
		<span class="story-views">
			<span class="sodify" onclick="firehose_set_options('color', 'red')" title="Filter Firehose to entries rated red or better"></span><span class="icon-beaker pop1 " alt="Popularity" title="Filter Firehose to entries rated red or better" onclick="firehose_set_options('color', 'red')"><span></span></span> 
		</span>
		</span>
		<span class="story-byline">
	
				
			Posted
				by 
		
		
			
				  EditorDavid
			
		
		

		
		
		<time id="fhtime-173023710" datetime="on Saturday February 10, 2024 @12:34PM">on Saturday February 10, 2024 @12:34PM</time>
		
		
			 from the <span class="dept-text">Rust-never-sleeps</span> dept.
		
		</span>
	</div>
</header>

<div class="body" id="fhbody-173023710">
	
		
	

	
		
		<div id="text-173023710" class="p">
			
		 	
				An anonymous Slashdot reader shared <a href="https://siliconangle.com/2024/02/05/google-donates-1m-rust-foundation-c-rust-interoperability-efforts/">this report from <em>SiliconANGLE</em></a>:

<i>
The <a href="https://foundation.rust-lang.org/">Rust Foundation</a>, which supports the development of the popular open-source Rust programming language... shared that Google LLC had made a $1 million contribution specifically earmarked for a C++/Rust interoperability effort known as the "Interop Initiative."  The initiative aims to foster seamless integration between Rust and the widely used C++ programming language, addressing one of the significant barriers to Rust's adoption in legacy systems entrenched in C++ code.<br> <br>

Rust has the ability to prevent common memory errors that plague C++ programs and offers a path toward more secure and reliable software systems. However, transitioning from C++ to Rust presents notable challenges, particularly for organizations with extensive C++ codebases. The Interop Initiative seeks to mitigate these challenges by facilitating smoother transitions and enabling organizations to leverage Rust's advantages without completely overhauling their existing systems.<br> <br>

As part of the initiative, the Rust Foundation will collaborate closely with the Rust Project Leadership Council, stakeholders and member organizations to develop a comprehensive scope of work. The collaborative effort will focus on enhancing build system integration, exploring artificial intelligence-assisted code conversion techniques and expanding upon existing interoperability frameworks. By addressing these strategic areas, the initiative aims to accelerate the adoption of Rust across the software industry and hence contribute to advancing memory safety and reducing the prevalence of software vulnerabilities.</i> <br>
A <a href="https://security.googleblog.com/2024/02/improving-interoperability-between-rust-and-c.html">post on Google's security blog</a> says they're excited to collaborate "to ensure that any additions made are suitable and address the challenges of Rust adoption that projects using C++ face. Improving memory safety across the software industry is one of the key technology challenges of our time, and we invite others across the community and industry to join us in working together to secure the open source ecosystem for everyone."<br> <br>


The blog post also includes this quote from Google's VP of engineering, Android security and privacy.       "Based on historical vulnerability density statistics, Rust has proactively prevented hundreds of vulnerabilities from impacting the Android ecosystem. This investment aims to expand the adoption of Rust across various components of the platform."<br> <br>
<a href="https://www.theregister.com/2024/02/05/google_rust_donation/">The <em>Register</em> adds</a>:
<i>Lars Bergstrom, director of Android platform tools and libraries and chair of the Rust Foundation Board, announced the grant and said that the funding will "improve the ability of Rust code to interoperate with existing legacy C++ codebases....   Integrating Rust today is possible where there is a fallback C API, but for high-performance and high-fidelity interoperability, improving the ability to work directly with C++ code is the single biggest initiative that will further the ability to adopt Rust...." <br> <br>

According to Bergstrom, Google's most significant increase in the use of Rust has occurred in Android, where interoperability started receiving attention <a href="https://security.googleblog.com/2021/06/rustc-interop-in-android-platform.html">in 2021</a>, although Rust is also being deployed elsewhere....  Bergstrom said that as of mid-2023, Google had <a href="https://opensource.googleblog.com/2023/06/rust-fact-vs-fiction-5-insights-from-googles-rust-journey-2022.html">more than 1,000 developers</a> who had committed Rust code, adding that the ad giant recently released the <a href="https://security.googleblog.com/2023/09/scaling-rust-adoption-through-training.html">training material</a> it uses.   "We also have a team working on building out interoperability," he added. "We hope that this team's work on addressing challenges specific to Google's codebases will complement the industry-wide investments from this new grant we've provided to the Rust Foundation."<br> <br>

Google's grant matches a $1 million grant last November <a href="https://twitter.com/dwizzzleMSFT/status/1720134540822520268">from Microsoft</a>, which also committed $10 million in internal investment to make Rust a "first-class language in our engineering systems." The Google-bucks are expected to fund further interoperability efforts, along the lines of KDAB's <a href="https://github.com/KDAB/cxx-qt">bidirectional Rust and C++ bindings</a> with Qt.</i><br>
		 	
		</div>

		

		

		
			
		
	</div>
	<aside class="grid_24 view_mode">
		
			<div class="units-12 story-detail-tags">
				<span id="sharethis-173023710" class="">
					
						

						

					
				</span>

				<div class="story-tags">
					<div class="tright tw">
						
							<span class="tright tags">
								
									<menu type="toolbar" class="edit-bar">
		<span id="tagbar-173023710" class="tag-bar none">
			
		</span>
		
		<!--
			<a class="edit-toggle" href="/my/login/" onclick="show_login_box();return false;">
				<span class="icon-tag btn collapse"></span>
			</a>
			-->
		
		
		<div class="tag-menu">
			<input class="tag-entry default" type="text" value="apply tags">
		</div>
		

		
		

	</menu>
								
							</span>
						
					</div>
				</div>
			</div>

			
				
				
				
			 	
					<section class="grid_24" id="newa2footerv2">
						<div class="grid_6 pr">
							<h3><a title="Previous story" href="//news.slashdot.org/story/24/02/10/0641250/recycling-plants-start-installing-trash-spotting-ai-systems?sdsrc=prev">&larr;</a></h3>
						</div>
						<div class="grid_12 rl">
							<h3>You may like to read:</h3>
						</div>
						<div class="grid_6 ns">
							<h3><a title="Next story" href="//yro.slashdot.org/story/24/02/10/0732205/eff-challenges-legal-bullying-of-sites-reporting-on-alleged-appin-hacking-for-hire?sdsrc=next">&rarr;</a></h3>
						</div>
						<div class="grid_6">
							<span class="c">
								<a href="//news.slashdot.org/story/24/02/10/0641250/recycling-plants-start-installing-trash-spotting-ai-systems?sdsrc=prev">Recycling Plants Start Installing Trash-Spotting AI Systems </a>
							</span>
						</div>
						<div class="grid_12">
							<span class="c">
								
									
									
									
									

																				<h2><a href="//developers.slashdot.org/story/23/08/07/0136228/should-a-variables-type-come-after-its-name?sdsrc=popbyskid">Should a Variable's Type Come After Its Name?</a><br></h2>
																				<h2><a href="//developers.slashdot.org/story/23/09/02/1753239/are-scrums-a-cancer?sdsrc=popbyskid">Are Scrums a Cancer?</a><br></h2>
																				<h2><a href="//developers.slashdot.org/story/23/06/26/018234/34-of-ap-cs-students-couldnt-solve-this-java-based-2d-array-question?sdsrc=popbyskid">34% of AP CS Students Couldn't Solve This Java-Based 2D Array Question</a><br></h2>
																				<h2><a href="//developers.slashdot.org/story/23/06/03/1514212/nyt-its-the-end-of-computer-programming-as-we-know-it?sdsrc=popbyskid">NYT: It's the End of Computer Programming As We Know It</a><br></h2>
																				<h2><a href="//developers.slashdot.org/story/23/10/15/185245/ok-so-chatgpt-just-debugged-my-code-for-real?sdsrc=popbyskid">'OK, So ChatGPT Just Debugged My Code. For Real'</a><br></h2>
									
								
								
							</span>
						</div>
						<div class="grid_6">
							<span class="c">
								
									<a href="//yro.slashdot.org/story/24/02/10/0732205/eff-challenges-legal-bullying-of-sites-reporting-on-alleged-appin-hacking-for-hire?sdsrc=next">EFF Challenges 'Legal Bullying' of Sites Reporting on Alleged Appin 'Hacking-for-Hire'</a>
								
							</span>
						</div>
					</section>
				
			
		
	</aside>
	



	</article>
			</div>
			</div>
		</div>
	</div>
	<!-- SMACKS: BEGIN RIGHT RAIL -->
	<aside id="slashboxes" class="rail-right">
		
                    <div id="slashboxesin" class="yui-b">
                            
                            
                            
                    </div>
		    <div class="railad adwrap-unviewed">
<div id='div-gpt-ad-300x250_a'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-300x250_a');});</script></div>
</div>
		
	</aside>
		<!-- SMACKS: END RIGHT RAIL -->
</div>
<!-- END STORY CONTENT -->

<!-- THIS IS THE LOCATION FOR THE NEW STORY_B CODE -->
<div class="adwrap">
<div id='div-gpt-ad-728x90_b'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-728x90_b');});</script></div>
</div>
<script type="text/javascript">
if (window.is_euro_union === 0) {
    if (sdAdBlockActive) {
        bizx.cmp.ifConsent('', ['all'], function () {
            $.ajax({
                url: '/ajax.pl?op=nel',
                type: 'POST',
                success: function(html){
                    if(html){
                        $('#firehoselist article').eq(0).after(html);
                    }
                }
            });
        });
    }
}
</script>
<!--------------------------->


<!-- SMACKS: BEGIN COMMENTS CONTAINER -->
<div class="container">
	<!-- SMACKS: BEGIN COMMENTS SECTION -->
	<div class="main-wrap">
        <div id='horizontal' class='jobbioapp' style="width:initial;margin-right:320px;"></div>
		<div class="main-content">
			<div id="comments" class="a2commentwrap">
			<div>
					<a name="comments"></a>
<div id="comments" class="container">
	<div class="main-wrap">
		<div class="main-content">
			<section class="d2incommentspl">
				<div class="commentwrap" id="commentwrap">
					
						<div class="commentBox">
							<div class="title hide">
								<h4>
									
										<span class="escape-link"><a href="//developers.slashdot.org/story/24/02/09/216222/to-help-rustc-interoperability-google-gives-rust-foundation-1m" title="Back to Article - To Help Rust/C++ Interoperability, Google Gives Rust Foundation $1M">To Help Rust/C++ Interoperability, Google Gives Rust Foundation $1M</a></span>
									
									<span class="commentBoxLinks"><a href="#" onclick="D2.ajaxFetchComments(0,1); return false"><span id="more_comments_num_d"></span> More</a>



	| <span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23221784&amp;op=reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=" onclick="D2.replyTo(0); return false;">Reply</a>


	<a class="login"  href="//developers.slashdot.org/login.pl" onclick="show_login_box(); return false">Login</a></span>
								</h4>
							</div>
						</div>
					

					<section class="grid_24" id="d2header"><div>
						
							<h2 class="commentspl test"><a title="Back to Article - To Help Rust/C++ Interoperability, Google Gives Rust Foundation $1M" href="//developers.slashdot.org/story/24/02/09/216222/to-help-rustc-interoperability-google-gives-rust-foundation-1m">To Help Rust/C++ Interoperability, Google Gives Rust Foundation $1M</a></h2>
						
						<nav class="grid_24">
							<div class="grid_14 widthauto">
							
						 		<span class="ind"></span><a class="btn first" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;op=reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=" onclick="D2.replyTo(0); return false;">Post</a>
							
							<!-- <a href="//developers.slashdot.org/search.pl?op=comments&amp;sid=23221784" class="btn">Search <span class="totalcommentcnt">41</span> Comments</a> -->
							
								
									<a href="#" onclick="D2.ajaxFetchComments(0,1,'','',-1); return false" class="btn" id="d2loadall">Load All Comments</a>
								
							
							
								</div>
								<div class="grid_10 d1or2">
							

							
								<div id="d2out" class="horizontal rooted grid_15">
									<div id="d2act" class="hide">
										<div class="loki" id="gods">
											<script type="text/javascript">
												 $(function(){
													 D2.slider = new D2.Slider(
														 D2.user_threshold(),
														 D2.user_highlightthresh(),
														 'x'
													 );
												 });
											</script>
											<div id="bones" class="grid_12">
												<div class="ccw-count-container grid_24">
													<span id="ccw-full-count-text" class="grid_8 ccw-count-text tcenter"><span></span><span id="ccw-full-phrase">&nbsp;Full</span></span>
													<span id="ccw-abbr-count-text" class="grid_8 ccw-count-text"><span></span><span id="ccw-abbr-phrase">&nbsp;Abbreviated</span></span>
													<span id="ccw-hide-count-text" class="grid_8 ccw-count-text tleft"><span></span><span id="ccw-hide-phrase">&nbsp;Hidden</span></span>
												</div>
												<div id="ccw">
													<div id="ccw-body" class="ccw-core">
														<div id="ccw-panel-container" class="ccw-core">
															<div id="ccw-full-panel" class="ccw-panel">
																/Sea<div class="ccw-panel-border"></div>
																<div id="ccw-full-count-pos" class="ccw-core-pos ccw-count-pos"></div>
															</div>
															<div id="ccw-abbr-panel" class="ccw-panel">
																<div class="ccw-panel-border"></div>
																<div id="ccw-abbr-count-pos" class="ccw-core-pos ccw-count-pos"></div>
															</div>
															<div id="ccw-hide-panel" class="ccw-panel">
																<div id="ccw-hide-count-pos" class="ccw-core-pos ccw-count-pos"></div>
															</div>
														</div>
														<div id="ccw-control" class="ccw-core">
															<div id="ccw-centering-rail" class="ccw-core">
																<div id="ccw-hide-bar-pos" class="ccw-core-pos">
																	<div id="ccw-hide-bar" class="ccw-bar">
																		<div id="ccw-hide-bar-tab" class="ccw-bar-tab"></div>
																		<div class="ccwa"></div>
																		<div class="ccwb"></div>
																		<div id="ccw-hide-bar-upzone" class="ccw-upzone" onclick="D2.slider.stepTHT(HIDE_BAR, +1)"></div>
																		<div id="ccw-hide-bar-downzone" class="ccw-downzone" onclick="D2.slider.stepTHT(HIDE_BAR, -1)"></div>
																	</div>
																</div>
																<div id="ccw-abbr-bar-pos" class="ccw-core-pos">
																	<div id="ccw-abbr-bar" class="ccw-bar">
																		<div id="ccw-abbr-bar-tab" class="ccw-bar-tab"></div>
																		<div class="ccwa"></div>
																		<div class="ccwb"></div>
																		<div id="ccw-abbr-bar-upzone" class="ccw-upzone" onclick="D2.slider.stepTHT(ABBR_BAR, +1)"></div>
																		<div id="ccw-abbr-bar-downzone" class="ccw-downzone" onclick="D2.slider.stepTHT(ABBR_BAR, -1)"></div>
																	</div>
																</div>
															</div>
														</div>
													</div>
													<div class="ccw-score-label grid_24">
														<div class="grid_3"><span class="sc">Score:</span></div>
														<div class="grid_3">5<span class="lg"></span></div>
														<div class="grid_3">4<span class="lg"></span></div>
														<div class="grid_3">3<span class="lg"></span></div>
														<div class="grid_3">2<span class="lg"></span></div>
														<div class="grid_3">1<span class="lg"></span></div>
														<div class="grid_3">0<span class="lg"></span></div>
														<div class="grid_3">-1<span class="lg"></span></div>
													</div>
												</div>
											</div>
											<div class="commentControlFooter">
												<a href="#" onclick="D2.ajaxFetchComments(0,1); return false"><span id="more_comments_num_c"></span> More</a>



	| <span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23221784&amp;op=reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=" onclick="D2.replyTo(0); return false;">Reply</a>


	<a class="login"  href="//developers.slashdot.org/login.pl" onclick="show_login_box(); return false">Login</a><div id="login_cover" class="hide" onclick="hide_login_box()"></div>
<div id="login_box" class="hide">
	<div id="login_box_content">
		<div id='embbeded_login_modal' class="hide">
<form action="https://slashdot.org/my/login" method="post" onsubmit="if (global_returnto) { this.returnto.value = global_returnto }" class="embedded"><fieldset style="-webkit-border-radius:10px 10px 0 0;border-radius:10px 10px 0 0;-moz-border-radius:10px 10px 0 0">
<div style='height:25px;'>&nbsp;</div>
    <input type="hidden" name="returnto" value="//developers.slashdot.org/comments.pl?sid=23221784">
    <input type="hidden" name="op" value="userlogin">
    <p>
        <label class="fleft" for="unickname">Nickname:</label>
        <input type="text" name="unickname" value="">
    </p>
    <p>
        <label class="fleft" for="upasswd">Password:</label>
        <input type="password" name="upasswd">
    </p>
    <label class="checkbox"><input type="checkbox" name="login_temp" value="yes"> Public Terminal</label>
    <br>
    <hr>
    <input type="submit" name="userlogin" value="Log In" class="fno"> <a href="//slashdot.org/my/mailpassword" class="btn link" onclick="getModalPrefs('sendPasswdModal', 'Retrieve Password', 1); return false;">Forgot your password?</a>
</fieldset></form>

<div class="actions">
 <a class="ico close" onclick="hide_login_slider();" href=""><span>Close</span></a>
</div>
</div>
		<div class="actions">
			<a class="ico close" href="#" onclick="hide_login_box(); return false"><span>Close</span></a>
		</div>
	</div>
</div>
<script type="text/javascript">logged_in = 0</script>
											</div>
											<div id="commentControlBoxStatus" class="hide"></div>
										</div>
									</div>
								</div>
							
							
							<a href="//developers.slashdot.org/search.pl?op=comments&amp;sid=23221784" class="ui-icon search_comments">Search <span class="totalcommentcnt">41</span> Comments</a>
							
								<a class="pref ui-icon-w" href="//developers.slashdot.org/users.pl" onclick="show_login_box(); $('#modal_box').addClass('login'); return false;">Log In/Create an Account</a>
							
						</div>
					</nav>
					<section id="besttabs" class="grid_24">
						<span class="legend">Comments Filter:</span>
						<ul class="besttabslist">
							<li class="active">
								<a href="#" data-filter-url="//developers.slashdot.org/story/24/02/09/216222/to-help-rustc-interoperability-google-gives-rust-foundation-1m#comments">All</a>
							</li>
						
							<li >
								<a href="" data-filter-url="//developers.slashdot.org/story/24/02/09/216222/to-help-rustc-interoperability-google-gives-rust-foundation-1m/insightful-comments#comments">Insightful</a>
							</li>
						
							<li >
								<a href="" data-filter-url="//developers.slashdot.org/story/24/02/09/216222/to-help-rustc-interoperability-google-gives-rust-foundation-1m/informative-comments#comments">Informative</a>
							</li>
						
							<li >
								<a href="" data-filter-url="//developers.slashdot.org/story/24/02/09/216222/to-help-rustc-interoperability-google-gives-rust-foundation-1m/interesting-comments#comments">Interesting</a>
							</li>
						
							<li >
								<a href="" data-filter-url="//developers.slashdot.org/story/24/02/09/216222/to-help-rustc-interoperability-google-gives-rust-foundation-1m/funny-comments#comments">Funny</a>
							</li>
						
					</ul>
					<script>
					(function($){
						$('#besttabs').show();
						$('.besttabslist').on('click', 'li a', function(e){
							e.preventDefault();
							var url = $(this).data('filter-url');
							//console.log('URL= ', url);
							$(this)
								.closest('ul').find('li').removeClass('active')
								.end()
								.closest('li').addClass('active');
							window.location = url;
						});
					})($j);
					</script>
			</section>
				<aside class="grid_24">
					<p>
						<small><strong>The Fine Print:</strong> The following comments are owned by whoever posted them.  We are not responsible for them in any way.</small>
					</p>
				</aside>
			</section>
			
		</div>
	</div>
</div><script src="//a.fsdn.com/sd/comments-minified.js?ea201902b74ad159" type="text/javascript"></script>


<script type="text/javascript">
<!--
D2.d2_keybindings_disable()[191] = 1;
D2.boxStatus(1);
D2.comments({ 64230858: { uid: 3450605, pid: 64230652, read: 0, points: 2, kids: [ 64231194, 64231876, 64231984 ], opid: 64230652 }, 64231020: { uid: 914043, pid: 64230728, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 3, kids: [ 64231094 ], opid: 64230728 }, 64231194: { uid: 7796472, pid: 64230858, read: 0, points: 1, kids: [ 64231394 ], opid: 64230858 }, 64232218: { uid: 3450605, pid: 64231984, read: 0, points: 2, kids: [  ], opid: 64231984 }, 64230748: { uid: 124937, pid: 64230560, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 2, kids: [ 64231082 ], opid: 64230560 }, 64231076: { uid: 88907, pid: 64230856, subject: "Re:  Pay down technical debt, not incur new one", read: 0, points: 3, kids: [ 64231102, 64231188, 64231364, 64231976 ], opid: 64230856 }, 64231460: { uid: 88907, pid: 64231446, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 2, kids: [  ], opid: 64231446 }, 64230492: { uid: 711126, pid: 64230408, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 1, kids: [  ], opid: 64230408 }, 64231456: { uid: 4896143, pid: 64231452, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 2, kids: [  ], opid: 64231452 }, 64231452: { uid: 4896143, pid: 64231094, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 2, kids: [ 64231456 ], opid: 64231094 }, 64231010: { uid: 9395567, pid: 64230662, read: 0, points: 2, kids: [  ], opid: 64230662 }, 64231420: { uid: 809573, pid: 64231188, subject: "Re: Pay down technical debt, not incur new one", read: 0, points: 2, kids: [  ], opid: 64231188 }, 64230652: { uid: 7796472, pid: 64230442, read: 0, points: 1, kids: [ 64230856, 64230858 ], opid: 64230442 }, 64231094: { uid: 666, pid: 64231020, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 0, kids: [ 64231452 ], opid: 64231020 }, 64230728: { uid: 666, pid: 64230560, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 0, kids: [ 64231020 ], opid: 64230560 }, 64232118: { uid: 9682010, pid: 64230408, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 2, kids: [  ], opid: 64230408 }, 64231876: { uid: 729550, pid: 64230858, subject: "Re:  Pay down technical debt, not incur new one", read: 0, points: 2, kids: [ 64232198 ], opid: 64230858 }, 64230888: { uid: 88907, pid: 64230408, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 3, kids: [ 64231374, 64231446 ], opid: 64230408 }, 64230560: { uid: 339739, pid: 64230408, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 2, kids: [ 64230630, 64230728, 64230748, 64231186 ], opid: 64230408 }, 64231318: { uid: 339739, pid: 64231186, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 2, kids: [ 64231378 ], opid: 64231186 }, 64230442: { uid: 3450605, pid: 64230408, read: 0, points: 2, kids: [ 64230652 ], opid: 64230408 }, 64231976: { uid: 80593, pid: 64231076, subject: "Re: Pay down technical debt, not incur new one", read: 0, points: 1, kids: [  ], opid: 64231076 }, 64231446: { uid: 4896143, pid: 64230888, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 2, kids: [ 64231460 ], opid: 64230888 }, 64231186: { uid: 583063, pid: 64230560, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 2, kids: [ 64231318, 64231390 ], opid: 64230560 }, 64231390: { uid: 666, pid: 64231186, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 0, kids: [  ], opid: 64231186 }, 64231394: { uid: 3450605, pid: 64231194, read: 0, points: 2, kids: [  ], opid: 64231194 }, 64231374: { uid: 67381, pid: 64230888, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 2, kids: [  ], opid: 64230888 }, 64232198: { uid: 3450605, pid: 64231876, read: 0, points: 2, kids: [  ], opid: 64231876 }, 64231082: { uid: 88907, pid: 64230748, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 2, kids: [  ], opid: 64230748 }, 64231102: { uid: 9395567, pid: 64231076, read: 0, points: 3, kids: [  ], opid: 64231076 }, 64231462: { uid: 88907, pid: 64231364, subject: "Re: Pay down technical debt, not incur new one", read: 0, points: 2, kids: [  ], opid: 64231364 }, 64230408: { uid: 583063, pid: 0, read: 0, points: 3, kids: [ 64230442, 64230492, 64230560, 64230888, 64232118 ], opid: 0 }, 64231190: { uid: 3450605, pid: 64231188, subject: "Re: Pay down technical debt, not incur new one", read: 0, points: 2, kids: [  ], opid: 64231188 }, 64230630: { uid: 1071376, pid: 64230560, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 2, kids: [ 64230662 ], opid: 64230560 }, 64231210: { uid: 9395567, pid: 64231188, read: 0, points: 3, kids: [  ], opid: 64231188 }, 64230662: { uid: 339739, pid: 64230630, subject: "Re:Pay down technical debt, not incur new one", read: 0, points: 2, kids: [ 64231010 ], opid: 64230630 }, 64231188: { uid: 3450605, pid: 64231076, subject: "Re: Pay down technical debt, not incur new one", read: 0, points: 2, kids: [ 64231190, 64231210, 64231420 ], opid: 64231076 }, 64231984: { uid: 80593, pid: 64230858, subject: "Re:  Pay down technical debt, not incur new one", read: 0, points: 1, kids: [ 64232218 ], opid: 64230858 }, 64231378: { uid: 9395567, pid: 64231318, read: 0, points: 2, kids: [  ], opid: 64231318 }, 64230856: { uid: 9395567, pid: 64230652, read: 0, points: 2, kids: [ 64231076 ], opid: 64230652 }, 64231364: { uid: 67381, pid: 64231076, subject: "Re: Pay down technical debt, not incur new one", read: 0, points: 2, kids: [ 64231462 ], opid: 64231076 } });

D2.thresh_totals({6:{6:{1:41,3:0,2:0}},3:{6:{1:35,3:0,2:6},4:{1:35,3:1,2:5},3:{1:35,3:6,2:0},5:{1:35,3:0,2:6}},2:{6:{1:8,3:0,2:33},4:{1:8,3:1,2:32},3:{1:8,3:6,2:27},2:{1:8,3:33,2:0},5:{1:8,3:0,2:33}},1:{6:{1:3,3:0,2:38},4:{1:3,3:1,2:37},1:{1:3,3:38,2:0},3:{1:3,3:6,2:32},2:{1:3,3:33,2:5},5:{1:3,3:0,2:38}},4:{6:{1:41,3:0,2:0},4:{1:41,3:0,2:0},5:{1:41,3:0,2:0}},0:{6:{1:0,3:0,2:41},4:{1:0,3:1,2:40},1:{1:0,3:38,2:3},3:{1:0,3:6,2:35},0:{1:0,3:41,2:0},2:{1:0,3:33,2:8},5:{1:0,3:0,2:41}},"-1":{6:{1:0,3:0,2:41},3:{1:0,3:6,2:35},2:{1:0,3:33,2:8},1:{1:0,3:38,2:3},4:{1:0,3:1,2:40},0:{1:0,3:41,2:0},"-1":{1:0,3:41,2:0},5:{1:0,3:0,2:41}},5:{6:{1:41,3:0,2:0},5:{1:41,3:0,2:0}}});

D2.root_comment(0);
D2.root_comments([64230408]);
D2.root_comments_hash({64230408:1});

D2.d2_comment_order(0);
D2.user_uid(666);
D2.user_is_anon(1);
D2.user_is_admin(0);
D2.user_is_subscriber(0);
D2.user_smallscreen(0);
D2.user_threshold(1);
D2.user_highlightthresh(4);
D2.user_d2asp(0);

D2.discussion_id(23221784);

D2.d2_seen('64230408,34,50,68,70,22,10,66,20,108,2,30,122,10,56,6,12,8,84,2,2,4,16,108,46,10,4,12,4,26,26,6,4,4,2,414,100,8,134,80,20');
D2.more_comments_num(0);


//-->
</script>




	
	
	
	
		<ul id="commentlisting" class="d2">
			<li id="tree_64230408" class="comment full contain"><span class="ind"></span>
<div id="comment_status_64230408" class="commentstatus"></div>
<div id="comment_64230408" class="cw">
	<div id="comment_top_64230408" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64230408" name="comment_link_64230408" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64230408" onclick="return D2.setFocusComment(64230408)" >Pay down technical debt, not incur new one</a>


		 	<span id="comment_score_64230408" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64230408); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~SchroedingersCat">SchroedingersCat</a>  <span class="uid"><a href="//slashdot.org/~SchroedingersCat">( 583063 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64230408">		
		on Saturday February 10, 2024 @01:30PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64230408">#64230408</a>)
		<small> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64230408">Old codebases need maintenance. It is a technical debt that comes due eventually. The most direct approach to improve security and quality of C++ project is to migrate to more recent C++ specification and compilers. Adding layer of "rust" to old codebases is not going to make them safer or better.</div>
	</div>

	<div class="commentSub" id="comment_sub_64230408">
<span class="ind"></span><a id="reply_link_64230408" class="btn link" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;op=Reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64230408" onclick="D2.replyTo(64230408); return false;">Reply to This</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="t slashpop" href="https://twitter.com/intent/tweet?text=Pay down technical debt, not incur new one%20by%20SchroedingersCat%20%40slashdot%20https://developers.slashdot.org/comments.pl?sid=23221784&cid=64230408" target="_blank">twitter</a>
		<a class="f slashpop" href="https://www.facebook.com/sharer/sharer.php?u=https://developers.slashdot.org/comments.pl?sid=23221784&cid=64230408" target="_blank">facebook</a>
		<a class="g" href="https://plus.google.com/share?url=https://developers.slashdot.org/comments.pl?sid=23221784&cid=64230408" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="https://www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>


	</div>
 <span class="ind"></span><a id="reply_link_64230408" title="Flag this comment as Inappropriate" class="ui-icon flag fright" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;op=flag&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64230408" onclick="return false;">Flag as Inappropriate</a>
</div>
</div>

<div id="replyto_64230408"></div>

<ul id="group_64230408">
	<li id="hiddens_64230408" class="hide"></li>
</ul>

<ul id="commtree_64230408"><li id="tree_64230442" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64230442" class="commentstatus"></div>
<div id="comment_64230442" class="cw">
	<div id="comment_top_64230442" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64230442" name="comment_link_64230442" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64230442" onclick="return D2.setFocusComment(64230442)" >Re: Pay down technical debt, not incur new one</a>


		 	<span id="comment_score_64230442" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64230442); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ArmoredDragon">ArmoredDragon</a>  <span class="uid"><a href="//slashdot.org/~ArmoredDragon">( 3450605 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64230442"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64230442"><p>That seems to be Google's goal here. The goal of carbon is to "upgrade" existing code. If you're familiar with rust, have a look at carbon. The syntax is strikingly similar. But to rewrite a borrow checker as robust as rust's is a MAJOR undertaking, and you don't even get to benefit from other modern features of rust like async. So I think it would make sense to just nix that idea entirely and have rust do what they originally intended with carbon.</p><p>Upgrading the C++ specification of old code still won't do a<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64230442">

</div>
</div>

<div id="replyto_64230442"></div>

<ul id="group_64230442">
	<li id="hiddens_64230442" class="hide"></li>
</ul>

<ul id="commtree_64230442"><li id="tree_64230652" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64230652" class="commentstatus"></div>
<div id="comment_64230652" class="cw">
	<div id="comment_top_64230652" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64230652" name="comment_link_64230652" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64230652" onclick="return D2.setFocusComment(64230652)" >Re:  Pay down technical debt, not incur new one</a>


		 	<span id="comment_score_64230652" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64230652); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~dowhileor">dowhileor</a>  <span class="uid"><a href="//slashdot.org/~dowhileor">( 7796472 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64230652"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64230652"><p>Those temporal memory problems btw are solved in a c library pretty often. C++ allows do data types to be created with little thought to how to stop leaks, buffer over runs, under runs.... Rust is no different I believe</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64230652">

</div>
</div>

<div id="replyto_64230652"></div>

<ul id="group_64230652">
	<li id="hiddens_64230652" class="hide"></li>
</ul>

<ul id="commtree_64230652"><li id="tree_64230856" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64230856" class="commentstatus"></div>
<div id="comment_64230856" class="cw">
	<div id="comment_top_64230856" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64230856" name="comment_link_64230856" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64230856" onclick="return D2.setFocusComment(64230856)" >Re:   Pay down technical debt, not incur new one</a>


		 	<span id="comment_score_64230856" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64230856); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~LindleyF">LindleyF</a>  <span class="uid"><a href="//slashdot.org/~LindleyF">( 9395567 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64230856"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64230856">The idea that the solution to c++ memory problems is to use C is hilarious to me.</div>
	</div>

	<div class="commentSub" id="comment_sub_64230856">

</div>
</div>

<div id="replyto_64230856"></div>

<ul id="group_64230856">
	<li id="hiddens_64230856" class="hide"></li>
</ul>

<ul id="commtree_64230856"><li id="tree_64231076" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231076" class="commentstatus"></div>
<div id="comment_64231076" class="cw">
	<div id="comment_top_64231076" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231076" name="comment_link_64231076" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231076" onclick="return D2.setFocusComment(64231076)" >Re:</a>


		 	<span id="comment_score_64231076" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231076); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~gweihir">gweihir</a>  <span class="uid"><a href="//slashdot.org/~gweihir">( 88907 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231076"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231076"><p>That is because you do not understand the problem. The problem is hidden effects in C++, both due to the really bad language design and due to complexity that is not needed but stems from bad software design and architecture. In C, you can at least see things clearly.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231076">

</div>
</div>

<div id="replyto_64231076"></div>

<ul id="group_64231076">
	<li id="hiddens_64231076" class="hide"></li>
</ul>

<ul id="commtree_64231076"><li id="tree_64231102" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231102" class="commentstatus"></div>
<div id="comment_64231102" class="cw">
	<div id="comment_top_64231102" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231102" name="comment_link_64231102" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231102" onclick="return D2.setFocusComment(64231102)" >Re:   Pay down technical debt, not incur new one</a>


		 	<span id="comment_score_64231102" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231102); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~LindleyF">LindleyF</a>  <span class="uid"><a href="//slashdot.org/~LindleyF">( 9395567 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231102"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231102">It's possible to do things stupidly in any language. Let's assume we don't do that. C++ allows you to define operations and abstractions that are safe by construction. You can get this wrong, but if you get it right, analysis is much simplified. C, by contrast, does not want you to use much abstraction. You see exactly what's going on, but you have to remember to explicitly handle many more details. It comes down to the power of abstraction. When used well, it is an incredible ally.</div>
	</div>

	<div class="commentSub" id="comment_sub_64231102">

</div>
</div>

<div id="replyto_64231102"></div>

<ul id="group_64231102">
	<li id="hiddens_64231102" class="hide"></li>
</ul>

</li><li id="tree_64231188" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231188" class="commentstatus"></div>
<div id="comment_64231188" class="cw">
	<div id="comment_top_64231188" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231188" name="comment_link_64231188" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231188" onclick="return D2.setFocusComment(64231188)" >Re:</a>


		 	<span id="comment_score_64231188" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231188); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ArmoredDragon">ArmoredDragon</a>  <span class="uid"><a href="//slashdot.org/~ArmoredDragon">( 3450605 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231188"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231188"><p><div class="quote"><p>That is because you do not understand the problem.</p></div><p>No, GP doesn't. And apparently neither do you.</p><p><div class="quote"><p>The problem is hidden effects in C++, both due to the really bad language design and due to complexity that is not needed but stems from bad software design and architecture. In C, you can at least see things clearly.</p></div><p>C very much has the same problem. The only way C++ is notably different here is implicit destruction, whereas C the lifetime is explicit. We still see the same problems in C that we do C++. All the time in fact. Admittedly though, C++ with its OOP crap makes it a hell of a lot easier to create subtle but very dangerous bugs.</p><p>NB: Decades of C++ and Java are THE reason developers are so skeptical of languages like Rust, so I'm not bothered by mere skepticism from t<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231188">

</div>
</div>

<div id="replyto_64231188"></div>

<ul id="group_64231188">
	<li id="hiddens_64231188" class="hide"></li>
</ul>

<ul id="commtree_64231188"><li id="tree_64231190" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231190" class="commentstatus"></div>
<div id="comment_64231190" class="cw">
	<div id="comment_top_64231190" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231190" name="comment_link_64231190" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231190" onclick="return D2.setFocusComment(64231190)" >Re:</a>


		 	<span id="comment_score_64231190" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231190); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ArmoredDragon">ArmoredDragon</a>  <span class="uid"><a href="//slashdot.org/~ArmoredDragon">( 3450605 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231190"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231190"><p>Bleh, editing mistake. Both languages == C++ and Java.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231190">

</div>
</div>

<div id="replyto_64231190"></div>

<ul id="group_64231190">
	<li id="hiddens_64231190" class="hide"></li>
</ul>

</li><li id="tree_64231210" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231210" class="commentstatus"></div>
<div id="comment_64231210" class="cw">
	<div id="comment_top_64231210" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231210" name="comment_link_64231210" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231210" onclick="return D2.setFocusComment(64231210)" >Re:  Pay down technical debt, not incur new one</a>


		 	<span id="comment_score_64231210" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231210); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~LindleyF">LindleyF</a>  <span class="uid"><a href="//slashdot.org/~LindleyF">( 9395567 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231210"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231210">You mentioned destructors in passing, but they're enormously important. Te ability to tie resource lifetime to a scope is one of C++'s biggest advantages over C, IMO. Especially once you layer semantics on top of it by your choice of smart pointer (if any).</div>
	</div>

	<div class="commentSub" id="comment_sub_64231210">

</div>
</div>

<div id="replyto_64231210"></div>

<ul id="group_64231210">
	<li id="hiddens_64231210" class="hide"></li>
</ul>

</li><li id="tree_64231420" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231420" class="commentstatus"></div>
<div id="comment_64231420" class="cw">
	<div id="comment_top_64231420" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231420" name="comment_link_64231420" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231420" onclick="return D2.setFocusComment(64231420)" >Re:</a>


		 	<span id="comment_score_64231420" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231420); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~vyvepe">vyvepe</a>  <span class="uid"><a href="//slashdot.org/~vyvepe">( 809573 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231420"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231420"><p><div class="quote"><p>I think C will always have a place in custom silicon architectures because the language is relatively simple to implement (though I'm just taking compiler writers' words for that.)</p> </div><p>Zig wants to take that space.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231420">

</div>
</div>

<div id="replyto_64231420"></div>

<ul id="group_64231420">
	<li id="hiddens_64231420" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64231364" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231364" class="commentstatus"></div>
<div id="comment_64231364" class="cw">
	<div id="comment_top_64231364" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231364" name="comment_link_64231364" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231364" onclick="return D2.setFocusComment(64231364)" >Re:</a>


		 	<span id="comment_score_64231364" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231364); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~SirSlud">SirSlud</a>  <span class="uid"><a href="//slashdot.org/~SirSlud">( 67381 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231364"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231364"><p>My feeling today after having both learned some rust and working with people who know rust really well now - in an environment and industry in which we're all c/c++ heavy hitters and have plenty of reasons, both technical and inertia/career/ecosystem based to favor them - is that rust is coming for lunches. Comments like yours, I suspect it doesn't really matter for you in any economic sense, so it's easy for you to act like you know. Just know that you're wrong.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231364">

</div>
</div>

<div id="replyto_64231364"></div>

<ul id="group_64231364">
	<li id="hiddens_64231364" class="hide"></li>
</ul>

<ul id="commtree_64231364"><li id="tree_64231462" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231462" class="commentstatus"></div>
<div id="comment_64231462" class="cw">
	<div id="comment_top_64231462" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231462" name="comment_link_64231462" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231462" onclick="return D2.setFocusComment(64231462)" >Re:</a>


		 	<span id="comment_score_64231462" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231462); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~gweihir">gweihir</a>  <span class="uid"><a href="//slashdot.org/~gweihir">( 88907 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231462"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231462"><p>I don't think so. And I have seen promises and predictions like these before, in fact on several different "waves" of programming language designs. They never pan out. Sure, Rust may (or may not) kill C++, which is a language so horrible it does not take that much to do it. But C? Forget about it. C has a ton of advantages in the hands of somebody that knows what they are doing. Rust cannot compete.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231462">

</div>
</div>

<div id="replyto_64231462"></div>

<ul id="group_64231462">
	<li id="hiddens_64231462" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64231976" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231976" class="commentstatus"></div>
<div id="comment_64231976" class="cw">
	<div id="comment_top_64231976" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231976" name="comment_link_64231976" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231976" onclick="return D2.setFocusComment(64231976)" >Re:</a>


		 	<span id="comment_score_64231976" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231976); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~angel'o'sphere">angel'o'sphere</a>  <span class="uid"><a href="//slashdot.org/~angel'o'sphere">( 80593 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231976"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231976"><p><i>In C, you can at least see things clearly.</i><br>And why would you not see things clearly in C++ ?</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231976">

</div>
</div>

<div id="replyto_64231976"></div>

<ul id="group_64231976">
	<li id="hiddens_64231976" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_64230858" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64230858" class="commentstatus"></div>
<div id="comment_64230858" class="cw">
	<div id="comment_top_64230858" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64230858" name="comment_link_64230858" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64230858" onclick="return D2.setFocusComment(64230858)" >Re:   Pay down technical debt, not incur new one</a>


		 	<span id="comment_score_64230858" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64230858); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ArmoredDragon">ArmoredDragon</a>  <span class="uid"><a href="//slashdot.org/~ArmoredDragon">( 3450605 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64230858"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64230858"><p><div class="quote"><p>Those temporal memory problems btw are solved in a c library pretty often.</p></div><p>I'm not sure what you're referring to but neither C nor C++ can properly manage pointer lifetimes. They both leave this entirely up to the programmer. There are libraries like garbage collection for both, or for C++ only, destructors that zeroize data, which only serves to mitigate leaks but still doesn't address undefined behavior.</p><p>ALL of these solutions come at a performance cost.</p><p><div class="quote"><p>C++ allows do data types to be created with little thought to how to stop leaks,</p></div><p>In C++, that is a VERY dangerous assumption to make. Especially when doing concurrency.</p><p><div class="quote"><p>buffer over runs,</p></div><p>That is not temporal safety, you're think<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64230858">

</div>
</div>

<div id="replyto_64230858"></div>

<ul id="group_64230858">
	<li id="hiddens_64230858" class="hide"></li>
</ul>

<ul id="commtree_64230858"><li id="tree_64231194" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231194" class="commentstatus"></div>
<div id="comment_64231194" class="cw">
	<div id="comment_top_64231194" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231194" name="comment_link_64231194" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231194" onclick="return D2.setFocusComment(64231194)" >Re:    Pay down technical debt, not incur new one</a>


		 	<span id="comment_score_64231194" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231194); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~dowhileor">dowhileor</a>  <span class="uid"><a href="//slashdot.org/~dowhileor">( 7796472 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231194"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231194"><p>If you try hard enough you can achieve those states without even using pointers. Memory errors can almost always be attributed to incorrect bounds checking. I just think the reason things like drivers in an OS like linux for example, are not in c++ is that mentioned bounds checking environment. I also suspect rust has the same problem.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231194">

</div>
</div>

<div id="replyto_64231194"></div>

<ul id="group_64231194">
	<li id="hiddens_64231194" class="hide"></li>
</ul>

<ul id="commtree_64231194"><li id="tree_64231394" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231394" class="commentstatus"></div>
<div id="comment_64231394" class="cw">
	<div id="comment_top_64231394" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231394" name="comment_link_64231394" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231394" onclick="return D2.setFocusComment(64231394)" >Re:     Pay down technical debt, not incur new one</a>


		 	<span id="comment_score_64231394" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231394); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ArmoredDragon">ArmoredDragon</a>  <span class="uid"><a href="//slashdot.org/~ArmoredDragon">( 3450605 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231394"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231394"><p><div class="quote"><p>If you try hard enough you can achieve those states without even using pointers. Memory errors can almost always be attributed to incorrect bounds checking.</p></div><p>No...You have to be pretty careless to get bounds checks wrong. That's the most easily preventable kind of memory error. I don't know what languages you use, but picture it this way: Say you declare an array of the numbers 0 1 and 2. You then write a a loop to read from each, but you tell it to stop at index three because you have a three byte array. Problem is, index three is out of bounds, so whatever data you read from that last index is invalid. This is also considered a pointer arithmetic error even th<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231394">

</div>
</div>

<div id="replyto_64231394"></div>

<ul id="group_64231394">
	<li id="hiddens_64231394" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64231876" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231876" class="commentstatus"></div>
<div id="comment_64231876" class="cw">
	<div id="comment_top_64231876" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231876" name="comment_link_64231876" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231876" onclick="return D2.setFocusComment(64231876)" >Re:</a>


		 	<span id="comment_score_64231876" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231876); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~K.+S.+Kyosuke">K. S. Kyosuke</a>  <span class="uid"><a href="//slashdot.org/~K.+S.+Kyosuke">( 729550 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231876"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231876"><p><div class="quote"><p>ALL of these solutions come at a performance cost.</p></div><p>Just like Rust. They still haven't figured out how to specialize generics. TANSTAAFL. You gotta pick what you want.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231876">

</div>
</div>

<div id="replyto_64231876"></div>

<ul id="group_64231876">
	<li id="hiddens_64231876" class="hide"></li>
</ul>

<ul id="commtree_64231876"><li id="tree_64232198" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64232198" class="commentstatus"></div>
<div id="comment_64232198" class="cw">
	<div id="comment_top_64232198" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64232198" name="comment_link_64232198" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64232198" onclick="return D2.setFocusComment(64232198)" >Re:   Pay down technical debt, not incur new one</a>


		 	<span id="comment_score_64232198" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64232198); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ArmoredDragon">ArmoredDragon</a>  <span class="uid"><a href="//slashdot.org/~ArmoredDragon">( 3450605 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64232198"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64232198"><p><div class="quote"><p>Just like Rust.</p></div><p>No, rust incurs no runtime cost here.</p><p><div class="quote"><p>They still haven't figured out how to specialize generics. TANSTAAFL. You gotta pick what you want.</p></div><p>It's not that they haven't figured it out, it's that they don't even want it. Rust deliberately doesn't support overloading because it's error prone. The underlying philosophy of the language is to make it easy to do things the right way. Same reason c++ isn't allowed, instead you'd do c += 1.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64232198">

</div>
</div>

<div id="replyto_64232198"></div>

<ul id="group_64232198">
	<li id="hiddens_64232198" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64231984" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231984" class="commentstatus"></div>
<div id="comment_64231984" class="cw">
	<div id="comment_top_64231984" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231984" name="comment_link_64231984" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231984" onclick="return D2.setFocusComment(64231984)" >Re:</a>


		 	<span id="comment_score_64231984" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231984); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~angel'o'sphere">angel'o'sphere</a>  <span class="uid"><a href="//slashdot.org/~angel'o'sphere">( 80593 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231984"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231984"><p>You do not know much about C++</p><p>So basically everything in your post above is wrong.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231984">

</div>
</div>

<div id="replyto_64231984"></div>

<ul id="group_64231984">
	<li id="hiddens_64231984" class="hide"></li>
</ul>

<ul id="commtree_64231984"><li id="tree_64232218" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64232218" class="commentstatus"></div>
<div id="comment_64232218" class="cw">
	<div id="comment_top_64232218" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64232218" name="comment_link_64232218" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64232218" onclick="return D2.setFocusComment(64232218)" >Re:   Pay down technical debt, not incur new one</a>


		 	<span id="comment_score_64232218" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64232218); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ArmoredDragon">ArmoredDragon</a>  <span class="uid"><a href="//slashdot.org/~ArmoredDragon">( 3450605 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64232218"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64232218"><p>You know who you remind me of? If you've ever played punch out, the second easiest guy in the game is Von Kaiser, who calls himself a boxing teacher, but he's so bad at it. In the wii version of the game his own students were beating him.</p><p>And what a coincidence, you're both German. Makes me wonder if they were inspired by you when they made him.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64232218">

</div>
</div>

<div id="replyto_64232218"></div>

<ul id="group_64232218">
	<li id="hiddens_64232218" class="hide"></li>
</ul>

</li></ul></li></ul></li></ul></li></ul></li><li id="tree_64230492" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64230492" class="commentstatus"></div>
<div id="comment_64230492" class="cw">
	<div id="comment_top_64230492" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64230492" name="comment_link_64230492" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64230492" onclick="return D2.setFocusComment(64230492)" >Re:</a>


		 	<span id="comment_score_64230492" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64230492); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~dfghjk">dfghjk</a>  <span class="uid"><a href="//slashdot.org/~dfghjk">( 711126 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64230492"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64230492"><p>"The most direct approach to improve security and quality of C++ project is to migrate to more recent C++ specification and compilers."</p><p>Whatever that means.  It's certainly the easiest thing to do, particularly when "security and quality" themselves don't have concrete meaning.</p><p>"Adding layer of "rust" to old codebases is not going to make them safer or better."</p><p>For some undefined meaning of safer and better yeah that's probably right, just like migrating to more recent C++ specifications and compilers won't.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64230492">

</div>
</div>

<div id="replyto_64230492"></div>

<ul id="group_64230492">
	<li id="hiddens_64230492" class="hide"></li>
</ul>

</li><li id="tree_64230560" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64230560" class="commentstatus"></div>
<div id="comment_64230560" class="cw">
	<div id="comment_top_64230560" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64230560" name="comment_link_64230560" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64230560" onclick="return D2.setFocusComment(64230560)" >Re:</a>


		 	<span id="comment_score_64230560" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64230560); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Waffle+Iron">Waffle Iron</a>  <span class="uid"><a href="//slashdot.org/~Waffle+Iron">( 339739 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64230560"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64230560"><p><div class="quote"><p>The most direct approach to improve security and quality of C++ project is to migrate to more recent C++ specification and compilers.</p></div><p>How recent? Is this enough?</p><p>g++ --version<br>g++ 12.2.0<br>Copyright (C) 2022 Free Software Foundation, Inc.</p><p>Is there anything wrong with this code?</p><blockquote><div><p> <tt>#include &lt;vector&gt;<br>
<span class="substr"> </span> <br>int main() {<br>
  auto v = std::vector&lt;int&gt;({1, 1, 1, 1, 1, 1});<br>
  for (auto n : v) {<br>
    if (n == 1) {<br>
      v.push_back(2);<br>
    }<br>
  }<br>
  return 0;<br>}</tt> </p></div></blockquote><p>The compiler seems to think it's OK:</p><p>$ g++ -Wall -pedantic</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64230560">

</div>
</div>

<div id="replyto_64230560"></div>

<ul id="group_64230560">
	<li id="hiddens_64230560" class="hide"></li>
</ul>

<ul id="commtree_64230560"><li id="tree_64230630" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64230630" class="commentstatus"></div>
<div id="comment_64230630" class="cw">
	<div id="comment_top_64230630" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64230630" name="comment_link_64230630" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64230630" onclick="return D2.setFocusComment(64230630)" >Re:</a>


		 	<span id="comment_score_64230630" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64230630); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Bu11etmagnet">Bu11etmagnet</a>  <span class="uid"><a href="//slashdot.org/~Bu11etmagnet">( 1071376 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64230630"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64230630"><p>- Doctor, doctor, it hurts when I do this!<br>- Don't do it, then.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64230630">

</div>
</div>

<div id="replyto_64230630"></div>

<ul id="group_64230630">
	<li id="hiddens_64230630" class="hide"></li>
</ul>

<ul id="commtree_64230630"><li id="tree_64230662" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64230662" class="commentstatus"></div>
<div id="comment_64230662" class="cw">
	<div id="comment_top_64230662" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64230662" name="comment_link_64230662" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64230662" onclick="return D2.setFocusComment(64230662)" >Re:</a>


		 	<span id="comment_score_64230662" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64230662); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Waffle+Iron">Waffle Iron</a>  <span class="uid"><a href="//slashdot.org/~Waffle+Iron">( 339739 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64230662"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64230662"><p>But it doesn't hurt. Maybe not until months after you've shipped production code.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64230662">

</div>
</div>

<div id="replyto_64230662"></div>

<ul id="group_64230662">
	<li id="hiddens_64230662" class="hide"></li>
</ul>

<ul id="commtree_64230662"><li id="tree_64231010" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231010" class="commentstatus"></div>
<div id="comment_64231010" class="cw">
	<div id="comment_top_64231010" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231010" name="comment_link_64231010" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231010" onclick="return D2.setFocusComment(64231010)" >Re: Pay down technical debt, not incur new one</a>


		 	<span id="comment_score_64231010" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231010); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~LindleyF">LindleyF</a>  <span class="uid"><a href="//slashdot.org/~LindleyF">( 9395567 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231010"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231010">Concepts may provide some guardrails here. Certainly the idea that different containers have different iterative invalidation rules should be well-known. But, it would be nice if clang-tidy could catch this.</div>
	</div>

	<div class="commentSub" id="comment_sub_64231010">

</div>
</div>

<div id="replyto_64231010"></div>

<ul id="group_64231010">
	<li id="hiddens_64231010" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_64230728" class="comment hidden"><span class="ind"></span>
<div id="comment_status_64230728" class="commentstatus"></div>
<div id="comment_64230728" class="cw">
</div>

<div id="replyto_64230728"></div>

<ul id="group_64230728">
	<li id="hiddens_64230728" class="hide"></li>
</ul>

<ul id="commtree_64230728"><li id="tree_64231020" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231020" class="commentstatus"></div>
<div id="comment_64231020" class="cw">
	<div id="comment_top_64231020" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231020" name="comment_link_64231020" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231020" onclick="return D2.setFocusComment(64231020)" >Re:</a>


		 	<span id="comment_score_64231020" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231020); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~jythie">jythie</a>  <span class="uid"><a href="//slashdot.org/~jythie">( 914043 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231020"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231020">Keep in mind though that these 'rules' were developed over decades as people encountered undefined behaviors.  Rust is going to have its own issues that will become part of tribal knowledge over time.. only with rust they have not been discovered yet.</div>
	</div>

	<div class="commentSub" id="comment_sub_64231020">

</div>
</div>

<div id="replyto_64231020"></div>

<ul id="group_64231020">
	<li id="hiddens_64231020" class="hide"></li>
</ul>

<ul id="commtree_64231020"><li id="tree_64231094" class="comment hidden"><span class="ind"></span>
<div id="comment_status_64231094" class="commentstatus"></div>
<div id="comment_64231094" class="cw">
</div>

<div id="replyto_64231094"></div>

<ul id="group_64231094">
	<li id="hiddens_64231094" class="hide"></li>
</ul>

<ul id="commtree_64231094"><li id="tree_64231452" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231452" class="commentstatus"></div>
<div id="comment_64231452" class="cw">
	<div id="comment_top_64231452" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231452" name="comment_link_64231452" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231452" onclick="return D2.setFocusComment(64231452)" >Re:</a>


		 	<span id="comment_score_64231452" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231452); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~serafean">serafean</a>  <span class="uid"><a href="//slashdot.org/~serafean">( 4896143 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231452"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231452"><p>&gt; Other posters mentioned that clang's static analyzer won't detect this, cppcheck doesn't either.</p><p>Microsoft's debug builds can:<br><a href="https://learn.microsoft.com/en-us/cpp/standard-library/debug-iterator-support?view=msvc-170" title="microsoft.com">https://learn.microsoft.com/en...</a> [microsoft.com]</p><p>This then comes down to having unit tests...</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231452">

</div>
</div>

<div id="replyto_64231452"></div>

<ul id="group_64231452">
	<li id="hiddens_64231452" class="hide"></li>
</ul>

<ul id="commtree_64231452"><li id="tree_64231456" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231456" class="commentstatus"></div>
<div id="comment_64231456" class="cw">
	<div id="comment_top_64231456" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231456" name="comment_link_64231456" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231456" onclick="return D2.setFocusComment(64231456)" >Re:</a>


		 	<span id="comment_score_64231456" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231456); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~serafean">serafean</a>  <span class="uid"><a href="//slashdot.org/~serafean">( 4896143 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231456"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231456"><p>edit: libstdc++ (GNU) supports this too: <a href="https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode.html" title="gnu.org">https://gcc.gnu.org/onlinedocs...</a> [gnu.org]</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231456">

</div>
</div>

<div id="replyto_64231456"></div>

<ul id="group_64231456">
	<li id="hiddens_64231456" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="hidestring_64231020"><noscript><b class='more'><span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23221784&amp;threshold=-1&amp;commentsort=0&amp;mode=thread&amp;pid=64231020">1 reply</a> beneath your current threshold.</b></noscript></li></ul></li></ul></li><li id="tree_64230748" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64230748" class="commentstatus"></div>
<div id="comment_64230748" class="cw">
	<div id="comment_top_64230748" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64230748" name="comment_link_64230748" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64230748" onclick="return D2.setFocusComment(64230748)" >Re:</a>


		 	<span id="comment_score_64230748" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64230748); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~OrangeTide">OrangeTide</a>  <span class="uid"><a href="//slashdot.org/~OrangeTide">( 124937 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64230748"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64230748"><p>I would have expect that a static analysis would detect if you modify the size of a vector while iterating it. But clang scan-build didn't seem to care either.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64230748">

</div>
</div>

<div id="replyto_64230748"></div>

<ul id="group_64230748">
	<li id="hiddens_64230748" class="hide"></li>
</ul>

<ul id="commtree_64230748"><li id="tree_64231082" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231082" class="commentstatus"></div>
<div id="comment_64231082" class="cw">
	<div id="comment_top_64231082" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231082" name="comment_link_64231082" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231082" onclick="return D2.setFocusComment(64231082)" >Re:</a>


		 	<span id="comment_score_64231082" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231082); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~gweihir">gweihir</a>  <span class="uid"><a href="//slashdot.org/~gweihir">( 88907 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231082"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231082"><p>Static analysis is actually very limited in what it can do. It can only find simple things because otherwise it runs in prohibitively bad memory issued and even worse execution time problems.</p><p>The only solution still is and may remain forever unless AGI is actually possible - something that seems less and less likely - coders that _really_ understand what they are doing. These people are very rare, expensive and do not take crap from "management". Hence most places try to do without them, with predictable res<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231082">

</div>
</div>

<div id="replyto_64231082"></div>

<ul id="group_64231082">
	<li id="hiddens_64231082" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64231186" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231186" class="commentstatus"></div>
<div id="comment_64231186" class="cw">
	<div id="comment_top_64231186" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231186" name="comment_link_64231186" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231186" onclick="return D2.setFocusComment(64231186)" >Re:</a>


		 	<span id="comment_score_64231186" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231186); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~SchroedingersCat">SchroedingersCat</a>  <span class="uid"><a href="//slashdot.org/~SchroedingersCat">( 583063 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231186"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231186">This is because C++ collections are implemented as a library. Enabling libstdc++ debug mode will catch most of undefined behavior. See <a href="https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode.html" title="gnu.org">libstdc++ debug mode</a> [gnu.org]</div>
	</div>

	<div class="commentSub" id="comment_sub_64231186">

</div>
</div>

<div id="replyto_64231186"></div>

<ul id="group_64231186">
	<li id="hiddens_64231186" class="hide"></li>
</ul>

<ul id="commtree_64231186"><li id="tree_64231318" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231318" class="commentstatus"></div>
<div id="comment_64231318" class="cw">
	<div id="comment_top_64231318" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231318" name="comment_link_64231318" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231318" onclick="return D2.setFocusComment(64231318)" >Re:</a>


		 	<span id="comment_score_64231318" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231318); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Waffle+Iron">Waffle Iron</a>  <span class="uid"><a href="//slashdot.org/~Waffle+Iron">( 339739 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231318"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231318"><p> If I have to run in C++ slow debug mode, maybe I should just use a safer, slightly slower language like Java, Go or Pascal in the first place.</p><p>"But you only use debug mode while your developing!"</p><p>That's probably only testing the happy paths.</p><p>"Then you should use $CODE_COVERAGE_TOOL!"</p><p>This is really getting complicated and expensive. Why not just begin migrating to Rust like the article said?</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231318">

</div>
</div>

<div id="replyto_64231318"></div>

<ul id="group_64231318">
	<li id="hiddens_64231318" class="hide"></li>
</ul>

<ul id="commtree_64231318"><li id="tree_64231378" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231378" class="commentstatus"></div>
<div id="comment_64231378" class="cw">
	<div id="comment_top_64231378" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231378" name="comment_link_64231378" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231378" onclick="return D2.setFocusComment(64231378)" >Re: Pay down technical debt, not incur new one</a>


		 	<span id="comment_score_64231378" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231378); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~LindleyF">LindleyF</a>  <span class="uid"><a href="//slashdot.org/~LindleyF">( 9395567 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231378"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231378">Using rust isn't an excuse not to write proper unit tests.</div>
	</div>

	<div class="commentSub" id="comment_sub_64231378">

</div>
</div>

<div id="replyto_64231378"></div>

<ul id="group_64231378">
	<li id="hiddens_64231378" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64231390" class="comment hidden"><span class="ind"></span>
<div id="comment_status_64231390" class="commentstatus"></div>
<div id="comment_64231390" class="cw">
</div>

<div id="replyto_64231390"></div>

<ul id="group_64231390">
	<li id="hiddens_64231390" class="hide"></li>
</ul>

</li><li id="hidestring_64231186"><noscript><b class='more'><span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23221784&amp;threshold=-1&amp;commentsort=0&amp;mode=thread&amp;pid=64231186">1 reply</a> beneath your current threshold.</b></noscript></li></ul></li><li id="hidestring_64230560"><noscript><b class='more'><span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23221784&amp;threshold=-1&amp;commentsort=0&amp;mode=thread&amp;pid=64230560">1 reply</a> beneath your current threshold.</b></noscript></li></ul></li><li id="tree_64230888" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64230888" class="commentstatus"></div>
<div id="comment_64230888" class="cw">
	<div id="comment_top_64230888" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64230888" name="comment_link_64230888" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64230888" onclick="return D2.setFocusComment(64230888)" >Re:</a>


		 	<span id="comment_score_64230888" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64230888); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~gweihir">gweihir</a>  <span class="uid"><a href="//slashdot.org/~gweihir">( 88907 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64230888"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64230888"><p>Indeed. But the "new is better and Rust is best!" fanatics are incapable of seeing that. Going to two languages were there was one will always increase complexity and that will negate all benefits of the move and routinely make matters much worse. The only way a hybrid design will ever be beneficial is if it was hybrid right from the start and carefully planned to be that way. Takes some real experience to see that though. The Rust-fanatics are generally lacking that.</p><p>From the degree reality is denied here,<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64230888">

</div>
</div>

<div id="replyto_64230888"></div>

<ul id="group_64230888">
	<li id="hiddens_64230888" class="hide"></li>
</ul>

<ul id="commtree_64230888"><li id="tree_64231374" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231374" class="commentstatus"></div>
<div id="comment_64231374" class="cw">
	<div id="comment_top_64231374" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231374" name="comment_link_64231374" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231374" onclick="return D2.setFocusComment(64231374)" >Re:</a>


		 	<span id="comment_score_64231374" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231374); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~SirSlud">SirSlud</a>  <span class="uid"><a href="//slashdot.org/~SirSlud">( 67381 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231374"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231374"><p>On what planet was "there was always one?" Oh right, on none planet.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231374">

</div>
</div>

<div id="replyto_64231374"></div>

<ul id="group_64231374">
	<li id="hiddens_64231374" class="hide"></li>
</ul>

</li><li id="tree_64231446" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231446" class="commentstatus"></div>
<div id="comment_64231446" class="cw">
	<div id="comment_top_64231446" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231446" name="comment_link_64231446" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231446" onclick="return D2.setFocusComment(64231446)" >Re:</a>


		 	<span id="comment_score_64231446" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231446); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~serafean">serafean</a>  <span class="uid"><a href="//slashdot.org/~serafean">( 4896143 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231446"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231446"><p>This comes down to the language interop mechanism being C.</p><p>IF, and that's a big IF, this manages to create a way to call rust from C++ and C++ from rust in a way that keeps (most of) the benefits of both languages, it will all become more interesting.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231446">

</div>
</div>

<div id="replyto_64231446"></div>

<ul id="group_64231446">
	<li id="hiddens_64231446" class="hide"></li>
</ul>

<ul id="commtree_64231446"><li id="tree_64231460" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64231460" class="commentstatus"></div>
<div id="comment_64231460" class="cw">
	<div id="comment_top_64231460" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64231460" name="comment_link_64231460" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64231460" onclick="return D2.setFocusComment(64231460)" >Re:</a>


		 	<span id="comment_score_64231460" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64231460); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~gweihir">gweihir</a>  <span class="uid"><a href="//slashdot.org/~gweihir">( 88907 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64231460"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64231460"><p><div class="quote"><p>This comes down to the language interop mechanism being C.</p><p>IF, and that's a big IF, this manages to create a way to call rust from C++ and C++ from rust in a way that keeps (most of) the benefits of both languages, it will all become more interesting.</p></div><p>If they manage that, it will be a feat never achieved before and though practically impossible by many for good reasons. Hence I doubt they will manage it. Given the usual mode of the Rust people, they may well lie about it though.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64231460">

</div>
</div>

<div id="replyto_64231460"></div>

<ul id="group_64231460">
	<li id="hiddens_64231460" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_64232118" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64232118" class="commentstatus"></div>
<div id="comment_64232118" class="cw">
	<div id="comment_top_64232118" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64232118" name="comment_link_64232118" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;cid=64232118" onclick="return D2.setFocusComment(64232118)" >Re:</a>


		 	<span id="comment_score_64232118" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64232118); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~codebase7">codebase7</a>  <span class="uid"><a href="//slashdot.org/~codebase7">( 9682010 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64232118"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64232118"><p><div class="quote"><p>Adding layer of "rust" to old codebases is not going to make them safer or better.</p></div><p>
Bbbbut.... I was told that just adding Rust would fix all of my memory bugs! Was I lied to?<nobr> <wbr></nobr>/s<br>
<br>
By the same argument, adding "rusty" C++ support to Rust isn't going to help Rust in anyway, nor make the code safer. If anything, I'd imagine that some of that desired C++ support may very well require the use of the <a href="https://doc.rust-lang.org/std/keyword.unsafe.html" title="rust-lang.org">unsafe Rust keyword<span class="substr"> </span></a> [rust-lang.org] to implement properly. Which would only harm Rust's reputation because the whole point of Rust is that the end-programmer doesn't have to explicitly check for "soundness" <i>themse</i></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64232118">

</div>
</div>

<div id="replyto_64232118"></div>

<ul id="group_64232118">
	<li id="hiddens_64232118" class="hide"></li>
</ul>

</li></ul></li>
			<li id="roothiddens" class="hide"></li>
		</ul>
	
	
	
	

<noscript><p><b>There may be more comments in this discussion. Without JavaScript enabled, you might want to <a href="//developers.slashdot.org/users.pl?op=editcomm">turn on Classic Discussion System</a> in your preferences instead.</b></p></noscript>
<div id="discussion_buttons" class="clearfix">






</div>


<div class="newcmnt"><div id="replyto_0"></div></div>


	<script type="text/javascript">
<!--
		D2.currents()['hidden']   = 3;
		D2.currents()['full']     = 1;
		D2.currents()['oneline']  = 37;
		// D2.currents_total(41);

		D2.abbrev_comments({64230858:812,64232118:562,64230888:521,64230560:388,64230442:522,64231394:706,64231082:522,64231188:866});
		D2.noshow_comments([64230728,64231094,64231390]);
		D2.pieces_comments([64230442,64230652,64230856,64231076,64231102,64231188,64231190,64231210,64231420,64231364,64231462,64231976,64230858,64231194,64231394,64231876,64232198,64231984,64232218,64230492,64230560,64230630,64230662,64231010,64231020,64231452,64231456,64230748,64231082,64231186,64231318,64231378,64230888,64231374,64231446,64231460,64232118]);
		D2.init_hiddens([64231020,64231186,64230560]);

		D2.finishLoading();


		if (D2.thresh_totals()[6][6][1] == 0) {
			D2.replyTo(0, 1);
		}


//-->
	</script>


</div>



	
	
		<div id="clickgen" class="grid_24 b">
    <section class="grid_16 f">
        <div>
			<h4 class="nobg">
			    <a href="" class="selected btmrel" onClick="getRelatedStoriesForStory(424742);return false">Related Links</a>
			    <span class="tops fright">Top of the: <a href="" class="btmday" onClick="getTopStories(1);return false">day</a>, <a class="btmweek" href="" onClick="getTopStories(7); return false">week</a>, <a href="" onClick="getTopStories(30);return false" class="btmmonth">month</a>.</span>
			</h4>
			<ul class="nobullets bmrelatedlist">


	
	<li>
		<span class="cmntcnt"><span class="slant"></span><span>321<span class="hide"> comments</span></span></span><a href="//developers.slashdot.org/story/23/08/07/0136228/should-a-variables-type-come-after-its-name?sdsrc=popbyskidbtmprev">Should a Variable's Type Come After Its Name?</a>
	</li>

	
	<li>
		<span class="cmntcnt"><span class="slant"></span><span>293<span class="hide"> comments</span></span></span><a href="//developers.slashdot.org/story/23/09/02/1753239/are-scrums-a-cancer?sdsrc=popbyskidbtmprev">Are Scrums a Cancer?</a>
	</li>

	
	<li>
		<span class="cmntcnt"><span class="slant"></span><span>226<span class="hide"> comments</span></span></span><a href="//developers.slashdot.org/story/23/06/26/018234/34-of-ap-cs-students-couldnt-solve-this-java-based-2d-array-question?sdsrc=popbyskidbtmprev">34% of AP CS Students Couldn't Solve This Java-Based 2D Array Question</a>
	</li>

	
	<li>
		<span class="cmntcnt"><span class="slant"></span><span>224<span class="hide"> comments</span></span></span><a href="//developers.slashdot.org/story/23/06/03/1514212/nyt-its-the-end-of-computer-programming-as-we-know-it?sdsrc=popbyskidbtmprev">NYT: It's the End of Computer Programming As We Know It</a>
	</li>

	
	<li>
		<span class="cmntcnt"><span class="slant"></span><span>174<span class="hide"> comments</span></span></span><a href="//developers.slashdot.org/story/23/10/15/185245/ok-so-chatgpt-just-debugged-my-code-for-real?sdsrc=popbyskidbtmprev">'OK, So ChatGPT Just Debugged My Code. For Real'</a>
	</li>


</ul>
        </div>
    </section>
    <aside class="grid_8 st">
		<section class="grid_24 f">
			<div>
				<h5 class="tlnav"><a href="//yro.slashdot.org/story/24/02/10/0732205/eff-challenges-legal-bullying-of-sites-reporting-on-alleged-appin-hacking-for-hire?sdsrc=nextbtmnext">next</a></h5>
				<div class="grid_24">
	    
	    
            	 <span class="grid_7 tcenter"><img src="//a.fsdn.com/sd/topics/eff_64.png" width="64" height="64" alt="Electronic Frontier Foundation"></span>
	    
					<p class="grid_12"><a href="//yro.slashdot.org/story/24/02/10/0732205/eff-challenges-legal-bullying-of-sites-reporting-on-alleged-appin-hacking-for-hire?sdsrc=nextbtmprev">EFF Challenges 'Legal Bullying' of Sites Reporting on Alleged Appin 'Hacking-for-Hire'</a></p>
					<span class="grid_5 tcenter comments"><span class="cmntcnt_large fleft"><span class="slant"></span><span>14<span class="hide"> comments</span></span></span></span>
	
				</div>
			</div>
		</section>
		<section class="grid_24">
			<div>
				<h5 class="tlnav"><a href="//news.slashdot.org/story/24/02/10/0641250/recycling-plants-start-installing-trash-spotting-ai-systems?sdsrc=prevbtmprev">previous</a></h5>
				<div class="grid_24">
	    
            	 <span class="grid_7 tcenter"><img src="//a.fsdn.com/sd/topics/ai_64.png" width="64" height="64" alt="AI"></span>
	    
					<p class="grid_12"><a href="//news.slashdot.org/story/24/02/10/0641250/recycling-plants-start-installing-trash-spotting-ai-systems?sdsrc=prevbtmprev">Recycling Plants Start Installing Trash-Spotting AI Systems</a></p>

					<span class="grid_5 tcenter comments"><span class="cmntcnt_large fleft"><span class="slant"></span><span>57<span class="hide"> comments</span></span></span></span>
				</div>
			</div>
		</section>
	</aside>
</div>
	

</section>
			</div>
		</div>
<div id="bottom-masonry" class="jobbioapp"></div>
		<div class="row top-space">


			<div class="grid_24">
				<!-- 728px ad -->

				<div class="adwrap">
<div id='div-gpt-ad-728x90_c'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-728x90_c');});</script></div>
</div>
				<!-- end 728px ad -->
				<!-- Slashdot Deals 6 Best Sellers -->
					<div class="row deals-footer">
						<div class="units-8 indent-2 deals-wrapper">
						  <div class="deals-header"><h1>Slashdot Top Deals</h1></div>
						  <div id="deals-output">
							<script id="deals-template" type="text/x-handlebars-template">
							  {{#each deal}}
								<div class="deal">
								  <a href="{{urlPath permalink}}?&utm_source=slashdot.org&utm_medium=dealfeed-footerfeed&utm_campaign={{slug}}" target="_blank">
								  	<img src="{{main_image}}" alt="" />
								  </a>
								  <p class="title"><a href="{{urlPath permalink}}?&utm_source=slashdot.org&utm_medium=dealfeed-footerfeed&utm_campaign={{slug}}" target="_blank">{{title}}</a></p>
								  <p class="deal-price">{{centConversion price_in_cents}}</p>
								</div>
							  {{/each}}
							</script>
						  </div>
						</div>
					</div>
					<script>
						if ( sdAdBlockActive && window.is_euro_union === 0) {
                                                    bizx.cmp.ifConsent('', ['all'], function () {
							$.ajaxSetup({
								cache: true
							});
							$.getScript( "//a.fsdn.com/sd/js/scripts/min/deals-min.js", function(){
								runDealsWidget();
							});
                                                    });
						}
					</script>

					<!-- End Slashdot Deals 6 Best Sellers -->
				</div>
			</div>
		</div>
	</div>
	<!-- SMACKS: END COMMENTS SECTION -->
</div>
<!-- SMACKS: END COMMENTS CONTAINER -->


	

<script type="text/javascript">

$(function(){
$('#firehose-filter').
	focus(function(event){
		gFocusedText = this;
	}).
	blur(function(event){
		if ( gFocusedText === this ) {
			gFocusedText = null;
		}
	});


apply_updates_when(		'at-end', true);
});
</script>

<!-- body end --><!-- footer type=current begin -->

	
	</section>
	
	


	<footer id="fhft" class="grid_24 nf aoc">
		<div id="logo_nf" class="fleft">
			<a href="//slashdot.org"><span>Slashdot</span></a>
		</div>
		<nav role="firehose footer">
			
				
				
				
				

				
						<span class="ind"></span><a class="btn first" href="//developers.slashdot.org/comments.pl?sid=23221784&amp;op=reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=" onclick="D2.replyTo(0); return false;">Post</a>
				
				<a class="btn hide" id="footer_moderate_button">Moderate</a>
				<a class="btn hide" id="footer_moderatorhelp_button">Moderator Help</a>
				<a class="btn hide" id="footer_delete_button" title="Checked comments will be deleted.">Delete</a>
				<script>
					(function($){
						var old_moderate_btn = $("#discussion_moderate_button");
						if (old_moderate_btn.length) {
							var moderate_btn = $("#footer_moderate_button");
							moderate_btn.click(
								function(){old_moderate_btn.click()}
							);
							moderate_btn.removeClass('hide');
						}

						var old_moderatorhelp_btn = $("#discussion_moderatorhelp_button");
						if (old_moderatorhelp_btn.length) {
							var moderatorhelp_btn = $("#footer_moderatorhelp_button");
							moderatorhelp_btn.click(
								function(){old_moderatorhelp_btn.click()}
							);
							moderatorhelp_btn.attr(
								'href', old_moderatorhelp_btn.attr('href')
							);
							moderatorhelp_btn.removeClass('hide');
						}

						var old_delete_btn = $("#discussion_delete_button");
						if (old_delete_btn.length) {
							var delete_btn = $("#footer_delete_button");
							delete_btn.click(
								function(){old_delete_btn.click()}
							);
							delete_btn.removeClass('hide');
						}

						$('#discussion_buttons').addClass('hide');
					})(Slash.jQuery); // (function($){
				</script>
				<ul class="fleft">
					
						<li class="fleft selected">
							<span class="nbutton btn hide link reset" id="more_comments_button">
								<a href="#" onclick="D2.ajaxFetchComments(0,1); return false">
									<span id="more_comments_num_a" class="hide">Get more comments</span>
								</a>
							</span>
						</li>
					
					
						<li class="fleft">
							<span class="loadedcommentcnt">41</span> of <span class="totalcommentcnt">41</span> loaded
						</li>
					
				</ul>
				
					<script type="text/javascript">D2.finishLoading()</script>
				
			

			
			<ul class="fright submitstory">
					<li class="fright">
						<a href="/submit">Submit<span class="opt"> Story</span></a>
					</li>
			</ul>
		</nav>
		


	</footer>
	<section class="bq">
		<blockquote class="msg grid_24" cite="https://slashdot.org">
			<p>"When the going gets tough, the tough get empirical."
		-- Jon Carroll</p>
			<span class="slant"></span>
		</blockquote>
	</section>
	<footer id="ft" class="grid_24">
		<nav class="grid_10" role="footer">
			<ul>
				<li><a href="//slashdot.org/faq">FAQ</a></li>
				<li><a href="//slashdot.org/archive.pl">Story Archive</a></li>
				<li><a href="//slashdot.org/hof.shtml">Hall of Fame</a></li>
				<li><a href="https://slashdotmedia.com/advertising-and-marketing-services/" rel="nofollow">Advertising</a></li>
				<li><a href="https://slashdotmedia.com/terms-of-use/" rel="nofollow">Terms</a></li>
				<li><a href="https://slashdotmedia.com/privacy-statement/" rel="nofollow">Privacy Statement</a></li>
				<li><a href="//slashdot.org/faq/slashmeta.shtml">About</a></li>
				<li><a href="mailto:feedback@slashdot.org">Feedback</a></li>
				<li><a href="#" onclick="set_mobile_pref('mobile',1);return false;">Mobile View</a></li>
				<li><a href="//slashdot.org/blog">Blog</a></li>
				<li><a href="#" id="opt-out-link"></a></li>
				<li><button class="btn opt-out" id="opt-out-button" style="display:none">
					<img src="//a.fsdn.com/sd/ccpa-optout.png" alt="Icon">
					Do Not Sell My Personal Information</button></li>

			</ul>
		</nav>
		<br>
		
		<div class="grid_14 tright tm"><span class="nobr">Copyright &copy; 2024 Slashdot Media. All Rights Reserved.</span></div>

	<div class="modal-custom overlay-custom" id="ccpa-modal" style="max-width:100%">
		<div class="modal-content modal-content-ccpa">
	    	<span class="close" id="modal-close">&times;</span>
			<div class="modal-header" id="ccpa-modal-content-destination"></div>
		</div>
	</div>

	</footer>
	
	<div class="overlay"></div>
<div class="modal-box">
    <a href="#" id="close-modal">Close</a>
    <article class="modal-content">
    </article>
    <footer>
</div>




<div id="modal_cover" class="hide" onclick="hide_modal_box(); return false;"></div>
<div id="modal_box" class="hide">
      <div id="modal_box_content"></div>
      <header class="n">
                  <span class="fadeout"></span>
                  <span class="fadeoutfade"></span>
		  <span class="pf"><a class="ico close" onclick="hide_modal_box(); return false;" href="#"><span>Close</span></a></span>
		  <h3 class="pf"><div id="logo"><a href="//slashdot.org">Slashdot</a></div><span id="preference_title"></span></h3>
      </header>
</div>
	
	<!-- CCM Tag -->
<script type="text/javascript">
bizx.cmp.ifConsent('', ['all','bombora'], function() {
        /*global _ml:true, window */
        _ml = window._ml || {};
        _ml.eid = '771';

        var s = document.getElementsByTagName('script')[0], cd = new Date(), mltag = document.createElement('script');
        mltag.type = 'text/javascript'; mltag.async = true;
        mltag.src = '//ml314.com/tag.aspx?' + cd.getDate() + cd.getMonth() + cd.getFullYear();
        s.parentNode.insertBefore(mltag, s);
});
</script>
<!-- End CCM Tag -->

<script type="text/javascript">
window.google_analytics_uacct = "UA-199823890-2";

var _gaq = _gaq || [];





  _gaq.push(['_setAccount', 'UA-199823890-2']);
  _gaq.push(['_setDomainName', '.slashdot.org']);

	
		_gaq.push(['_addIgnoredRef', 'slashdot.org']);
	


  _gaq.push(['_setCustomVar', 1, 'User Type',  'Anon', 3]);		
	
	_gaq.push(['_setCustomVar', 2, 'Page','article2', 3]);

	



// track beta behavior for user
var betamatches = document.cookie.match(/betagroup=(-?\d+)/);

if(betamatches && betamatches[1]) {
  if(betamatches[1] == -1) {
    _gaq.push(['_setCustomVar', 3, 'Beta-Usage','opt-out', 3]);
  } else {
    _gaq.push(['_setCustomVar', 3, 'Beta-Usage','unredirected', 3]);
  }
}



  _gaq.push(['_trackPageview']);
  _gaq.push(['_trackPageLoadTime']);


if (window.is_euro_union === 0) {
bizx.cmp.ifConsent('', ['all'], function () {
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
});
}
</script>

<!-- CCM GA Push -->
<script>
    if (typeof _ml !== 'undefined' && _ml.us) {
        if (_ml.us.tp && _ml.us.tp.length > 0) {
            ga('set', 'dimension2', _ml.us.tp[0]);
        }
        if (_ml.us.pc && _ml.us.pc.length > 0) {
            ga('set', 'dimension7', _ml.us.pc[0]);
        }
        ga('set', 'dimension3', _ml.us.ind);
        ga('set', 'dimension4', _ml.us.cr);
        ga('set', 'dimension5', _ml.us.cs);
        ga('set', 'dimension6', _ml.us.dm);
        ga('set', 'dimension8', _ml.us.sn);
    }
</script>

<!-- Sticky Ads -->
<script type="text/javascript">
var topBannerViewed = false;
function initSticky(){
	if (SD.Ads.acceptable_ads_active) {
		return;
	}
		
	if($('#div-gpt-ad-728x90_a').length > 0 && $('#div-gpt-ad-300x250_a').length > 0 && window.outerWidth >= 1070 && !sdAdBlockActive){
	    $(window).scroll(function(){
		var y = $(document).scrollTop();
		var z =  y + window.outerHeight;
		var navOffset = 0;
		var offset = [
		    $('.nav-wrap').outerHeight(true),
		    $('.nav-secondary-wrap').outerHeight(true)
		];
		for(row in offset){
		    if(offset[row]) navOffset = navOffset + parseInt(offset[row]);
		}
		$('.adwrap-unviewed').each(function(){
		    var cls = 'adwrap-sticky';
		    var toggleCls = 'adwrap';
				//$('.banner-wrapper').css('height', $('.banner-contain').outerHeight());
		    if($(this).hasClass('railad')) {
			if(topBannerViewed){
			    var topPixels = $(this).offset().top;
			    navOffset += $('.adwrap').outerHeight();
			    if(y >= topPixels && y >= navOffset){
				$('#slashboxes').css('top', 0).css('position','sticky').css('right',13);
			    } else {
				$('#slashboxes').removeAttr('style');
			    }
			}
			return;
		    }
		    var topPixels = $(this).offset().top;
		if(y >= topPixels && y >= navOffset){
			$(this).addClass(cls);
			$(this).removeClass('adwrap');
					if(cls == 'adwrap-sticky') { //top banner
			    topBannerViewed = false;
						$('#slashboxes').css('top',$(this).outerHeight() || 0).css('position','sticky').css('right',13);
					}
		if(topBannerViewed) {
			    //console.log('hereeee');
						$('#slashboxes').css('top', 0).css('position','sticky').css('right',13);
					}
		    }else{
									//console.log('topBannerViewed', topBannerViewed);
			$(this).removeClass(cls);
			$(this).addClass(toggleCls);
			$('#slashboxes').removeAttr('style');
		    }
		});
			if($('.adwrap-viewed-banner').length > 0){
			  //console.log('ads topBanner displayed');
				topBannerViewed = true;
				$('.adwrap-viewed-banner').removeClass('adwrap-unviewed').removeClass('adwrap-sticky').addClass('adwrap');
			}
	    if($('.adwrap-viewed-railad').length > 0){
							//console.log('ads sidebar displayed');
		    $('.adwrap-viewed-railad').removeClass('adwrap-unviewed').removeClass('adwrap-railad-sticky');
				$('#slashboxes').removeAttr('style');
			}
	    });
	}
}
bizx.cmp.ifConsent('', ['all', 'google-ads'], function () {
	if (!sdAdBlockActive) {
		initSticky();
	}
	if (SD.Ads.acceptable_ads_active) {
		// similar to remove* code above in initSticky
		$('.adwrap-unviewed').removeClass('adwrap-unviewed').removeClass('adwrap-sticky').addClass('adwrap').removeClass('adwrap-railad-sticky');
		$('#slashboxes').removeAttr('style');
	}
});
</script>

<!-- Piwik -->
<script type="text/javascript">
  var _paq = _paq || [];
  _paq.push(["setCookieDomain", "*.slashdot.org"]);
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
function initPiwikAndNels() {
  (function() {
    var u="//analytics.slashdotmedia.com/";
    _paq.push(['setTrackerUrl', u+'sd.php']);
    _paq.push(['setSiteId', 40]);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'sd.js'; s.parentNode.insertBefore(g,s);
  })();

    if(window.location.pathname == '/'){
        var nelId = (location.search.split('nel_id=')[1] || '').split('&')[0];
        var url = '/ajax.pl?op=nel';
        if(nelId){
            url += '&nel_id='+nelId;
        }
        $.ajax({
            url: url,
            type: 'POST',
            success: function(html){
                $('#firehoselist article').eq(1).after(html);
            }
        });
    }
    //announcement NEL
    if(document.getElementById('announcementText')){
      $('#announcementText').hide();
      var hlUrl = '/ajax.pl?op=hl_nel';
      if(nelId){
        hlUrl += '&nel_id='+nelId;
      }
      $.ajax({
        url: hlUrl,
        type: 'POST',
        success: function(html){
          if(html.length < 10){
            $('#announcementText').show();
            return;
          }
          $('#announcementText').html(html).show();
        },
        error: function () {
          $('#announcementText').show();
        }
      });
    }
}
bizx.cmp.ifConsent('', ['storage', 'measurement'], initPiwikAndNels);
</script>


<script type="text/javascript">
_linkedin_data_partner_id = "113712";
</script><script type="text/javascript">
if (window.is_euro_union === 0) {
bizx.cmp.ifConsent('', ['all'], function (){
    (function(){var s = document.getElementsByTagName("script")[0];
    var b = document.createElement("script");
    b.type = "text/javascript";b.async = true;
    b.src = "https://snap.licdn.com/li.lms-analytics/insight.min.js";
    s.parentNode.insertBefore(b, s);})();
    });
}
</script>
<noscript>
<img height="1" width="1" style="display:none;" alt="" src="https://dc.ads.linkedin.com/collect/?pid=113712&fmt=gif" />
</noscript>

<!-- Datonics -->
<script type="text/javascript">
if (window.is_euro_union === 0) {
    bizx.cmp.ifConsent('', ['all'], function () {
        bizx.cmp.embedScript("//ads.pro-market.net/ads/scripts/site-143573.js", true);
    });
}
</script>
	<script id="after-content" type="text/javascript">
(function( $, fn, console ){
	$ && fn && $(function(){ fn($, console); });
})(window.jQuery, window.pageload_done, window.console);
</script>
	
	<script type='text/javascript'>
	if(!document.location.href.match(/source=autorefresh/)) {
		document.write('<img src="//slashdot.org/images/js.gif?162">');
	}
</script>
<noscript>
	<img src="//slashdot.org/images/njs.gif?98">
</noscript>
	<div class="busy genericspinner hide"><span>Working...</span></div>

	    <script>
            var regular_opt_out_link = true;

            if (bizx.cmp.show_do_not_sell()) {
                regular_opt_out_link = false;
                 document.getElementById('opt-out-button').setAttribute('style', 'display:inline');
            }

            if (window.is_euro_union === 1) {
                regular_opt_out_link = false;
                var elem = '<a href="#" title="Privacy Choices" onclick="bizx.cmp.promptConsent(); return false;">Privacy Choices</a>';
                document.getElementById('opt-out-link').innerHTML = elem;
            }

            if (regular_opt_out_link == true) {
                var elem = '<a href="https://slashdotmedia.com/opt-out-choices" title="Opt Out" rel="nofollow">Opt Out</a>';
                document.getElementById('opt-out-link').innerHTML = elem;
            }
            var cmp_modal = document.getElementById('ccpa-modal');
            var btn = document.getElementById('opt-out-button');
            var span = document.getElementById('modal-close');

            btn.onclick = function() {
            	cmp_modal.style.display = 'block';
            };

            span.onclick = function() {
            	cmp_modal.style.display = 'none';
            };

         </script>

	<script>
		if(typeof(Storage)!=="undefined"){
			window.scrollTo(0,sessionStorage.scrollPos);
				$(window).scroll(function () {
				//You've scrolled this much:
				sessionStorage.scrollPos = $(window).scrollTop();
			});
		}
		$(function(){
			$('a').click(function(){
				delete sessionStorage.scrollPos;
			})
		});
		// window.onbeforeunload = function () {
		// 	console.log('bakc button clicked');
		// 	delete sessionStorage.scrollPos;
		// }
		window.onpopstate=function() {
			delete sessionStorage.scrollPos;
		}
	</script>
	

	
		<!-- 1x1 story page -->
		<div id='div-gpt-ad-1x1'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-1x1');});</script></div>
	

	</body>
	</html>


	<!-- footer type=current end -->