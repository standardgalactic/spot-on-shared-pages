<!-- html-header type=current begin -->
	
	<!DOCTYPE html>
	
	<html lang="en">
	<head>
	<!-- Render IE9 -->
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

	

	<script id="before-content" type="text/javascript">
(function () {
    if (typeof window.sdmedia !== 'object') {
         window.sdmedia = {};
    }
    if (typeof window.sdmedia.site !== 'object') {
        window.sdmedia.site = {};
    }

    var site = window.sdmedia.site;
    site.rootdir = "//slashdot.org";
}());

var pageload = {
	pagemark: '730746712485597339',
	before_content: (new Date).getTime()
};
function pageload_done( $, console, maybe ){
	pageload.after_readycode	= (new Date).getTime();
	pageload.content_ready_time	= pageload.content_ready - pageload.before_content;
	pageload.script_ready_time	= pageload.after_readycode - pageload.content_ready;
	pageload.ready_time		= pageload.after_readycode - pageload.before_content;
	// Only report 1% of cases.
	maybe || (Math.random()>0.01) || $.ajax({ type: 'POST', data: {
		op: 'page_profile',
		pagemark: pageload.pagemark,
		dom: pageload.content_ready_time,
		js: pageload.script_ready_time
	} });
}
</script>
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"> 
	
		<title>Rust Foundation Reports 20% of Rust Crates Use 'Unsafe' Keyword - Slashdot</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	  
		<meta name="description" content="A Rust Foundation blog post begins by reminding readers that Rust programs &#34;are unable to compile if memory management rules are violated, essentially eliminating the possibility of a memory issue at runtime.&#34;   

But then it goes on to explore &#34;Unsafe Rust in the wild&#34; (used for a small set of acti...">
	    
		<meta name="twitter:card" content="summary">
		<meta name="twitter:site" content="@slashdot">
		<meta name="twitter:domain" content="developers.slashdot.org">
		<meta property="og:url" content="https://developers.slashdot.org/story/24/05/25/2250236/rust-foundation-reports-20-of-rust-crates-use-unsafe-keyword?utm_source=rss1.0mainlinkanon&utm_medium=feed">
	    
		<meta property="og:title" content="Rust Foundation Reports 20% of Rust Crates Use 'Unsafe' Keyword - Slashdot">
		<meta property="og:description" content="A Rust Foundation blog post begins by reminding readers that Rust programs &#34;are unable to compile if memory management rules are violated, essentially eliminating the possibility of a memory issue at runtime.&#34;   

But then it goes on to explore &#34;Unsafe Rust in the wild&#34; (used for a small set of acti...">
	  
	
	
		<meta property="og:image" content="https://a.fsdn.com/sd/topics/programming_64.png">
	
		<meta property="fb:admins" content="100000696822412">
		<meta property="fb:page_id" content="267995220856">
	
		<meta name="viewport" content="width=1000, user-scalable=yes, minimum-scale=0, maximum-scale=10.0" />
		<meta name="apple-mobile-web-app-capable" content="yes">
		<meta name="apple-mobile-web-app-status-bar-style" content="black">
	
		<link rel="canonical" href="https://developers.slashdot.org/story/24/05/25/2250236/rust-foundation-reports-20-of-rust-crates-use-unsafe-keyword">
		
		<link rel="alternate" media="only screen and (max-width: 640px)" href="https://m.slashdot.org/story/428847" >
	

		<link rel="stylesheet" type="text/css" media="screen, projection" href="//a.fsdn.com/sd/classic.ssl.css?e48d135c2113bc48" >
		<!--[if IE 8]><link rel="stylesheet" type="text/css" media="screen, projection" href="//a.fsdn.com/sd/ie8-classic.ssl.css?e48d135c2113bc48" ><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" type="text/css" media="screen, projection" href="//a.fsdn.com/sd/ie7-classic.ssl.css?e48d135c2113bc48" ><![endif]-->
	
	
	



	
	<!--  -->

	
	

	
	<!-- SMACKS: NEW CSS -->
	<link rel="stylesheet" href="//a.fsdn.com/sd/css/app.css?e48d135c2113bc48">

	<script src="//a.fsdn.com/con/js/sftheme/cmp2.js?2024-01"></script>
	<script src="https://slashdot.org/country.js"></script>
	<script>
		window.bizx.cmp.init({
			cmp_id: 12126,
			geo: window,
			gam_gdpr_technical_delivery: true,
			
		});
	</script>
	<link rel="stylesheet" href="//a.fsdn.com/con/css/sftheme/sandiego/cmp.css?2020-06-11" type="text/css">

	<script type='text/javascript'>
var _gaq = _gaq || [];
</script>

<script>
window.SD = {};
window.SD.Ads = {};

bizx.cmp.ifConsent('', ['all'], function () {
    var bt = 'https://btloader.com/tag?o=5098683085881344&upapi=true';
    bizx.cmp.embedScript(bt, true);
    window.addEventListener('AcceptableAdsInit', function (e) {
      if(e.detail) {
        console.log('acceptable ads on');
        SD.Ads.acceptable_ads_active = true;
      } else {
        console.log('acceptable ads off');
        SD.Ads.acceptable_ads_active = false;
      }
    });
});
</script>



         
   
   

<script type="text/javascript" id="pbjs_script" data-dom="https://d3tglifpd8whs6.cloudfront.net"  src="https://d3tglifpd8whs6.cloudfront.net/js/prebid/slash-story/slash-story.min.js"></script>
<script type='text/javascript'>
    /*global performance */
    var googletag = window.googletag || {};
    googletag.cmd = googletag.cmd || [];

		window.SD.Ads.slotsById = {};
		window.SD.Ads.idsByPath = {};

		window.SD.Ads.visibleTime = {};
		window.SD.Ads.Helpers = {};

		//window.SD = SD;

    bizx.cmp.ifConsent({purposes: 'all', vendors: 'prebid'}, function(){
        window.bizxPrebid.Ads.initPrebid(window.bizxPrebid.adUnits);
    }, function() {
		// no 'prebid' consent (e.g. region without prebid consent string support) but try GPT directly
		bizx.cmp.ifConsent({purposes: 'all', vendors: 'google-ads'}, function () {
			bizx.cmp.embedScript('https://securepubads.g.doubleclick.net/tag/js/gpt.js');
		});
	});
</script>

<!-- prep GPT ads -->
<script type='text/javascript'>
(function() {
	function page_type (loc) {
		/*
		only four page types:
		- Story
		- Poll
		- Homepage (/ only)
		- Other (but AdOps wants 'Homepage' again)
		*/
		var path = loc.pathname;
		var just_the_root = /^\/?$/.test(path);
		var story_or_poll = /^\/(story(?=\/)|submission(?=\/)|poll(?=\/|Booth|s\b))/i.exec(path);

		var page_type = just_the_root ? 'homepage'
			: story_or_poll ? story_or_poll[1]
				: 'other'

		// exceptions
		if (page_type.toLowerCase() === 'submission')
			page_type = 'story'; // submissions are like stories, right?
		else if (page_type.toLowerCase() === 'other')
			page_type = 'homepage'; // this one might move out of here

		return page_type;
	}

	function page_section(loc) {
		//var greek = ['alpha', 'beta', 'gamma', 'delta'].join('|');
		//var hostwise = '^([a-z]+)(?:-(?:'+greek+'))?\\.(?:slashdot\\.org|\\.xb\\.sf\\.net)$';
		var pathwise = '^/(?:(recent|popular|blog)|stories/([^/]+))';
		var rootwise = '^\/?$';

		//var hostwisely = new RegExp(hostwise,'i').exec(loc.hostname);
		var pathwisely = new RegExp(pathwise, 'i').exec(loc.pathname);
		var rootwisely = new RegExp(rootwise, 'i').exec(loc.pathname);

		var section = (rootwisely && 'homepage')
			|| (pathwisely && (pathwisely[1] || pathwisely[2]))
			|| ''
		;

		return section.replace(/[^_a-z]/ig, '');
	}

	function single_size(size) {
		return '' + size[0] + 'x' + size[1];
	}

	function sz_sz(sz) {
		var str = '';
		var sizes = [];
		if (sz[0] instanceof Array) {
			for (size in sz) {
				sizes.push(single_size(sz[size]));
			}
			return sizes.join(',');
		} else {
			return single_size(sz);
		}
	}

	function unique_tpc_array(array1, array2) {
		var j = array1.concat(array2);
		j.forEach(function (v, i, a) {
			a[i] = v.replace(/[^_a-z]/ig, '');
		});
		return j.filter(function (v, i, a) {
			return v != '' && a.indexOf(v) === i;
		});
	}

	/* LEGEND:
		- 'sz' = "size"
		- 'npt' = "no page type" in ad unit name
	*/
	var tags = {
		'728x90_A': {'sz': [[728, 90], [970, 90], [970, 250], [980, 66]]},
		'728x90_B': {'sz': [728, 90]},
		'728x90_C': {'sz': [728, 90], 'skip': {'homepage': 1}},
		'HubIcon_200x90_A': {'sz': [[200, 90], [220, 90]]},
		'PowerSwitch_980x66_A': {'sz': [980, 66], 'skip': {'homepage': 1}},
		'PollPeel': {'sz': [200, 90], 'skip': {'homepage': 1}},
		//'VideoWidget_300x250': { 'sz': [300, 250], 'npt': 1 },
		'300x250_A': {'sz': [[300, 250], [300, 600], [300, 1050]]},
		'300x250_B': {'sz': [[300, 250], [300, 600]]},
		'300x250_C': {'sz': [[300, 250], [300, 600]]},
		'300x250_D': {'sz': [[300, 250], [300, 600]]},
		'Pulse_300x600_A': {'sz': [300, 600]},
		//'Polls_Detail_300x250_A': { 'sz': [[300, 250], [300, 600]], 'npt': 1 },
		//'Poll_300x250_A': { 'sz': [[300, 250], [300, 600]], 'npt': 1 },
		//'SD_Story_1x1': { 'sz': [1, 1] },
		'1x1': {'sz': [1, 1]}
	};

	//var network_path = '/41014381/Slashdot/';
	var network_path = '/41014381/Slashdot/';
	var tag_name_prefix = 'SD';
	var tag_name_linkage = '_';
	var tag_name_pagetype = page_type(location);
	var tag_topic = page_section(location);
	if (tag_name_pagetype == 'poll') {
		tag_name_pagetype = 'Poll';
	}
	var before_tag_pagetyped = network_path
		+ tag_name_prefix
		+ tag_name_linkage
		+ tag_name_pagetype
		+ tag_name_linkage
	;
	var before_tag_pagetypeless = network_path
		+ tag_name_prefix
		+ tag_name_linkage
		/* + tag_name_pagetype */
		/* + tag_name_linkage */
	;

		//can be safely called
		googletag.cmd.push(function () {

			function remove_sticky_top() {
				setTimeout(function () {
					$('#div-gpt-ad-728x90_a').parent('div').addClass('adwrap-viewed-banner');
					$('#div-gpt-ad-728x90_a').addClass('viewableImpression');
				}, 1000);
			}

			function remove_sticky_railad() {
				setTimeout(function () {
					$('#slashboxes .adwrap-unviewed').addClass('adwrap-viewed-railad');
					$('.railad').addClass('viewableImpression');
				}, 1000);
			}

			function viewable_imp(slot) {
				for (var i in slot) {
					remove_sticky_top();
					remove_sticky_railad();
					if (typeof slot[i] !== 'string') continue;
					switch (slot[i]) {
						//case "/41014381/Slashdot/SD_homepage_728x90_A":
						//case "/41014381/Slashdot/SD_story_728x90_A":
						//case "/41014381/Slashdot/SD_Poll_728x90_A":
						//case "/41014381/Slashdot/SD_homepage_728x90_Ref_A":
						//case "/41014381/Slashdot/SD_story_728x90_Ref_A":
						//case "/41014381/Slashdot/SD_Poll_728x90_Ref_A":
						//remove_sticky_top();
						//break;
						//case "/41014381/Slashdot/SD_homepage_300x250_A":
						//case "/41014381/Slashdot/SD_story_300x250_A":
						//case "/41014381/Slashdot/SD_Poll_300x250_A":
						//case "/41014381/Slashdot/SD_homepage_300x250_Ref_A":
						//case "/41014381/Slashdot/SD_story_300x250_Ref_A":
						//case "/41014381/Slashdot/SD_Poll_300x250_Ref_A":
						//remove_sticky_railad();
						//break;
					}
					//if(slot[i] === "/41014381/Slashdot/SD_homepage_728x90_A") remove_sticky_top();
					//if(slot[i] === "/41014381/Slashdot/SD_homepage_300x250_A") remove_sticky_railad();
				}
			}

			function define_me_a_slot(tag) {
				if (tags[tag].skip && tags[tag].skip[tag_name_pagetype])
					return;
				var sandbox_regex = /\.xb\.sf\.net$/i;
				var full_name = tags[tag].npt  // "no page type"
					? before_tag_pagetypeless + tag
					: before_tag_pagetyped + tag
				;
				var div_id = 'div-gpt-ad-' + tag.toLowerCase();
				// extend jQuery and get URL query params
				jQuery.extend({
					getQueryParameters: function (str) {
						return (str || document.location.search).replace(/(^\?)/, '').split("&").map(function (n) {
							return n = n.split("="), this[n[0]] = n[1], this
						}.bind({}))[0];
					}
				});

				var queryParams = $.getQueryParameters();

				if (queryParams.source === 'autorefresh') {
					full_name = full_name.replace(/(\d+x\d+)/, '$1_Ref');
					//console.log('TAG NAME: ', full_name);
				}

				var slot = googletag.defineSlot(
					full_name,
					tags[tag].sz,
					div_id
				);

				service = slot.addService(googletag.pubads());

				window.SD.Ads.slotsById[div_id] = slot;
				window.SD.Ads.idsByPath[full_name] = div_id;

				service.setTargeting('sz', tags[tag].sz);

				
				var frontend_tpc = tag_topic.split(",");
				var backend_tpc = [ "programming", "security", "developers" ];

				var tpc_final = unique_tpc_array(frontend_tpc, backend_tpc);
				service.setTargeting('tpc', tpc_final);
				if (location.hostname.match(sandbox_regex)) {
					service.setTargeting('test', 'adops');
				}

			}

		for (tag in tags) {
			define_me_a_slot(tag, false);
		}


			googletag.pubads().addEventListener('slotVisibilityChanged', window.SD.Ads.visibilityChangedTracker);


		googletag.pubads().addEventListener('impressionViewable', function(event) {
			viewable_imp(event.slot);
		    });

                googletag.pubads().setTargeting('requestSource', 'GPT');
		googletag.pubads().enableAsyncRendering();
		

		googletag.pubads().collapseEmptyDivs();
		window.bizxPrebid.SAFEFRAMES = true;
		window.SD.Ads.setupAdRefresh();
		bizxPrebid.Ads.pushToGoogle();
		googletag.enableServices();
	});
})();


/* Ad-Refresh code */
window.SD.Ads.visibilityChangedTracker = function(event) {
	var id = event.slot.getSlotElementId();
	if (!window.SD.Ads.visibleTime.hasOwnProperty(id)) {
		window.SD.Ads.visibleTime[id] = {
			visible: false,
			prevVisibleTotal: 0,
			wasVisibleBeforePageBgd: false,
			reloadCount: 0
		};
	}
	var timeinfo = window.SD.Ads.visibleTime[id];
	if (event.inViewPercentage >= 50 && !document.hidden) {
		if (!timeinfo.visible) {
			timeinfo.visible = performance.now();
		}
	} else {
		if (timeinfo.visible) {
			timeinfo.prevVisibleTotal += performance.now() - timeinfo.visible;
			timeinfo.visible = false;
		}
	}
};

window.SD.Ads.setupAdRefresh = function() {
	document.addEventListener('visibilitychange', function () {
		for (var id in window.SD.Ads.visibleTime) {
			if (window.SD.Ads.visibleTime.hasOwnProperty(id)) {
				var timeinfo = window.SD.Ads.visibleTime[id];
				if (document.hidden) {
					timeinfo.wasVisibleBeforePageBgd = !!timeinfo.visible;
					if (timeinfo.visible) {
						timeinfo.prevVisibleTotal += performance.now() - timeinfo.visible;
						timeinfo.visible = false;
					}
				} else if (!document.hidden && timeinfo.wasVisibleBeforePageBgd) {
					timeinfo.visible = performance.now();
				}
			}
		}
	}, false);

	// after 30 sec, start checking every second for reload
	var LIMIT_MS = 30000;
	setTimeout(function () {
		//
		setInterval(function () {
			if (document.hidden) {
				return;
			}
			for (var id in window.SD.Ads.visibleTime) {
				if (window.SD.Ads.visibleTime.hasOwnProperty(id)) {
					var timeinfo = window.SD.Ads.visibleTime[id];
					if (timeinfo.visible &&
						timeinfo.prevVisibleTotal + (performance.now() - timeinfo.visible) >= LIMIT_MS &&
						timeinfo.reloadCount < 50
					) {
						timeinfo.reloadCount++;
						timeinfo.visible = false;
						timeinfo.prevVisibleTotal = 0;
						window.SD.Ads.Helpers.refreshBids([id]);
					}
				}
			}
		}, 1000);
	}, LIMIT_MS);
};

window.SD.Ads.Helpers.refreshBids = function (reloadIds) {
		console.log('AD REFRESH: refreshBids', reloadIds);
		pbjs.que.push(function () {
			for (var i = reloadIds.length-1; i >= 0; i--) {
				var id = reloadIds[i];
				// clear out winner status from earlier auctions
				if (bizxPrebid.Ads.prebidWinners[id]) {
					delete bizxPrebid.Ads.prebidWinners[id];
				}
				// if has complement (hubicon), remove it since they are just house ads and can cause funky layouts if this leaderboard is refreshed to a different size
				var path = window.SD.Ads.slotsById[id].getAdUnitPath();
				/*var complement = gptadComplements[path];
				if (complement) {
					var complement_shortname = complement[0];
					var complement_path = "/41014381/SD/" + complement_shortname;
					var slot = window.SD.Ads.slotsById[window.SD.Ads.idsByPath[complement_path]];
					if (slot) {
						googletag.destroySlots([slot]);
						var $wrappedAd = $(window.SD.Ads.Helpers.getContainerIDFromPath(complement_path));
						$wrappedAd.remove();
						delete gptadComplements[path];
					}
				}*/

			}

			pbjs.requestBids({
				timeout: window.bizxPrebid.PREBID_TIMEOUT,
				adUnitCodes: reloadIds,
				bidsBackHandler: function () {
					var reloadSlots = reloadIds.map(function(id) { return window.SD.Ads.slotsById[id]; });

					// clear out previous sizing attrs, as they may change after refresh
/*
					for (var i = 0; i < reloadSlots.length; i++) {
						var $wrappedAd = $(window.SD.Ads.Helpers.getContainerIDFromPath(reloadSlots[i].getAdUnitPath()));
						var classes = $wrappedAd.attr('class').split(' ');
						for (var j = 0; j < classes.length; j++) {
							if (classes[j].indexOf('sz_') >= 0) {
								$wrappedAd.removeClass(classes[j]);
							}
						}
					}
*/
					pbjs.setTargetingForGPTAsync(reloadIds);
					googletag.pubads().refresh(reloadSlots);
				}
			});
		});
	}
</script>

<!-- CrossPixel -->
<script type="text/javascript">
if (window.is_euro_union === 0) {
    bizx.cmp.ifConsent('', ['all'], function(){
        try{(function(){ var cb = new Date().getTime(); var s = document.createElement("script"); s.defer = true; s.src = "//tag.crsspxl.com/s1.js?d=2397&cb="+cb; var s0 = document.getElementsByTagName('script')[0]; s0.parentNode.insertBefore(s, s0); })();}catch(e){}
    });
}
</script>




<!-- AdBlock Check -->
<script>
var sdAdBlockActive = true;
</script>
<script async src="//a.fsdn.com/sd/js/scripts/adsbanner.js?e48d135c2113bc48"></script>
</head>

<body class="anon firehose ">

	
	<script src="//a.fsdn.com/sd/all-minified.js?e48d135c2113bc48" type="text/javascript"></script>
	
	
	<script type="text/javascript">
(function(){
var regexp=/\s*(?:\d+|many)\s+more\s*/i;

	
	var auto_more_count = 1;

	function auto_more(){
		var $more_link = $('#more-experiment a');
		$more_link.each(function(){
			var $lastitem = $('#firehoselist>article.fhitem:visible:last');
			if ( Bounds.intersect(window, $lastitem) ) {
			
			
				!--auto_more_count && (auto_more=undefined);
				// don't allow a call till the next paginate gets built and |more_possible|
				$(document).unbind('scroll', call_auto_more);
			}
		});
	};

	function call_auto_more(){ auto_more && auto_more(); }
	

$('#more-experiment a').
	live('more-possible', function( event ){
		var $more_link=$(this);
		if ( regexp.test($more_link.text()) ) {
		
			$(document).bind('scroll', call_auto_more);
		} else {
			$(document).unbind('scroll', call_auto_more);
		
		}
	});
})();
</script>
	<!--[if lt IE 9]><script src="//a.fsdn.com/sd/html5.js"></script><![endif]-->
	
	
	<!-- index2_variant ||-->
		<script>
	if (window.is_euro_union === 0) {
            bizx.cmp.ifConsent('', ['all'], function () {
                (function (s,o,n,a,r,i,z,e) {s['StackSonarObject']=r;s[r]=s[r]||function(){
                (s[r].q=s[r].q||[]).push(arguments)},s[r].l=1*new Date();i=o.createElement(n),
                z=o.getElementsByTagName(n)[0];i.async=1;i.src=a;z.parentNode.insertBefore(i,z)
                })(window,document,'script','https://www.stack-sonar.com/ping.js','stackSonar');
                stackSonar('stack-connect', '66');
            });
        }
	</script>
        <!-- jobbio !-->

        <script type="text/javascript">
        bizx.cmp.ifConsent('', ['all'], function () {
        var j_script = document.createElement('script')
        j_script.setAttribute('src', 'https://widgets.jobbio.com/partner_fluid_widgets_v1.6.1/display.min.js')
        j_script.setAttribute('id','jobbio-display-script')
        j_script.setAttribute('async','')
        j_script.onload = function handle(){
        if (document.getElementById('bottom-masonry')){
            jobbio_display.widget({
                slug: 'slashdot-jobs',
                container: 'bottom-masonry',
                style: 'masonry',
                count: 6,
                type: 'multiple',
                content: 'jobs',
                searchTerm: '',
            });
        }

        jobbio_display.widget({
            slug: 'slashdot-jobs',
            container: 'horizontal',
            style: 'horizontal',
            count: 4,
            type: 'multiple',
            content: 'jobs',
            searchTerm: '',
        })
        if (document.getElementById('sidebar-j')){
            jobbio_display.widget({
                slug: 'slashdot-jobs',
                container: 'sidebar-j',
                style: 'sidebar',
                count: 6,
                type: 'multiple',
                content: 'jobs',
                searchTerm: '',
            });
        }

        }
        document.head.appendChild(j_script);
        })
        </script>
		<!-- html-header type=current end --><!-- header type=current begin -->
	
	
	
	<link rel="top"       title="News for nerds, stuff that matters" href="//slashdot.org/" >
<link rel="search"    title="Search Slashdot" href="//developers.slashdot.org/search.pl">
<link rel="alternate" title="Slashdot RSS" href="https://rss.slashdot.org/Slashdot/slashdotDevelopers" type="application/rss+xml">
	<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">

	
		<div id="top_parent"></div>
		<a name="topothepage"></a>
		
		<div class="container">
			<div class="nav-wrap">
				<nav class="nav-primary" role="navigation" aria-label="Global Navigation">
					<h1 class="logo">
	<a href="//slashdot.org"><span>Slashdot</span></a>
</h1>

<ul class="nav-site">
	<li><a href="//slashdot.org"><i class="icon-book" title="Stories"></i><span>Stories</span></a></li>
	<li>
		<ul class="filter-firehose">
			<li class="nav-label">Firehose <i class="icon-angle-right"></i></li>
			<li><a href="//slashdot.org/recent">All</a></li>
			<li><a href="//slashdot.org/popular">Popular</a></li>
		</ul>
	</li>
	<li><a href="//slashdot.org/polls"><i class="icon-chart-bar" title="Polls"></i><span>Polls</span></a></li>

	<!--
	<li><a href="//ask.slashdot.org"><i class="icon-question-circle"></i><span>Ask</span></a></li>
	
	<li><a href="//events.slashdot.org"><i class="icon-calendar"></i><span>Events</span></a></li>
	-->
	<li><a href="https://slashdot.org/software/"><i class="sd-mini"></i> <span>Software</span></a></li>
        <li><a href="//slashdot.org/newsletter"><span>Newsletter</span></a></li>
        <li><a href="//slashdot.org/jobs" rel="nofollow"><span>Jobs</span></a></li>
</ul>
<a href="//slashdot.org/submission" class="btn btn-success">Submit</a>
				</nav>
				<nav class="nav-user" role="navigation" aria-label="user access and account controls">
					<form id="search" class="form-inline nav-search-form" method="get" action="//slashdot.org/index2.pl">
<!-- //developers.slashdot.org/index2.pl" -->
	<div class="form-group">
		<label class="sr-only" for="sitesearch">Search Slashdot</label>
		<div class="input-group">
			<input type="text" id="" class="" name="fhfilter" value="" placeholder="Search">
		</div>
	</div>
	<button type="submit" class="btn icon-search"></button>
</form>
<ul class="user-access">
	
		
			<li >
				<a href="//slashdot.org/my/login"  onclick="show_login_box(); return false;"><i class="icon-login"></i><span> Login</span></a>
				
			</li>
		
	
		
			<li class="nav-label">or</li>
		
	
		
			<li >
				<a href="//slashdot.org/my/newuser"  ><i class="icon-user-add"></i><span> Sign up</span></a>
				
			</li>
		
	
</ul>
				</nav>
			</div>
			<div class="nav-secondary-wrap">
				<nav class="nav-secondary" role="secondary-navigation">
	<ul>
		<li class="nav-label">Topics: </li>
		<li><a href="//devices.slashdot.org">Devices</a></li>
		<li><a href="//build.slashdot.org">Build</a></li>
		<li><a href="//entertainment.slashdot.org">Entertainment</a></li>
		<li><a href="//technology.slashdot.org">Technology</a></li>
		<li><a href="//slashdot.org/?fhfilter=opensource">Open Source</a></li>
		<li><a href="//science.slashdot.org">Science</a></li>
		<li><a href="//yro.slashdot.org">YRO</a></li>
		<!-- <li><a href="//slashdot.org/topics.pl">more...</a></li> -->
	</ul>
</nav>
<nav class="nav-social" role="social navigation">
	<ul>
		<li class="nav-label">Follow us:</li>
		<li><a href="https://rss.slashdot.org/Slashdot/slashdotMain" target="_blank" rel="nofollow"><i class="icon-rss-squared"></i><span class="sr-only">RSS</span></a></li>
		<li><a href="https://www.facebook.com/slashdot" target="_blank" rel="nofollow"><i class="icon-facebook-squared"></i><span class="sr-only">Facebook</span></a></li>
		<li><a href="https://www.linkedin.com/company/slashdot" target="_blank" rel="nofollow"><i class="icon-linkedin-squared"></i><span class="sr-only">LinkedIn</span></a></li>
		<li><a href="https://twitter.com/slashdot" target="_blank" rel="nofollow"><i class="icon-twitter-squared"></i><span class="sr-only">Twitter</span></a></li>
		<li><a href="https://www.youtube.com/channel/UCsW36751Gy-EAbHQwe9WBNw" target="_blank" rel="nofollow"><i class="icon-youtube-squared">
                    <!-- width="1792" height="1792" -->
                    <svg viewBox="0 260 1792 1260" xmlns="http://www.w3.org/2000/svg"><path d="M711 1128l484-250-484-253v503zm185-862q168 0 324.5 4.5t229.5 9.5l73 4q1 0 17 1.5t23 3 23.5 4.5 28.5 8 28 13 31 19.5 29 26.5q6 6 15.5 18.5t29 58.5 26.5 101q8 64 12.5 136.5t5.5 113.5v176q1 145-18 290-7 55-25 99.5t-32 61.5l-14 17q-14 15-29 26.5t-31 19-28 12.5-28.5 8-24 4.5-23 3-16.5 1.5q-251 19-627 19-207-2-359.5-6.5t-200.5-7.5l-49-4-36-4q-36-5-54.5-10t-51-21-56.5-41q-6-6-15.5-18.5t-29-58.5-26.5-101q-8-64-12.5-136.5t-5.5-113.5v-176q-1-145 18-290 7-55 25-99.5t32-61.5l14-17q14-15 29-26.5t31-19.5 28-13 28.5-8 23.5-4.5 23-3 17-1.5q251-18 627-18z"/></svg>
                </i><span class="sr-only">Youtube</span></a></li>
		<li><a href="https://mastodon.cloud/@slashdot" target="_blank" rel="me nofollow"><i class="icon-mastodon-squared">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M433 179.11c0-97.2-63.71-125.7-63.71-125.7-62.52-28.7-228.56-28.4-290.48 0 0 0-63.72 28.5-63.72 125.7 0 115.7-6.6 259.4 105.63 289.1 40.51 10.7 75.32 13 103.33 11.4 50.81-2.8 79.32-18.1 79.32-18.1l-1.7-36.9s-36.31 11.4-77.12 10.1c-40.41-1.4-83-4.4-89.63-54a102.54 102.54 0 0 1-.9-13.9c85.63 20.9 158.65 9.1 178.75 6.7 56.12-6.7 105-41.3 111.23-72.9 9.8-49.8 9-121.5 9-121.5zm-75.12 125.2h-46.63v-114.2c0-49.7-64-51.6-64 6.9v62.5h-46.33V197c0-58.5-64-56.6-64-6.9v114.2H90.19c0-122.1-5.2-147.9 18.41-175 25.9-28.9 79.82-30.8 103.83 6.1l11.6 19.5 11.6-19.5c24.11-37.1 78.12-34.8 103.83-6.1 23.71 27.3 18.4 53 18.4 175z"/></svg>
				</i><span class="sr-only">Mastodon</span></a></li>
		<li><a href="//slashdot.org/newsletter" target="_blank" rel="nofollow"><i class="icon-mail-squared"></i><span class="sr-only">Newsletter</span></a></li>
	</ul>
</nav>
			</div>
		</div>

		<section>
		
			<div class="message-bar" id="firehose-message-tray">
				<span class="icon-quote-left"></span>
				<p>
					
						
						Please <strong><a href="//developers.slashdot.org/login.pl">create an account</a></strong> to participate in the Slashdot moderation system
					
				</p>
			</div>
		
		
			<div id='embbeded_login_modal' class="hide">
<form action="https://slashdot.org/my/login" method="post" onsubmit="if (global_returnto) { this.returnto.value = global_returnto }" class="embedded"><fieldset style="-webkit-border-radius:10px 10px 0 0;border-radius:10px 10px 0 0;-moz-border-radius:10px 10px 0 0">
<div style='height:25px;'>&nbsp;</div>
    <input type="hidden" name="returnto" value="">
    <input type="hidden" name="op" value="userlogin">
    <p>
        <label class="fleft" for="unickname">Nickname:</label>
        <input type="text" name="unickname" value="">
    </p>
    <p>
        <label class="fleft" for="upasswd">Password:</label>
        <input type="password" name="upasswd">
    </p>
    <label class="checkbox"><input type="checkbox" name="login_temp" value="yes"> Public Terminal</label>
    <br>
    <hr>
    <input type="submit" name="userlogin" value="Log In" class="fno"> <a href="//slashdot.org/my/mailpassword" class="btn link" onclick="getModalPrefs('sendPasswdModal', 'Retrieve Password', 1); return false;">Forgot your password?</a>
</fieldset></form>

<div class="actions">
 <a class="ico close" onclick="hide_login_slider();" href=""><span>Close</span></a>
</div>
</div>
		
		
			<div class="banner-wrapper">
				<div class="adwrap adwrap-unviewed banner-contain">
					
					<div id='div-gpt-ad-728x90_a'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-728x90_a');});</script></div>
					<div id='div-gpt-ad-hubicon_200x90_a'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-hubicon_200x90_a');});</script></div>
				</div>
			</div>
		
		<a name="main-articles"></a>
	
	<!-- header type=current end --><!-- body begin -->







	

	<style type="text/css">
menu, menu * {
	text-decoration:none;
}

menu[type=context] {
	display:none;
	position:absolute;
	z-index:10000;
}

menu[type=context]:not(.brief) {
	background-color:#dfdfdf;
	margin:0;
	padding:2px 0.5em;
	border-style:solid;
	border-width:1px;
	border-color:#eeeeee #aaaaaa #aaaaaa #eeeeee;
	-moz-border-radius-topright:.7em;
	-webkit-border-top-right-radius: 0.7em 0.7em;
}

menu.full[type=context] > a.slash-hover:first-child {
	-moz-border-radius-topright:.6em;
	-webkit-border-top-right-radius: 0.6em 0.6em;
}



menu.brief[type=context] > a {
	-moz-border-radius:.6em;
	-webkit-border-radius: 0.6em;
	color:#ffffff;
	background-color:#000000;
}

/*
span.briefmenu a.tag:not(.datatype) {
    padding-left:.5em;
}
*/




/* #tag-menu a, #feedback-menu a  { */
menu.tag-menu-admin a {
	display:list-item;
	list-style:none;
	text-align:left;
	font-weight:bold;
	color:black;
	padding:0.1em 0.5em;
	margin:-0.1em -0.5em;
	cursor:pointer;
}


.tags .edit-bar { position:relative; }
article aside .share .addthis_toolbox { display:block; width:60px; float:left; }
article aside.view_mode .share { min-width:120px; padding-top:.5em; }
#firehose.list article header h2 {padding-left: 20px; !important}
.novote .vote { display:none; }

.vote > a, .votedup > a, .voteddown > a {
	display:inline-block;
	height:22px;
	width:22px;
	margin: 2px 10px 0 0;
	color:rgb(255,255,255);
	text-decoration:none;
	line-height:22px;
	text-align:center;
	font-weight:bold;
	font-size:14px;
	border-width:1px;
	border-style:solid;
	border-color:rgba(0,0,0,0.5);
}

.vote > a, .votedup > a, .voteddown > a {color:rgb(0,0,0);}

article.fhitem-submission h2 .vote > a, article.fhitem-submission h2 .votedup > a, article.fhitem-submission h2 .voteddown > a { border-color:rgba(0,0,0,0.15); }
.vote .up, .vote .down, .votedup .up, .votedup .down, .voteddown .up, .voteddown .down { border-radius: 4px; -moz-border-radius: 4px; -webkit-border-radius: 4px; /* text-shadow:0 0 2px #000000; }*/}
article:not(.fhitem-story) .vote .up,article:not(.fhitem-story) .vote .down,article:not(.fhitem-story) .votedup .up,article:not(.fhitem-story) .votedup .down,article:not(.fhitem-story) .voteddown .up,article:not(.fhitem-story) .voteddown .down { /*text-shadow:none !important; */}
.voteddown .down, .votedup .up { margin-right: 10px; text-indent:2px; line-height:24px; }
article:not(.fhitem-story) .votedup .up,article:not(.fhitem-story) .voteddown .down {background: rgb(174,174,174);background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(174,174,174)), to(rgb(193,193,193)));background-image: -moz-linear-gradient(100% 100% 90deg,rgb(193,193,193), rgb(174,174,174) 100%);color:rgb(0,0,0);}
article.fhitem-story .votedup .up,article.fhitem-story .voteddown .down {background: rgb(0,66,66);background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(0,53,53)), to(rgb(0,102,102)));background-image: -moz-linear-gradient(100% 100% 90deg,rgb(0,102,102), rgb(0,53,53) 100%);}




#tag-menu span.var-tag {
font-weight:normal;
color:#444444;
}

menu.reasons-menu a {
padding:0 .25em 0 .25em;
font-size:80%;
-moz-border-radius:.5em;
-webkit-border-radius:.5em;
cursor:pointer;
}

menu.reasons-menu a:hover {
background:rgb(153,153,153);
background:-moz-linear-gradient(100% 100% 90deg, rgb(102,102,102), rgb(153,153,153) 70%) repeat scroll 0 0 rgb(102,102,102);
background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(153,153,153)), to(rgb(102,102,102)));
color:#fff;
text-decoration:none;
font-weignt:normal;
}

article.fhitem-story menu.reasons-menu a:hover {
background:#002323 !important;
background:-moz-linear-gradient(100% 100% 90deg, #002323, #005353 70%) repeat scroll 0 0 #002323 !important;
background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#005353), to(#002323)) !important;
}


menu.reasons-menu {
	display:none;
	margin:0;
	padding:0;
}

div.fhitem h3 menu.reasons-menu {
margin:0.25em 0 0;
}

div.fhitem h3 menu.reasons-menu a.tag {
font-size:.8em;
}

#tag-menu a.slash-hover,
#feedback-menu a.slash-hover,

.tag-display span.tag:hover,
.tag-display span.tag.trigger {
	color:white;
	background-color:rgb(0, 85, 85);
}

#tag-menu a.slash-hover span.var-tag {
	color:#eee;
}

.tag-entry.default {
        color:#ccc;
}

.brief .nix {
	margin-top:-1.35em;
	margin-left:0px;
	margin-top:-1.15em;
	text-decoration:none;
	line-height:1.35em;
	padding:0 2px;
	-moz-border-radius:.6em 0 0 .6em;
	-webkit-border-radius:.6em 0 0 .6em;
	-o-border-radius:.6em 0 0 .6em;
	border-radius:.6em 0 0 .6em;
    color:#fff !important;
    background:transparent !important;
}

.brief .nix:hover {
    background:rgb(153,153,153) !important;
    background:-moz-linear-gradient(100% 100% 90deg, rgb(102,102,102), rgb(153,153,153) 70%) repeat scroll 0 0 rgb(102,102,102) !important;
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(153,153,153)), to(rgb(102,102,102))) !important;
}

</style>

<menu id="nix-reasons" style="display:none">
	<a class="tag">binspam</a><a class="tag">dupe</a><a class="tag">notthebest</a><a class="tag">offtopic</a><a class="tag">slownewsday</a><a class="tag">stale</a><a class="tag">stupid</a>
</menu>
<menu id="nod-reasons" style="display:none">
	<a class="tag">fresh</a><a class="tag">funny</a><a class="tag">insightful</a><a class="tag">interesting</a><a class="tag">maybe</a>
</menu>
<menu id="comment-nix-reasons" style="display:none">
	<a class="tag">offtopic</a><a class="tag">flamebait</a><a class="tag">troll</a><a class="tag">redundant</a><a class="tag">overrated</a>
</menu>
<menu id="comment-nod-reasons" style="display:none">
	<a class="tag">insightful</a><a class="tag">interesting</a><a class="tag">informative</a><a class="tag">funny</a><a class="tag">underrated</a>
</menu>

<menu id="tag-nod-reasons" style="display:none">
	<a class="tag">descriptive</a>
</menu>
<menu id="feedback-menu" class="tag-menu-admin" type="context">
	<a class="tag">typo</a><a class="tag">dupe</a><a class="tag">error</a>
</menu>
<menu id="tag-menu" class="tag-menu-admin none" type="context">

<!--	<a data-op="!" class="nix">!<span class="var-tag hide"></span></a>-->

</menu>

<script type="text/javascript">
$(function(){
var $CURRENT_MENU, $TAG_MENU=$('#tag-menu'), NOTNOT=/^!!/, IE7=/^7\.0/, TAG_PREFIX=/^\/tag\//;

function get_tag_name( $tag ){
	return ($tag.attr('href') || '').replace(TAG_PREFIX, '') || $tag.text().toLowerCase();
}

function trigger_menu( e, selector, $menu, menu_content ){
	var $target=$(original_target(e, selector)), in_use=$target.is('.trigger');
	if ( $CURRENT_MENU ) {
		$CURRENT_MENU.menu('cancel', e);
		$CURRENT_MENU = null;
	}

	if ( !in_use ) {
		menu_content && $menu.stop(true, true).hide().html(menu_content);
		($CURRENT_MENU=$menu).menu('context', e);
	}
	return !in_use;
}

function open_menu( trigger, $menu ){
	var $trigger=$(trigger), $fhitem=$trigger.closest('.fhitem');
	$fhitem.length && user_intent('interest', $fhitem[0]);

	$menu.appendTo(document.body).css({ opacity:0 }).show();

	var 	right	= $fhitem.offset().left + $fhitem.width(),
		global	= $trigger.offset(),
		local	= $menu.offsetParent().offset();

	// Ugly IE position hack required:
	$.browser.msie && IE7.test($.browser.version) && (local.top = 0);

	// pin the menu (horizontally) on-screen
	global.left = Math.min(global.left, right-$menu.width());

	$trigger.addClass('trigger');
	$menu.css({
		position:	'absolute',
		top:		global.top - local.top + $trigger.height(),
		left:		global.left - local.left,
		opacity:	1
	});
}

function close_menu( trigger, $menu ){
	$menu.hide();
	$(trigger).removeClass('trigger');
	($CURRENT_MENU===$menu) && ($CURRENT_MENU=false);
}

/* T2 tag context-menu */
var $TAG_MENU=$('#tag-menu'), NOTNOT=/^!!/;


    var user_is_admin = 0;



$('a[rel=tag]').live('mousedown',function(ea){
    window.open(this.href);
    return false;
})

$('.tag-bar .disagree').live('mousedown',function(ee){
	var fhitem = $(original_target(ee)).closest('.fhitem')[0],
		command = ('!' + $(original_target(ee)).attr("data-tag")).replace(NOTNOT, '');
    try { Tags.submit(fhitem, command); } catch ( err ) {  }
    return false;
})



$('a[rel=tag]').
	live('mousedown', function( e ){
        
            return true;
        

	}).
	live('click', function( e ){
		if ( !logged_in ) {
			var	target	= original_target(e),
				tag	= $(target).text();
			addfhfilter(tag);
		}
		e.preventDefault();
		return false;
	});

$TAG_MENU.menu({
	cssNamespace: 'slash',
	liveTriggers: true,
	clickDuration: 300,

	start: function( e, ui ){
		var	$tag	= $(ui.trigger),
			tag	= get_tag_name($tag),
			context	= firehose_settings && firehose_settings.viewtitle;

		// Insert the tagname into the menu items where needed.
		$TAG_MENU.find('span.var-tag').text(tag);
		$TAG_MENU.find('a.nix').attr('title','not ' + tag);


			// non-admins may only delete their own tags
		$TAG_MENU.find('a[data-op="-"]').toggle($tag.is('.my'));
	

		// *tagname* in *viewtitle*
		$TAG_MENU.find('a[data-op="="]').toggle(!!context);
		context && $TAG_MENU.find('span.var-view').text(context);

		open_menu($tag, $TAG_MENU);
	},

	select: function( e, ui ){
		var	$tag	= $(ui.trigger),
			tag	= get_tag_name($tag),
			op	= $(ui.event.target).attr('data-op'),
			fhitem,
			command;

		// Global for positioning other things.
		$related_trigger = $tag;

		switch ( op ) {
			case '=':
				addfhfilter(tag);
				break;

			default:
				fhitem = $tag.closest('.fhitem')[0];
				command = (op + tag).replace(NOTNOT, '');
				try { Tags.submit(fhitem, command); } catch ( err ) {  }
				break;
		}
	},

	stop: function( e, ui ){ close_menu(ui.trigger, $TAG_MENU); }
});




/* T2 feedback context-menu */



/* T2 datatype context-menu (admin-only) */






});
</script>

	

<!-- SMACKS: BEGIN STORY CONTENT -->
<div class="container">
	<!--SMACKS: BEGING CENTER COLUMN -->
	<div class="main-wrap has-rail-right">
		<div class="main-content">
			<div class="grid_24 a2 ">
			</div>
			<div id="firehose" class="nothumbs">
			<div id="firehoselist" class="fhroot fleft  grid_24">
				<div id="announcement">
  <div id="announcementText" style="display: none;"> <a href="https://slashdot.org/newsletter" rel="nofollow"><strong>Sign up for the Slashdot newsletter!</strong></a> OR <a onclick="window._paq.push(['trackEvent', 'Announcement', 'GC']);" href="https://jobs.slashdot.org/?source=boiler_plate&utm_source=boiler_plate&utm_medium=content&utm_campaign=bp_referral" rel="nofollow">check out the new Slashdot job board to browse remote jobs or jobs in your area</a><br><br></strong>Do you develop on GitHub? You can keep using GitHub but automatically <a href="https://sourceforge.net/p/forge/documentation/GitHub%20Importer/" rel="nofollow"><strong>sync your GitHub releases to SourceForge</a></strong> quickly and easily with <strong><a href="https://sourceforge.net/p/import_project/github/" rel="nofollow">this tool</a></strong> so your projects have a backup location, and get your project in front of SourceForge's nearly 20 million monthly users. It takes less than a minute. Get new users downloading your project releases today!</span><br></div>
  <a href="" class="btn-close" title="don't show me this again" onclick="closeAnnouncement(); return false;">&times;</a>
</div>


<script type="text/javascript">

if (!$.cookie('hide_sitenotice_36')) {
	$('#announcement').fadeIn(300);
}

function closeAnnouncement() {
	$('#announcement').fadeOut(300);
	$.cookie('hide_sitenotice_36', 'true', { path: '/', domain: 'slashdot.org', expires: 1 });
}
</script>
				<article id="firehose-173973365" data-fhid="173973365" data-fhtype="story" class="fhitem fhitem-story article usermode thumbs grid_24">
		<span class="sd-info-block" style="display: none">
			<span class="sd-key-firehose-id">173973365</span>
			<span class="type">story</span>
			
		</span>







	
	

<header>
	
		<span class="topic" id="topic-173973365">
			<a href="//developers.slashdot.org/index2.pl?fhfilter=programming" onclick="return addfhfilter('programming');">
			
				<img src="//a.fsdn.com/sd/topics/programming_64.png" width="64" height="64" alt="Programming" title="Programming">
			
		</a>
		
	
		
		
		
		

		
		<a href="//developers.slashdot.org/index2.pl?fhfilter=security" onclick="return addfhfilter('security');">
			
				<img src="//a.fsdn.com/sd/topics/security_64.png" width="64" height="64" alt="Security" title="Security">
			
		</a>
		</span>
	

	<h2 class="story">
		

		

		
		

		

		

		

		<span id="title-173973365" class="story-title"> <a   href="//developers.slashdot.org/story/24/05/25/2250236/rust-foundation-reports-20-of-rust-crates-use-unsafe-keyword">Rust Foundation Reports 20% of Rust Crates Use 'Unsafe' Keyword</a> <span class=" no extlnk"><a class="story-sourcelnk" href="https://foundation.rust-lang.org/news/unsafe-rust-in-the-wild-notes-on-the-current-state-of-unsafe-rust/"  title="External link - https://foundation.rust-lang.org/news/unsafe-rust-in-the-wild-notes-on-the-current-state-of-unsafe-rust/" target="_blank"> (rust-lang.org) </a></span></span>

		
		
		<!--<span class="comments commentcnt-173973365" >67</span>-->
		

		
		<!-- comment bubble -->
		
			<span class="comment-bubble"><a href="//developers.slashdot.org/story/24/05/25/2250236/rust-foundation-reports-20-of-rust-crates-use-unsafe-keyword#comments" title="">67</a></span>
		
	</h2>
	<div class="details" id="details-173973365">
		<span class="story-details">
		<span class="story-views">
			<span class="sodify" onclick="firehose_set_options('color', 'red')" title="Filter Firehose to entries rated red or better"></span><span class="icon-beaker pop1 " alt="Popularity" title="Filter Firehose to entries rated red or better" onclick="firehose_set_options('color', 'red')"><span></span></span> 
		</span>
		</span>
		<span class="story-byline">
	
				
			Posted
				by 
		
		
			
				  EditorDavid
			
		
		

		
		
		<time id="fhtime-173973365" datetime="on Sunday May 26, 2024 @11:34AM">on Sunday May 26, 2024 @11:34AM</time>
		
		
			 from the <span class="dept-text">trusting-Rust</span> dept.
		
		</span>
	</div>
</header>

<div class="body" id="fhbody-173973365">
	
		
	

	
		
		<div id="text-173973365" class="p">
			
		 	
				A <a href="https://foundation.rust-lang.org/news/unsafe-rust-in-the-wild-notes-on-the-current-state-of-unsafe-rust/">Rust Foundation blog post</a> begins by reminding readers that Rust programs "are <em>unable</em> to compile if memory management rules are violated, essentially eliminating the possibility of a memory issue at runtime."  <br> <br>

But then it goes on to explore "Unsafe Rust in the wild" (used for a <a href="https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html#unsafe-superpowers">small set</a> of actions like dereferencing a raw pointer, modifying a mutable static variable, or calling <em>unsafe</em> functions).   "At a superficial glance, it might appear that Unsafe Rust undercuts the memory-safety benefits Rust is becoming increasingly celebrated for. In reality, the <em>unsafe</em> keyword comes with special safeguards and can be a powerful way to work with fewer restrictions when a function requires flexibility, so long as standard precautions are used."<br> <br>

The Foundation lists those available safeguards &mdash; which "make exploits rare &mdash; but <a href="https://rustsec.org/advisories/RUSTSEC-2019-0012.html">not</a> <a href="https://rustsec.org/advisories/CVE-2018-1000657.html">impossible</a>."  But then they go on to analyze just how much Rust code actually uses the <em>unsafe</em> keyword:


<i>
The canonical way to distribute Rust code is through a package called a crate. As of May 2024, there are about 145,000 crates; of which, approximately 127,000 contain significant code. Of those 127,000 crates, 24,362 make use of the <em>unsafe</em> keyword, which is 19.11% of all crates. And 34.35% make a direct function call into another crate that uses the <em>unsafe</em> keyword [according to numbers derived from <a href="https://github.com/rustfoundation/painter">the Rust Foundation project Painter</a>]. Nearly 20% of all crates have at least one instance of the <em>unsafe</em> keyword, a non-trivial number.<br> <br>

Most of these Unsafe Rust uses are calls into existing third-party non-Rust language code or libraries, such as C or C++. In fact, the crate with the most uses of the <em>unsafe</em> keyword is the Windows crate, which allows Rust developers to call into various Windows APIs. This does not mean that the code in these Unsafe Rust blocks are inherently exploitable (a majority or all of that code is most likely not), but that special care must be taken while using Unsafe Rust in order to avoid potential vulnerabilities...<br> <br>
 Rust lives up to its reputation as an excellent and transformative tool for safe and secure programming, even in an Unsafe context.    But this reputation requires resources, collaboration, and constant examination to uphold properly. For example, the Rust Project is continuing to develop tools like <a href="https://github.com/rust-lang/miri">Miri</a> to allow the checking of unsafe Rust code. The Rust Foundation is committed to this work through its Security Initiative: a program to support and advance the state of security within the Rust Programming language ecosystem and community. Under the Security Initiative, the Rust Foundation's Technology team has developed new tools like [dependency-graphing] Painter, TypoMania [which checks package registries for typo-squatting] and Sandpit [an internal tool watching for malicious crates]... giving users insight into vulnerabilities before they can happen and allowing for a quick response if an exploitation occurs.</i><br>
		 	
		</div>

		

		

		
			
		
	</div>
	<aside class="grid_24 view_mode">
		
			<div class="units-12 story-detail-tags">
				<span id="sharethis-173973365" class="">
					
						

						

					
				</span>

				<div class="story-tags">
					<div class="tright tw">
						
							<span class="tright tags">
								
									<menu type="toolbar" class="edit-bar">
		<span id="tagbar-173973365" class="tag-bar none">
			
		</span>
		
		<!--
			<a class="edit-toggle" href="/my/login/" onclick="show_login_box();return false;">
				<span class="icon-tag btn collapse"></span>
			</a>
			-->
		
		
		<div class="tag-menu">
			<input class="tag-entry default" type="text" value="apply tags">
		</div>
		

		
		

	</menu>
								
							</span>
						
					</div>
				</div>
			</div>

			
				
				
				
			 	
					<section class="grid_24" id="newa2footerv2">
						<div class="grid_6 pr">
							<h3><a title="Previous story" href="//linux.slashdot.org/story/24/05/25/2155224/how-a-us-hospital-is-using-ai-to-analyze-x-rays---with-help-from-red-hat?sdsrc=prev">&larr;</a></h3>
						</div>
						<div class="grid_12 rl">
							<h3>You may like to read:</h3>
						</div>
						<div class="grid_6 ns">
							<h3><a title="Next story" href="//games.slashdot.org/story/24/05/26/035202/ubuntu-2404-now-runs-on-the-nintendo-switch-unofficially?sdsrc=next">&rarr;</a></h3>
						</div>
						<div class="grid_6">
							<span class="c">
								<a href="//linux.slashdot.org/story/24/05/25/2155224/how-a-us-hospital-is-using-ai-to-analyze-x-rays---with-help-from-red-hat?sdsrc=prev">How A US Hospital is Using AI to Analyze X-Rays - With Help From Red Hat </a>
							</span>
						</div>
						<div class="grid_12">
							<span class="c">
								
									
									
									
									

																				<h2><a href="//developers.slashdot.org/story/23/08/07/0136228/should-a-variables-type-come-after-its-name?sdsrc=popbyskid">Should a Variable's Type Come After Its Name?</a><br></h2>
																				<h2><a href="//developers.slashdot.org/story/23/09/02/1753239/are-scrums-a-cancer?sdsrc=popbyskid">Are Scrums a Cancer?</a><br></h2>
																				<h2><a href="//developers.slashdot.org/story/24/03/19/019240/c-creator-rebuts-white-house-warning?sdsrc=popbyskid">C++ Creator Rebuts White House Warning</a><br></h2>
																				<h2><a href="//developers.slashdot.org/story/24/02/28/1529238/white-house-urges-devs-to-switch-to-memory-safe-programming-languages?sdsrc=popbyskid">White House Urges Devs To Switch To Memory-Safe Programming Languages</a><br></h2>
																				<h2><a href="//developers.slashdot.org/story/23/06/26/018234/34-of-ap-cs-students-couldnt-solve-this-java-based-2d-array-question?sdsrc=popbyskid">34% of AP CS Students Couldn't Solve This Java-Based 2D Array Question</a><br></h2>
									
								
								
							</span>
						</div>
						<div class="grid_6">
							<span class="c">
								
									<a href="//games.slashdot.org/story/24/05/26/035202/ubuntu-2404-now-runs-on-the-nintendo-switch-unofficially?sdsrc=next">Ubuntu 24.04 Now Runs on the Nintendo Switch (Unofficially)</a>
								
							</span>
						</div>
					</section>
				
			
		
	</aside>
	



	</article>
			</div>
			</div>
		</div>
	</div>
	<!-- SMACKS: BEGIN RIGHT RAIL -->
	<aside id="slashboxes" class="rail-right">
		
                    <div id="slashboxesin" class="yui-b">
                            
                            
                            
                    </div>
		    <div class="railad adwrap-unviewed">
<div id='div-gpt-ad-300x250_a'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-300x250_a');});</script></div>
</div>
		
	</aside>
		<!-- SMACKS: END RIGHT RAIL -->
</div>
<!-- END STORY CONTENT -->

<!-- THIS IS THE LOCATION FOR THE NEW STORY_B CODE -->
<div class="adwrap">
<div id='div-gpt-ad-728x90_b'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-728x90_b');});</script></div>
</div>
<script type="text/javascript">
if (window.is_euro_union === 0) {
    if (sdAdBlockActive) {
        bizx.cmp.ifConsent('', ['all'], function () {
            $.ajax({
                url: '/ajax.pl?op=nel',
                type: 'POST',
                success: function(html){
                    if(html){
                        $('#firehoselist article').eq(0).after(html);
                    }
                }
            });
        });
    }
}
</script>
<!--------------------------->


<!-- SMACKS: BEGIN COMMENTS CONTAINER -->
<div class="container">
	<!-- SMACKS: BEGIN COMMENTS SECTION -->
	<div class="main-wrap">
        <div id='horizontal' class='jobbioapp' style="width:initial;margin-right:320px;"></div>
		<div class="main-content">
			<div id="comments" class="a2commentwrap">
			<div>
					<a name="comments"></a>
<div id="comments" class="container">
	<div class="main-wrap">
		<div class="main-content">
			<section class="d2incommentspl">
				<div class="commentwrap" id="commentwrap">
					
						<div class="commentBox">
							<div class="title hide">
								<h4>
									
										<span class="escape-link"><a href="//developers.slashdot.org/story/24/05/25/2250236/rust-foundation-reports-20-of-rust-crates-use-unsafe-keyword" title="Back to Article - Rust Foundation Reports 20% of Rust Crates Use 'Unsafe' Keyword">Rust Foundation Reports 20% of Rust Crates Use 'Unsafe' Keyword</a></span>
									
									<span class="commentBoxLinks"><a href="#" onclick="D2.ajaxFetchComments(0,1); return false"><span id="more_comments_num_d"></span> More</a>



	| <span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=" onclick="D2.replyTo(0); return false;">Reply</a>


	<a class="login"  href="//developers.slashdot.org/login.pl" onclick="show_login_box(); return false">Login</a></span>
								</h4>
							</div>
						</div>
					

					<section class="grid_24" id="d2header"><div>
						
							<h2 class="commentspl test"><a title="Back to Article - Rust Foundation Reports 20% of Rust Crates Use 'Unsafe' Keyword" href="//developers.slashdot.org/story/24/05/25/2250236/rust-foundation-reports-20-of-rust-crates-use-unsafe-keyword">Rust Foundation Reports 20% of Rust Crates Use 'Unsafe' Keyword</a></h2>
						
						<nav class="grid_24">
							<div class="grid_14 widthauto">
							
						 		<span class="ind"></span><a class="btn first" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=" onclick="D2.replyTo(0); return false;">Post</a>
							
							<!-- <a href="//developers.slashdot.org/search.pl?op=comments&amp;sid=23335423" class="btn">Search <span class="totalcommentcnt">67</span> Comments</a> -->
							
								
									<a href="#" onclick="D2.ajaxFetchComments(0,1,'','',-1); return false" class="btn" id="d2loadall">Load All Comments</a>
								
							
							
								</div>
								<div class="grid_10 d1or2">
							

							
								<div id="d2out" class="horizontal rooted grid_15">
									<div id="d2act" class="hide">
										<div class="loki" id="gods">
											<script type="text/javascript">
												 $(function(){
													 D2.slider = new D2.Slider(
														 D2.user_threshold(),
														 D2.user_highlightthresh(),
														 'x'
													 );
												 });
											</script>
											<div id="bones" class="grid_12">
												<div class="ccw-count-container grid_24">
													<span id="ccw-full-count-text" class="grid_8 ccw-count-text tcenter"><span></span><span id="ccw-full-phrase">&nbsp;Full</span></span>
													<span id="ccw-abbr-count-text" class="grid_8 ccw-count-text"><span></span><span id="ccw-abbr-phrase">&nbsp;Abbreviated</span></span>
													<span id="ccw-hide-count-text" class="grid_8 ccw-count-text tleft"><span></span><span id="ccw-hide-phrase">&nbsp;Hidden</span></span>
												</div>
												<div id="ccw">
													<div id="ccw-body" class="ccw-core">
														<div id="ccw-panel-container" class="ccw-core">
															<div id="ccw-full-panel" class="ccw-panel">
																/Sea<div class="ccw-panel-border"></div>
																<div id="ccw-full-count-pos" class="ccw-core-pos ccw-count-pos"></div>
															</div>
															<div id="ccw-abbr-panel" class="ccw-panel">
																<div class="ccw-panel-border"></div>
																<div id="ccw-abbr-count-pos" class="ccw-core-pos ccw-count-pos"></div>
															</div>
															<div id="ccw-hide-panel" class="ccw-panel">
																<div id="ccw-hide-count-pos" class="ccw-core-pos ccw-count-pos"></div>
															</div>
														</div>
														<div id="ccw-control" class="ccw-core">
															<div id="ccw-centering-rail" class="ccw-core">
																<div id="ccw-hide-bar-pos" class="ccw-core-pos">
																	<div id="ccw-hide-bar" class="ccw-bar">
																		<div id="ccw-hide-bar-tab" class="ccw-bar-tab"></div>
																		<div class="ccwa"></div>
																		<div class="ccwb"></div>
																		<div id="ccw-hide-bar-upzone" class="ccw-upzone" onclick="D2.slider.stepTHT(HIDE_BAR, +1)"></div>
																		<div id="ccw-hide-bar-downzone" class="ccw-downzone" onclick="D2.slider.stepTHT(HIDE_BAR, -1)"></div>
																	</div>
																</div>
																<div id="ccw-abbr-bar-pos" class="ccw-core-pos">
																	<div id="ccw-abbr-bar" class="ccw-bar">
																		<div id="ccw-abbr-bar-tab" class="ccw-bar-tab"></div>
																		<div class="ccwa"></div>
																		<div class="ccwb"></div>
																		<div id="ccw-abbr-bar-upzone" class="ccw-upzone" onclick="D2.slider.stepTHT(ABBR_BAR, +1)"></div>
																		<div id="ccw-abbr-bar-downzone" class="ccw-downzone" onclick="D2.slider.stepTHT(ABBR_BAR, -1)"></div>
																	</div>
																</div>
															</div>
														</div>
													</div>
													<div class="ccw-score-label grid_24">
														<div class="grid_3"><span class="sc">Score:</span></div>
														<div class="grid_3">5<span class="lg"></span></div>
														<div class="grid_3">4<span class="lg"></span></div>
														<div class="grid_3">3<span class="lg"></span></div>
														<div class="grid_3">2<span class="lg"></span></div>
														<div class="grid_3">1<span class="lg"></span></div>
														<div class="grid_3">0<span class="lg"></span></div>
														<div class="grid_3">-1<span class="lg"></span></div>
													</div>
												</div>
											</div>
											<div class="commentControlFooter">
												<a href="#" onclick="D2.ajaxFetchComments(0,1); return false"><span id="more_comments_num_c"></span> More</a>



	| <span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=" onclick="D2.replyTo(0); return false;">Reply</a>


	<a class="login"  href="//developers.slashdot.org/login.pl" onclick="show_login_box(); return false">Login</a><div id="login_cover" class="hide" onclick="hide_login_box()"></div>
<div id="login_box" class="hide">
	<div id="login_box_content">
		<div id='embbeded_login_modal' class="hide">
<form action="https://slashdot.org/my/login" method="post" onsubmit="if (global_returnto) { this.returnto.value = global_returnto }" class="embedded"><fieldset style="-webkit-border-radius:10px 10px 0 0;border-radius:10px 10px 0 0;-moz-border-radius:10px 10px 0 0">
<div style='height:25px;'>&nbsp;</div>
    <input type="hidden" name="returnto" value="//developers.slashdot.org/comments.pl?sid=23335423">
    <input type="hidden" name="op" value="userlogin">
    <p>
        <label class="fleft" for="unickname">Nickname:</label>
        <input type="text" name="unickname" value="">
    </p>
    <p>
        <label class="fleft" for="upasswd">Password:</label>
        <input type="password" name="upasswd">
    </p>
    <label class="checkbox"><input type="checkbox" name="login_temp" value="yes"> Public Terminal</label>
    <br>
    <hr>
    <input type="submit" name="userlogin" value="Log In" class="fno"> <a href="//slashdot.org/my/mailpassword" class="btn link" onclick="getModalPrefs('sendPasswdModal', 'Retrieve Password', 1); return false;">Forgot your password?</a>
</fieldset></form>

<div class="actions">
 <a class="ico close" onclick="hide_login_slider();" href=""><span>Close</span></a>
</div>
</div>
		<div class="actions">
			<a class="ico close" href="#" onclick="hide_login_box(); return false"><span>Close</span></a>
		</div>
	</div>
</div>
<script type="text/javascript">logged_in = 0</script>
											</div>
											<div id="commentControlBoxStatus" class="hide"></div>
										</div>
									</div>
								</div>
							
							
							<a href="//developers.slashdot.org/search.pl?op=comments&amp;sid=23335423" class="ui-icon search_comments">Search <span class="totalcommentcnt">67</span> Comments</a>
							
								<a class="pref ui-icon-w" href="//developers.slashdot.org/users.pl" onclick="show_login_box(); $('#modal_box').addClass('login'); return false;">Log In/Create an Account</a>
							
						</div>
					</nav>
					<section id="besttabs" class="grid_24">
						<span class="legend">Comments Filter:</span>
						<ul class="besttabslist">
							<li class="active">
								<a href="#" data-filter-url="//developers.slashdot.org/story/24/05/25/2250236/rust-foundation-reports-20-of-rust-crates-use-unsafe-keyword#comments">All</a>
							</li>
						
							<li >
								<a href="" data-filter-url="//developers.slashdot.org/story/24/05/25/2250236/rust-foundation-reports-20-of-rust-crates-use-unsafe-keyword/insightful-comments#comments">Insightful</a>
							</li>
						
							<li >
								<a href="" data-filter-url="//developers.slashdot.org/story/24/05/25/2250236/rust-foundation-reports-20-of-rust-crates-use-unsafe-keyword/informative-comments#comments">Informative</a>
							</li>
						
							<li >
								<a href="" data-filter-url="//developers.slashdot.org/story/24/05/25/2250236/rust-foundation-reports-20-of-rust-crates-use-unsafe-keyword/interesting-comments#comments">Interesting</a>
							</li>
						
							<li >
								<a href="" data-filter-url="//developers.slashdot.org/story/24/05/25/2250236/rust-foundation-reports-20-of-rust-crates-use-unsafe-keyword/funny-comments#comments">Funny</a>
							</li>
						
					</ul>
					<script>
					(function($){
						$('#besttabs').show();
						$('.besttabslist').on('click', 'li a', function(e){
							e.preventDefault();
							var url = $(this).data('filter-url');
							//console.log('URL= ', url);
							$(this)
								.closest('ul').find('li').removeClass('active')
								.end()
								.closest('li').addClass('active');
							window.location = url;
						});
					})($j);
					</script>
			</section>
				<aside class="grid_24">
					<p>
						<small><strong>The Fine Print:</strong> The following comments are owned by whoever posted them.  We are not responsible for them in any way.</small>
					</p>
				</aside>
			</section>
			
		</div>
	</div>
</div><script src="//a.fsdn.com/sd/comments-minified.js?e48d135c2113bc48" type="text/javascript"></script>


<script type="text/javascript">
<!--
D2.d2_keybindings_disable()[191] = 1;
D2.boxStatus(1);
D2.comments({ 64500853: { uid: 672806, pid: 64500809, subject: "Re: Further Proof Rust on Linux Kernal is Sabbotag", read: 0, points: 2, kids: [ 64501123, 64501595 ], opid: 64500809 }, 64502037: { uid: 1658, pid: 64500793, subject: "Re:Rust is a good language", read: 0, points: 2, kids: [  ], opid: 64500793 }, 64501365: { uid: 98486, pid: 64500767, subject: "Re:Well, so much for that empty promise", read: 0, points: 2, kids: [  ], opid: 64500767 }, 64500909: { uid: 666, pid: 64500479, subject: "Re:I'm glad for articles like this.", read: 0, points: -1, kids: [  ], opid: 64500479 }, 64501169: { uid: 21163, pid: 64500633, subject: "Re:So what they're saying is", read: 0, points: 2, kids: [  ], opid: 64500633 }, 64502287: { uid: 1411889, pid: 64501779, subject: "Re: I'm glad for articles like this.", read: 0, points: 2, kids: [  ], opid: 64501779 }, 64500827: { uid: 3450605, pid: 64500633, read: 0, points: 2, kids: [  ], opid: 64500633 }, 64501245: { uid: 953524, pid: 64500639, subject: "Re:Rust is a good language", read: 0, points: 2, kids: [ 64502093 ], opid: 64500639 }, 64500741: { uid: 733417, pid: 64500711, subject: "Re:Exception for unsafe is valuable", read: 0, points: 2, kids: [  ], opid: 64500711 }, 64501779: { uid: 798480, pid: 64501025, read: 0, points: 2, kids: [ 64502287 ], opid: 64501025 }, 64501123: { uid: 3450605, pid: 64500853, subject: "Re: Further Proof Rust on Linux Kernal is Sabbotag", read: 0, points: 2, kids: [  ], opid: 64500853 }, 64500917: { uid: 7060585, pid: 64500651, subject: "Re:Exception for unsafe is valuable", read: 0, points: 2, kids: [  ], opid: 64500651 }, 64500785: { uid: 6158720, pid: 64500633, subject: "Re:So what they're saying is", read: 0, points: 2, kids: [ 64501021 ], opid: 64500633 }, 64500729: { uid: 582209, pid: 64500651, subject: "Re:Exception for unsafe is valuable", read: 0, points: 2, kids: [ 64500849, 64501143 ], opid: 64500651 }, 64502025: { uid: 1658, pid: 64500693, subject: "Re:Rust is a good language", read: 0, points: 2, kids: [  ], opid: 64500693 }, 64501131: { uid: 15173, pid: 64501105, subject: "Re: Further Proof Rust on Linux Kernal is Sabbotag", read: 0, points: 3, kids: [ 64502099 ], opid: 64501105 }, 64501021: { uid: 3450605, pid: 64500785, subject: "Re:So what they're saying is", read: 0, points: 2, kids: [ 64501403, 64502113 ], opid: 64500785 }, 64502093: { uid: 1658, pid: 64501245, subject: "Re:Rust is a good language", read: 0, points: 2, kids: [  ], opid: 64501245 }, 64502027: { uid: 1186667, pid: 64500639, subject: "Re:Rust is a good language", read: 0, points: 2, kids: [  ], opid: 64500639 }, 64502125: { uid: 963763, pid: 64500849, subject: "Re:Exception for unsafe is valuable", read: 0, points: 2, kids: [  ], opid: 64500849 }, 64500649: { uid: 1945926, pid: 0, read: 0, points: 4, kids: [  ], opid: 0 }, 64500793: { uid: 1135, pid: 64500639, subject: "Re:Rust is a good language", read: 0, points: 2, kids: [ 64501335, 64502037 ], opid: 64500639 }, 64500665: { uid: 1658, pid: 64500541, subject: "Re:Further Proof Rust on Linux Kernal is Sabbotage", read: 0, points: 3, kids: [ 64500775 ], opid: 64500541 }, 64502113: { uid: 963763, pid: 64501021, subject: "Re:So what they're saying is", read: 0, points: 2, kids: [  ], opid: 64501021 }, 64501051: { uid: 3450605, pid: 64500783, subject: "Re:Exception for unsafe is valuable", read: 0, points: 2, kids: [  ], opid: 64500783 }, 64500775: { uid: 3450605, pid: 64500665, read: 0, points: 3, kids: [ 64500809 ], opid: 64500665 }, 64500963: { uid: 874524, pid: 64500713, subject: "Re:Well, so much for that empty promise", read: 0, points: 2, kids: [  ], opid: 64500713 }, 64500843: { uid: 672806, pid: 64500767, subject: "Re:Well, so much for that empty promise", read: 0, points: 3, kids: [  ], opid: 64500767 }, 64500895: { uid: 1411889, pid: 0, read: 0, points: 2, kids: [  ], opid: 0 }, 64500477: { uid: 88907, pid: 0, read: 0, points: 3, kids: [ 64500509, 64500705, 64500713, 64500841 ], opid: 0 }, 64500911: { uid: 7060585, pid: 64500633, subject: "Re:So what they're saying is", read: 0, points: 2, kids: [  ], opid: 64500633 }, 64501167: { uid: 666, pid: 0, read: 0, points: 1, kids: [  ], opid: 0 }, 64500651: { uid: 724646, pid: 0, read: 0, points: 4, kids: [ 64500711, 64500729, 64500917 ], opid: 0 }, 64500809: { uid: 15173, pid: 64500775, subject: "Re: Further Proof Rust on Linux Kernal is Sabbotag", read: 0, points: 4, kids: [ 64500853, 64501105 ], opid: 64500775 }, 64500639: { uid: 1658, pid: 0, read: 0, points: 4, kids: [ 64500693, 64500793, 64500889, 64501245, 64502027 ], opid: 0 }, 64500711: { uid: 686517, pid: 64500651, subject: "Re:Exception for unsafe is valuable", read: 0, points: 4, kids: [ 64500739, 64500741, 64500783 ], opid: 64500651 }, 64501363: { uid: 582209, pid: 64500849, subject: "Re:Exception for unsafe is valuable", read: 0, points: 2, kids: [  ], opid: 64500849 }, 64501025: { uid: 4924941, pid: 64500883, subject: "Re:I'm glad for articles like this.", read: 0, points: 2, kids: [ 64501779 ], opid: 64500883 }, 64500783: { uid: 30498, pid: 64500711, subject: "Re:Exception for unsafe is valuable", read: 0, points: 2, kids: [ 64501051 ], opid: 64500711 }, 64501291: { uid: 2893961, pid: 0, read: 0, points: 1, kids: [  ], opid: 0 }, 64500767: { uid: 15173, pid: 64500713, subject: "Re:Well, so much for that empty promise", read: 0, points: 2, kids: [ 64500843, 64501145, 64501365 ], opid: 64500713 }, 64500889: { uid: 1411889, pid: 64500639, subject: "Re:Rust is a good language", read: 0, points: 2, kids: [  ], opid: 64500639 }, 64500907: { uid: 666, pid: 64500705, subject: "Re:Well, so much for that empty promise", read: 0, points: -1, kids: [  ], opid: 64500705 }, 64501403: { uid: 6158720, pid: 64501021, subject: "Re:So what they're saying is", read: 0, points: 1, kids: [  ], opid: 64501021 }, 64500995: { uid: 664417, pid: 64500949, subject: "Re:I'm glad for articles like this.", read: 0, points: 2, kids: [  ], opid: 64500949 }, 64500693: { uid: 596061, pid: 64500639, subject: "Re:Rust is a good language", read: 0, points: 1, kids: [ 64502025 ], opid: 64500639 }, 64501335: { uid: 160982, pid: 64500793, subject: "Re:Rust is a good language", read: 0, points: 2, kids: [  ], opid: 64500793 }, 64500763: { uid: 4924941, pid: 64500479, subject: "Re:I'm glad for articles like this.", read: 0, points: 3, kids: [ 64500883 ], opid: 64500479 }, 64500841: { uid: 5274, pid: 64500477, subject: "Re:Well, so much for that empty promise", read: 0, points: 2, kids: [  ], opid: 64500477 }, 64501145: { uid: 3450605, pid: 64500767, subject: "Re:Well, so much for that empty promise", read: 0, points: 2, kids: [  ], opid: 64500767 }, 64500479: { uid: 664417, pid: 0, read: 0, points: 5, kids: [ 64500763, 64500909, 64500949 ], opid: 0 }, 64500509: { uid: 986395, pid: 64500477, read: 0, points: 5, kids: [  ], opid: 64500477 }, 64502625: { uid: 10427278, pid: 0, read: 0, points: 1, kids: [  ], opid: 0 }, 64501143: { uid: 686517, pid: 64500729, subject: "Re:Exception for unsafe is valuable", read: 0, points: 2, kids: [  ], opid: 64500729 }, 64500713: { uid: 98486, pid: 64500477, subject: "Re:Well, so much for that empty promise", read: 0, points: 5, kids: [ 64500767, 64500963 ], opid: 64500477 }, 64501093: { uid: 3450605, pid: 64500883, subject: "Re:I'm glad for articles like this.", read: 0, points: 2, kids: [  ], opid: 64500883 }, 64501595: { uid: 666, pid: 64500853, subject: "Re: Further Proof Rust on Linux Kernal is Sabbotag", read: 0, points: 0, kids: [  ], opid: 64500853 }, 64500883: { uid: 1411889, pid: 64500763, subject: "Re:I'm glad for articles like this.", read: 0, points: 2, kids: [ 64501025, 64501093 ], opid: 64500763 }, 64500949: { uid: 326346, pid: 64500479, subject: "Re:I'm glad for articles like this.", read: 0, points: 3, kids: [ 64500995 ], opid: 64500479 }, 64501885: { uid: 5443888, pid: 0, read: 0, points: 2, kids: [  ], opid: 0 }, 64501105: { uid: 3450605, pid: 64500809, subject: "Re: Further Proof Rust on Linux Kernal is Sabbotag", read: 0, points: 2, kids: [ 64501131 ], opid: 64500809 }, 64500739: { uid: 724646, pid: 64500711, subject: "Re:Exception for unsafe is valuable", read: 0, points: 4, kids: [  ], opid: 64500711 }, 64500541: { uid: 871664, pid: 0, read: 0, points: 4, kids: [ 64500665 ], opid: 0 }, 64502099: { uid: 963763, pid: 64501131, subject: "Re: Further Proof Rust on Linux Kernal is Sabbotag", read: 0, points: 2, kids: [  ], opid: 64501131 }, 64500705: { uid: 339739, pid: 64500477, subject: "Re:Well, so much for that empty promise", read: 0, points: 2, kids: [ 64500907 ], opid: 64500477 }, 64500633: { uid: 4839537, pid: 0, read: 0, points: 2, kids: [ 64500785, 64500827, 64500911, 64501169 ], opid: 0 }, 64500849: { uid: 15173, pid: 64500729, subject: "Re:Exception for unsafe is valuable", read: 0, points: 2, kids: [ 64501363, 64502125 ], opid: 64500729 } });

D2.thresh_totals({6:{6:{1:67,3:0,2:0}},3:{6:{1:50,3:1,2:16},4:{1:50,3:11,2:6},3:{1:50,3:17,2:0},5:{1:50,3:7,2:10}},2:{6:{1:8,3:1,2:58},4:{1:8,3:11,2:48},3:{1:8,3:20,2:39},2:{1:8,3:59,2:0},5:{1:8,3:7,2:52}},1:{6:{1:3,3:1,2:63},4:{1:3,3:11,2:53},1:{1:3,3:64,2:0},3:{1:3,3:20,2:44},2:{1:3,3:62,2:2},5:{1:3,3:7,2:57}},4:{6:{1:57,3:1,2:9},4:{1:57,3:10,2:0},5:{1:57,3:7,2:3}},0:{6:{1:2,3:1,2:64},4:{1:2,3:11,2:54},1:{1:2,3:64,2:1},3:{1:2,3:20,2:45},0:{1:2,3:65,2:0},2:{1:2,3:62,2:3},5:{1:2,3:7,2:58}},"-1":{6:{1:0,3:1,2:66},3:{1:0,3:20,2:47},2:{1:0,3:62,2:5},1:{1:0,3:64,2:3},4:{1:0,3:11,2:56},0:{1:0,3:65,2:2},"-1":{1:0,3:67,2:0},5:{1:0,3:7,2:60}},5:{6:{1:64,3:1,2:2},5:{1:64,3:3,2:0}}});

D2.root_comment(0);
D2.root_comments([64500477,64500479,64500541,64500633,64500639,64500649,64500651,64500895,64501167,64501291,64501885,64502625]);
D2.root_comments_hash({64501291:1,64502625:1,64500649:1,64501885:1,64500541:1,64500895:1,64500477:1,64501167:1,64500651:1,64500633:1,64500639:1,64500479:1});

D2.d2_comment_order(0);
D2.user_uid(666);
D2.user_is_anon(1);
D2.user_is_admin(0);
D2.user_is_subscriber(0);
D2.user_smallscreen(0);
D2.user_threshold(1);
D2.user_highlightthresh(4);
D2.user_d2asp(0);

D2.discussion_id(23335423);

D2.d2_seen('64500477,2,30,32,92,6,10,2,14,28,12,6,2,16,10,2,22,4,8,8,2,8,16,18,14,2,6,4,30,6,6,12,2,2,6,32,14,32,26,4,26,42,12,18,8,12,2,22,2,76,46,44,28,2,38,192,184,106,140,2,10,56,6,14,12,162,338');
D2.more_comments_num(0);


//-->
</script>




	
	
	
	
		<ul id="commentlisting" class="d2">
			<li id="tree_64500477" class="comment full contain"><span class="ind"></span>
<div id="comment_status_64500477" class="commentstatus"></div>
<div id="comment_64500477" class="cw">
	<div id="comment_top_64500477" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500477" name="comment_link_64500477" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500477" onclick="return D2.setFocusComment(64500477)" >Well, so much for that empty promise</a>


		 	<span id="comment_score_64500477" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500477); return false"><span class=opt>Score:</span>3</a>, Interesting)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~gweihir">gweihir</a>  <span class="uid"><a href="//slashdot.org/~gweihir">( 88907 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500477">		
		on Sunday May 26, 2024 @11:37AM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500477">#64500477</a>)
		<small> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500477"><p>I am just surprised that they admit this themselves. The problem is, of course, that the typical Rust coder has no clue what "standard precautions" are here and is very likely to mess it up.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500477">
<span class="ind"></span><a id="reply_link_64500477" class="btn link" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=Reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500477" onclick="D2.replyTo(64500477); return false;">Reply to This</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="t slashpop" href="https://twitter.com/intent/tweet?text=Well, so much for that empty promise%20by%20gweihir%20%40slashdot%20https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500477" target="_blank">twitter</a>
		<a class="f slashpop" href="https://www.facebook.com/sharer/sharer.php?u=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500477" target="_blank">facebook</a>
		<a class="g" href="https://plus.google.com/share?url=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500477" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="https://www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>


	</div>
 <span class="ind"></span><a id="reply_link_64500477" title="Flag this comment as Inappropriate" class="ui-icon flag fright" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=flag&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500477" onclick="return false;">Flag as Inappropriate</a>
</div>
</div>

<div id="replyto_64500477"></div>

<ul id="group_64500477">
	<li id="hiddens_64500477" class="hide"></li>
</ul>

<ul id="commtree_64500477"><li id="tree_64500509" class="comment full contain"><span class="ind"></span>
<div id="comment_status_64500509" class="commentstatus"></div>
<div id="comment_64500509" class="cw">
	<div id="comment_top_64500509" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500509" name="comment_link_64500509" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500509" onclick="return D2.setFocusComment(64500509)" >Re: Well, so much for that empty promise</a>


		 	<span id="comment_score_64500509" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500509); return false"><span class=opt>Score:</span>5</a>, Funny)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~flyingfsck">flyingfsck</a>  <span class="uid"><a href="//slashdot.org/~flyingfsck">( 986395 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500509">		
		on Sunday May 26, 2024 @11:53AM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500509">#64500509</a>)
		<small> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500509">If you use Rust to call VBscript on Windows, then you should probably expect to have a few issues.</div>
	</div>

	<div class="commentSub" id="comment_sub_64500509">
<span class="ind"></span><a id="reply_link_64500509" class="btn link" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=Reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500509" onclick="D2.replyTo(64500509); return false;">Reply to This</a> <span class="ind"></span><a class="btn link" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;cid=64500477" onclick="return D2.selectParent(64500477)">Parent</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="t slashpop" href="https://twitter.com/intent/tweet?text=Re: Well, so much for that empty promise%20by%20flyingfsck%20%40slashdot%20https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500509" target="_blank">twitter</a>
		<a class="f slashpop" href="https://www.facebook.com/sharer/sharer.php?u=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500509" target="_blank">facebook</a>
		<a class="g" href="https://plus.google.com/share?url=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500509" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="https://www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>


	</div>
 <span class="ind"></span><a id="reply_link_64500509" title="Flag this comment as Inappropriate" class="ui-icon flag fright" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=flag&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500509" onclick="return false;">Flag as Inappropriate</a>
</div>
</div>

<div id="replyto_64500509"></div>

<ul id="group_64500509">
	<li id="hiddens_64500509" class="hide"></li>
</ul>

</li><li id="tree_64500705" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500705" class="commentstatus"></div>
<div id="comment_64500705" class="cw">
	<div id="comment_top_64500705" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500705" name="comment_link_64500705" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500705" onclick="return D2.setFocusComment(64500705)" >Re:</a>


		 	<span id="comment_score_64500705" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500705); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Waffle+Iron">Waffle Iron</a>  <span class="uid"><a href="//slashdot.org/~Waffle+Iron">( 339739 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500705"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500705"><p><div class="quote"><p>The problem is, of course, that the typical Rust coder has no clue what "standard precautions" are here and is very likely to mess it up.</p></div><p>It's much less likely that the Rust coder writing a little shim to call an external library will mess up than it is that the C coder who wrote the library has already messed up. The library has orders of magnitude more code to mess up, and C has orders of magnitude more "standard precautions" that must be manually juggled.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500705">

</div>
</div>

<div id="replyto_64500705"></div>

<ul id="group_64500705">
	<li id="hiddens_64500705" class="hide"></li>
</ul>

<ul id="commtree_64500705"><li id="tree_64500907" class="comment hidden"><span class="ind"></span>
<div id="comment_status_64500907" class="commentstatus"></div>
<div id="comment_64500907" class="cw">
</div>

<div id="replyto_64500907"></div>

<ul id="group_64500907">
	<li id="hiddens_64500907" class="hide"></li>
</ul>

</li><li id="hidestring_64500705"><noscript><b class='more'><span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23335423&amp;threshold=-1&amp;commentsort=0&amp;mode=thread&amp;pid=64500705">1 reply</a> beneath your current threshold.</b></noscript></li></ul></li><li id="tree_64500713" class="comment full contain"><span class="ind"></span>
<div id="comment_status_64500713" class="commentstatus"></div>
<div id="comment_64500713" class="cw">
	<div id="comment_top_64500713" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500713" name="comment_link_64500713" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500713" onclick="return D2.setFocusComment(64500713)" >Re:Well, so much for that empty promise</a>


		 	<span id="comment_score_64500713" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500713); return false"><span class=opt>Score:</span>5</a>, Insightful)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Tailhook">Tailhook</a>  <span class="uid"><a href="//slashdot.org/~Tailhook">( 98486 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500713">		
		on Sunday May 26, 2024 @01:32PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500713">#64500713</a>)
		<small> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500713"><p>Despite all the derision Rust gets for "unsafe", and the predictions that unsafe will plague Rust code, this survey finds that over 80% of all crates.io code don't use it and those that do are mostly using it for C interop, where is it inherently unavoidable.

</p><p>That looks like an admirable result to me.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500713">
<span class="ind"></span><a id="reply_link_64500713" class="btn link" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=Reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500713" onclick="D2.replyTo(64500713); return false;">Reply to This</a> <span class="ind"></span><a class="btn link" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;cid=64500477" onclick="return D2.selectParent(64500477)">Parent</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="t slashpop" href="https://twitter.com/intent/tweet?text=Re:Well, so much for that empty promise%20by%20Tailhook%20%40slashdot%20https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500713" target="_blank">twitter</a>
		<a class="f slashpop" href="https://www.facebook.com/sharer/sharer.php?u=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500713" target="_blank">facebook</a>
		<a class="g" href="https://plus.google.com/share?url=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500713" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="https://www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>


	</div>
 <span class="ind"></span><a id="reply_link_64500713" title="Flag this comment as Inappropriate" class="ui-icon flag fright" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=flag&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500713" onclick="return false;">Flag as Inappropriate</a>
</div>
</div>

<div id="replyto_64500713"></div>

<ul id="group_64500713">
	<li id="hiddens_64500713" class="hide"></li>
</ul>

<ul id="commtree_64500713"><li id="tree_64500767" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500767" class="commentstatus"></div>
<div id="comment_64500767" class="cw">
	<div id="comment_top_64500767" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500767" name="comment_link_64500767" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500767" onclick="return D2.setFocusComment(64500767)" >Re:</a>


		 	<span id="comment_score_64500767" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500767); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~HiThere">HiThere</a>  <span class="uid"><a href="//slashdot.org/~HiThere">( 15173 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500767"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500767"><p>Maybe.  How many programs use that 20%?  Is the "unsafe" tool required, or does it just make things easier?  What is the updating protocol?</p><p>It still sounds better than Javascript.  And one must remember that EVERY C program does the equivalent of using the unsafe keyword.</p><p>That said, I find Rust abhorrent.  This is a matter of personal taste.  I like the idea that it pushes, but in practice I'd even rather use SPARK (Ada).</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500767">

</div>
</div>

<div id="replyto_64500767"></div>

<ul id="group_64500767">
	<li id="hiddens_64500767" class="hide"></li>
</ul>

<ul id="commtree_64500767"><li id="tree_64500843" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500843" class="commentstatus"></div>
<div id="comment_64500843" class="cw">
	<div id="comment_top_64500843" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500843" name="comment_link_64500843" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500843" onclick="return D2.setFocusComment(64500843)" >Re:</a>


		 	<span id="comment_score_64500843" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500843); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~UnknowingFool">UnknowingFool</a>  <span class="uid"><a href="//slashdot.org/~UnknowingFool">( 672806 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500843"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500843"><p><div class="quote"><p> Maybe. How many programs use that 20%? Is the "unsafe" tool required, or does it just make things easier? What is the updating protocol?</p></div><p>From the summary, the majority of unsafe calls are to non-Rust libraries like C and C++. At that point Rust cannot guarantee the memory safety of another language. It does however highlight where problems could occur. Those libraries may need some focus.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500843">

</div>
</div>

<div id="replyto_64500843"></div>

<ul id="group_64500843">
	<li id="hiddens_64500843" class="hide"></li>
</ul>

</li><li id="tree_64501145" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501145" class="commentstatus"></div>
<div id="comment_64501145" class="cw">
	<div id="comment_top_64501145" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501145" name="comment_link_64501145" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501145" onclick="return D2.setFocusComment(64501145)" >Re:</a>


		 	<span id="comment_score_64501145" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501145); return false"><span class=opt>Score:</span>2</a>, Funny)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ArmoredDragon">ArmoredDragon</a>  <span class="uid"><a href="//slashdot.org/~ArmoredDragon">( 3450605 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501145"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501145"><p><div class="quote"><p>That said, I find Rust abhorrent. This is a matter of personal taste. I like the idea that it pushes, but in practice I'd even rather use SPARK (Ada).</p></div><p>Ada is still a language where, if you have no data to return, then you simply return an invalid pointer and expect that the caller already knows not to dereference it without checking first. Basically like handing somebody a loaded gun with a round chambered and assuming that they'll just check to make sure the safety is on because it's expected to do so anyways. Sure, even if they don't, most of the time nothing will go wrong.</p><p>Most of the time...</p><p><span class="substr"> </span> <a href="https://www.rollingstone.com/tv-movies/tv-movie-news/alec-baldwin-western-film-rust-completes-filming-after-fatal-shooting-1234740233/" title="rollingstone.com">https://www.rollingstone.com/t...</a> [rollingstone.com] </p><p>(Sorry, this joke had to be m</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64501145">

</div>
</div>

<div id="replyto_64501145"></div>

<ul id="group_64501145">
	<li id="hiddens_64501145" class="hide"></li>
</ul>

</li><li id="tree_64501365" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501365" class="commentstatus"></div>
<div id="comment_64501365" class="cw">
	<div id="comment_top_64501365" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501365" name="comment_link_64501365" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501365" onclick="return D2.setFocusComment(64501365)" >Re:</a>


		 	<span id="comment_score_64501365" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501365); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Tailhook">Tailhook</a>  <span class="uid"><a href="//slashdot.org/~Tailhook">( 98486 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501365"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501365"><p><div class="quote"><p>How many programs use that 20%? Is the "unsafe" tool required</p></div><p>I'd expect that nearly all programs are obligated to use dependencies that use "unsafe."  That's the nature of adapting to a world where 99% of the OS functionality is in C/C++, and you have to use unsafe to talk to it.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64501365">

</div>
</div>

<div id="replyto_64501365"></div>

<ul id="group_64501365">
	<li id="hiddens_64501365" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64500963" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500963" class="commentstatus"></div>
<div id="comment_64500963" class="cw">
	<div id="comment_top_64500963" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500963" name="comment_link_64500963" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500963" onclick="return D2.setFocusComment(64500963)" >Re:</a>


		 	<span id="comment_score_64500963" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500963); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~fahrbot-bot">fahrbot-bot</a>  <span class="uid"><a href="//slashdot.org/~fahrbot-bot">( 874524 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500963"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500963"><p><div class="quote"><p>Despite all the derision Rust gets for "unsafe", and the predictions that unsafe will plague Rust code, this survey finds that over 80% of all crates.io code don't use it and those that do are mostly using it for C interop, where is it inherently unavoidable.</p></div><p>
It's only 20% that use "unsafe" now. Probably still too early to tell which way it's going to go. Hopefully better, maybe worse -- slowly eating away any benefits, like...  What's that thing that happens to iron over time when exposed to oxygen?<nobr> <wbr></nobr>:-)</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500963">

</div>
</div>

<div id="replyto_64500963"></div>

<ul id="group_64500963">
	<li id="hiddens_64500963" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64500841" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500841" class="commentstatus"></div>
<div id="comment_64500841" class="cw">
	<div id="comment_top_64500841" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500841" name="comment_link_64500841" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500841" onclick="return D2.setFocusComment(64500841)" >Re:</a>


		 	<span id="comment_score_64500841" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500841); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~flux">flux</a>  <span class="uid"><a href="//slashdot.org/~flux">( 5274 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500841"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500841"><p>On the other hand, what would you think of the characterization that while you need to mark sections as "unsafe" in Rust, in C and C++ all code is implicitly "unsafe", they just don't have a way to annotate it?</p><p>I know which body of code I would enjoy more when reviewing it.</p><p>Granted the shared^mutable rule can be easy to break, giving the compiler free reigns to break it in the optimizer.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500841">

</div>
</div>

<div id="replyto_64500841"></div>

<ul id="group_64500841">
	<li id="hiddens_64500841" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64500479" class="comment full contain"><span class="ind"></span>
<div id="comment_status_64500479" class="commentstatus"></div>
<div id="comment_64500479" class="cw">
	<div id="comment_top_64500479" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500479" name="comment_link_64500479" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500479" onclick="return D2.setFocusComment(64500479)" >I'm glad for articles like this.</a>


		 	<span id="comment_score_64500479" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500479); return false"><span class=opt>Score:</span>5</a>, Funny)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~serviscope_minor">serviscope_minor</a>  <span class="uid"><a href="//slashdot.org/~serviscope_minor">( 664417 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500479">		
		on Sunday May 26, 2024 @11:38AM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500479">#64500479</a>)
		<small><a href="//slashdot.org/~serviscope_minor/journal/" title="Wednesday April 05, 2023 @04:34AM" class="user_journal_display">Journal</a> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500479"><p>I'm glad for articles like this because slashdot reliably has such measured opinions about Rust, C, C++.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500479">
<span class="ind"></span><a id="reply_link_64500479" class="btn link" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=Reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500479" onclick="D2.replyTo(64500479); return false;">Reply to This</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="t slashpop" href="https://twitter.com/intent/tweet?text=I'm glad for articles like this.%20by%20serviscope_minor%20%40slashdot%20https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500479" target="_blank">twitter</a>
		<a class="f slashpop" href="https://www.facebook.com/sharer/sharer.php?u=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500479" target="_blank">facebook</a>
		<a class="g" href="https://plus.google.com/share?url=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500479" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="https://www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>


	</div>
 <span class="ind"></span><a id="reply_link_64500479" title="Flag this comment as Inappropriate" class="ui-icon flag fright" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=flag&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500479" onclick="return false;">Flag as Inappropriate</a>
</div>
</div>

<div id="replyto_64500479"></div>

<ul id="group_64500479">
	<li id="hiddens_64500479" class="hide"></li>
</ul>

<ul id="commtree_64500479"><li id="tree_64500763" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500763" class="commentstatus"></div>
<div id="comment_64500763" class="cw">
	<div id="comment_top_64500763" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500763" name="comment_link_64500763" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500763" onclick="return D2.setFocusComment(64500763)" >Re:</a>


		 	<span id="comment_score_64500763" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500763); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Seven+Spirals">Seven Spirals</a>  <span class="uid"><a href="//slashdot.org/~Seven+Spirals">( 4924941 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500763"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500763">Almost as if one could ignore Rust use a few safety flags with your C compiler then act like none of this mattered very much (you know, one or two flags like: -Wall -Wextra -Wpedantic -Wformat=2 -Wformat-overflow=2 -Wformat-truncation=2 -Wformat-security -Wnull-dereference -Wstack-protector -Wtrampolines -Walloca -Wvla -Warray-bounds=2 -Wimplicit-fallthrough=3 -Wtraditional-conversion -Wshift-overflow=2 -Wcast-qual -Wstringop-overflow=4 -Wconversion -Warith-conversion -Wlogical-op -Wduplicated-cond -Wduplic</div>
	</div>

	<div class="commentSub" id="comment_sub_64500763">

</div>
</div>

<div id="replyto_64500763"></div>

<ul id="group_64500763">
	<li id="hiddens_64500763" class="hide"></li>
</ul>

<ul id="commtree_64500763"><li id="tree_64500883" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500883" class="commentstatus"></div>
<div id="comment_64500883" class="cw">
	<div id="comment_top_64500883" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500883" name="comment_link_64500883" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500883" onclick="return D2.setFocusComment(64500883)" >Re:</a>


		 	<span id="comment_score_64500883" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500883); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~fluffernutter">fluffernutter</a>  <span class="uid"><a href="//slashdot.org/~fluffernutter">( 1411889 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500883"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500883">You just need to use smart pointers properly.</div>
	</div>

	<div class="commentSub" id="comment_sub_64500883">

</div>
</div>

<div id="replyto_64500883"></div>

<ul id="group_64500883">
	<li id="hiddens_64500883" class="hide"></li>
</ul>

<ul id="commtree_64500883"><li id="tree_64501025" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501025" class="commentstatus"></div>
<div id="comment_64501025" class="cw">
	<div id="comment_top_64501025" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501025" name="comment_link_64501025" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501025" onclick="return D2.setFocusComment(64501025)" >Re:</a>


		 	<span id="comment_score_64501025" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501025); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Seven+Spirals">Seven Spirals</a>  <span class="uid"><a href="//slashdot.org/~Seven+Spirals">( 4924941 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501025"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501025">Agreed for C++ users. Automated code checkers also tend to catch a lot of pointer abuse, but if you do write your own reference counter or use someone else's you're fine. In C++ there's auto_ptr and there are countless reference counters and garbage collection schemes in implemented in C, too. It's nice to have a destructor to manage freeing smart pointers, but the C methods work just fine, too. I like the technique of pooling memory you manage inside your program like Apache uses. It allows for very tight</div>
	</div>

	<div class="commentSub" id="comment_sub_64501025">

</div>
</div>

<div id="replyto_64501025"></div>

<ul id="group_64501025">
	<li id="hiddens_64501025" class="hide"></li>
</ul>

<ul id="commtree_64501025"><li id="tree_64501779" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501779" class="commentstatus"></div>
<div id="comment_64501779" class="cw">
	<div id="comment_top_64501779" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501779" name="comment_link_64501779" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501779" onclick="return D2.setFocusComment(64501779)" >Re: I'm glad for articles like this.</a>


		 	<span id="comment_score_64501779" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501779); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~fintux">fintux</a>  <span class="uid"><a href="//slashdot.org/~fintux">( 798480 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501779"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501779">Uhh, auto_ptr was a bad idea, and it was deprecated in C++11, then removed in C++17. It was replaced by unique_ptr and shared_ptr. Auto_ptr tried to be a unique_ptr when the language had no move semantics, which lead to some subtle weirdness and unexpected behavior.</div>
	</div>

	<div class="commentSub" id="comment_sub_64501779">

</div>
</div>

<div id="replyto_64501779"></div>

<ul id="group_64501779">
	<li id="hiddens_64501779" class="hide"></li>
</ul>

<ul id="commtree_64501779"><li id="tree_64502287" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64502287" class="commentstatus"></div>
<div id="comment_64502287" class="cw">
	<div id="comment_top_64502287" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64502287" name="comment_link_64502287" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64502287" onclick="return D2.setFocusComment(64502287)" >Re:</a>


		 	<span id="comment_score_64502287" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64502287); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~fluffernutter">fluffernutter</a>  <span class="uid"><a href="//slashdot.org/~fluffernutter">( 1411889 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64502287"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64502287">Almost anything can be done with unique_ptr.  shared_ptr should be used only to work with libraries that assume they can get a copy of the pointer.  'new' should be disallowed except in the constructor of a shared pointer.  Using other std:: constructs eliminates the mistake of buffer overscan.  These things alone but C++ on par with Rust.</div>
	</div>

	<div class="commentSub" id="comment_sub_64502287">

</div>
</div>

<div id="replyto_64502287"></div>

<ul id="group_64502287">
	<li id="hiddens_64502287" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_64501093" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501093" class="commentstatus"></div>
<div id="comment_64501093" class="cw">
	<div id="comment_top_64501093" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501093" name="comment_link_64501093" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501093" onclick="return D2.setFocusComment(64501093)" >Re:</a>


		 	<span id="comment_score_64501093" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501093); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ArmoredDragon">ArmoredDragon</a>  <span class="uid"><a href="//slashdot.org/~ArmoredDragon">( 3450605 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501093"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501093"><p><div class="quote"><p>You just need to use smart pointers properly.</p></div><p>Then why is it no C++ developers can actually manage to do so? Not even the so called good ones. In Rust, smart pointers are all there is. Sure, you can create raw pointers, but unless you use unsafe you can't actually do anything with them.</p><p>(Not really a fan of Drew DeVault, but he makes good points here: <a href="https://drewdevault.com/2019/09/08/Enough-to-decide.html" title="drewdevault.com">https://drewdevault.com/2019/0...</a> [drewdevault.com])</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64501093">

</div>
</div>

<div id="replyto_64501093"></div>

<ul id="group_64501093">
	<li id="hiddens_64501093" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_64500909" class="comment hidden"><span class="ind"></span>
<div id="comment_status_64500909" class="commentstatus"></div>
<div id="comment_64500909" class="cw">
</div>

<div id="replyto_64500909"></div>

<ul id="group_64500909">
	<li id="hiddens_64500909" class="hide"></li>
</ul>

</li><li id="tree_64500949" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500949" class="commentstatus"></div>
<div id="comment_64500949" class="cw">
	<div id="comment_top_64500949" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500949" name="comment_link_64500949" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500949" onclick="return D2.setFocusComment(64500949)" >Re:</a>


		 	<span id="comment_score_64500949" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500949); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~93+Escort+Wagon">93 Escort Wagon</a>  <span class="uid"><a href="//slashdot.org/~93+Escort+Wagon">( 326346 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500949"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500949"><p><div class="quote"><p>I'm glad for articles like this because slashdot reliably has such measured opinions about Rust, C, C++.</p></div><p>In my head, I always imagine these particular discussion posts happening between multiple clones of the Simpsons' Comic Book Guy.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500949">

</div>
</div>

<div id="replyto_64500949"></div>

<ul id="group_64500949">
	<li id="hiddens_64500949" class="hide"></li>
</ul>

<ul id="commtree_64500949"><li id="tree_64500995" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500995" class="commentstatus"></div>
<div id="comment_64500995" class="cw">
	<div id="comment_top_64500995" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500995" name="comment_link_64500995" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500995" onclick="return D2.setFocusComment(64500995)" >Re:</a>


		 	<span id="comment_score_64500995" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500995); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~serviscope_minor">serviscope_minor</a>  <span class="uid"><a href="//slashdot.org/~serviscope_minor">( 664417 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500995"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500995"><p>I can feel my neckbeard sprouting as I read the comments in this thread. I want to reply but...</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500995">

</div>
</div>

<div id="replyto_64500995"></div>

<ul id="group_64500995">
	<li id="hiddens_64500995" class="hide"></li>
</ul>

</li></ul></li><li id="hidestring_64500479"><noscript><b class='more'><span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23335423&amp;threshold=-1&amp;commentsort=0&amp;mode=thread&amp;pid=64500479">1 reply</a> beneath your current threshold.</b></noscript></li></ul></li><li id="tree_64500541" class="comment full contain"><span class="ind"></span>
<div id="comment_status_64500541" class="commentstatus"></div>
<div id="comment_64500541" class="cw">
	<div id="comment_top_64500541" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500541" name="comment_link_64500541" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500541" onclick="return D2.setFocusComment(64500541)" >Further Proof Rust on Linux Kernal is Sabbotage</a>


		 	<span id="comment_score_64500541" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500541); return false"><span class=opt>Score:</span>4</a>, Interesting)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~BrendaEM">BrendaEM</a>  <span class="uid"><a href="//slashdot.org/~BrendaEM">( 871664 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500541">		
		on Sunday May 26, 2024 @12:10PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500541">#64500541</a>)
		<small><a href="https://www.youtube.com/c/BrendaEM" title="https://www.youtube.com/c/BrendaEM" class="user_homepage_display">Homepage</a> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500541">While you are at it, incorporate several other languages into the Linux kernel. While it is too large for one person to take on, make sure that no one programmer could understand all of it.</div>
	</div>

	<div class="commentSub" id="comment_sub_64500541">
<span class="ind"></span><a id="reply_link_64500541" class="btn link" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=Reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500541" onclick="D2.replyTo(64500541); return false;">Reply to This</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="t slashpop" href="https://twitter.com/intent/tweet?text=Further Proof Rust on Linux Kernal is Sabbotage%20by%20BrendaEM%20%40slashdot%20https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500541" target="_blank">twitter</a>
		<a class="f slashpop" href="https://www.facebook.com/sharer/sharer.php?u=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500541" target="_blank">facebook</a>
		<a class="g" href="https://plus.google.com/share?url=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500541" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="https://www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>


	</div>
 <span class="ind"></span><a id="reply_link_64500541" title="Flag this comment as Inappropriate" class="ui-icon flag fright" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=flag&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500541" onclick="return false;">Flag as Inappropriate</a>
</div>
</div>

<div id="replyto_64500541"></div>

<ul id="group_64500541">
	<li id="hiddens_64500541" class="hide"></li>
</ul>

<ul id="commtree_64500541"><li id="tree_64500665" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500665" class="commentstatus"></div>
<div id="comment_64500665" class="cw">
	<div id="comment_top_64500665" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500665" name="comment_link_64500665" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500665" onclick="return D2.setFocusComment(64500665)" >Re:</a>


		 	<span id="comment_score_64500665" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500665); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~jd">jd</a>  <span class="uid"><a href="//slashdot.org/~jd">( 1658 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500665"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500665"><p>There's a valid argument to adding the SILK parallelism extensions to GCC and Clang, then seeing if these could improve Linux kernel performance.</p><p>There's a valid argument for using SEL4's theorem idea and writing theorems for core components, like the memory manager, to establish correctness in sections of code small enough and structurally simple enough for this to be doable.</p><p>Rust is currently slower (but not by much) than C, but does offer a few gems to improve robustness. Which, of course, you wouldn't nee<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500665">

</div>
</div>

<div id="replyto_64500665"></div>

<ul id="group_64500665">
	<li id="hiddens_64500665" class="hide"></li>
</ul>

<ul id="commtree_64500665"><li id="tree_64500775" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500775" class="commentstatus"></div>
<div id="comment_64500775" class="cw">
	<div id="comment_top_64500775" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500775" name="comment_link_64500775" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500775" onclick="return D2.setFocusComment(64500775)" >Re: Further Proof Rust on Linux Kernal is Sabbotag</a>


		 	<span id="comment_score_64500775" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500775); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ArmoredDragon">ArmoredDragon</a>  <span class="uid"><a href="//slashdot.org/~ArmoredDragon">( 3450605 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500775"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500775"><p><div class="quote"><p>Rust is currently slower (but not by much) than C, but does offer a few gems to improve robustness.</p></div><p>It's hard to overstate just how little of a difference it is. Some researchers actually put out what is likely the most useful, meaningful, AND practical measurement for this, which is in terms of power consumption.</p><p><span class="substr"> </span> <a href="https://thenewstack.io/which-programming-languages-use-the-least-electricity/" title="thenewstack.io">https://thenewstack.io/which-p...</a> [thenewstack.io] </p><p>Spoilers:<br>These numbers are normalized so that the most efficient is a 1.0, higher numbers are less efficient:</p><p>C: 1.0<br>Rust: 1.03<br>C++: 1.34<br>Ada: 1.7<br>Java: 1.98 (this actually surprised me; ada is almost as inefficient as java, apparently, or java is almost as efficient a</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500775">

</div>
</div>

<div id="replyto_64500775"></div>

<ul id="group_64500775">
	<li id="hiddens_64500775" class="hide"></li>
</ul>

<ul id="commtree_64500775"><li id="tree_64500809" class="comment full contain"><span class="ind"></span>
<div id="comment_status_64500809" class="commentstatus"></div>
<div id="comment_64500809" class="cw">
	<div id="comment_top_64500809" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500809" name="comment_link_64500809" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500809" onclick="return D2.setFocusComment(64500809)" >Re: Further Proof Rust on Linux Kernal is Sabbotag</a>


		 	<span id="comment_score_64500809" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500809); return false"><span class=opt>Score:</span>4</a>, Insightful)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~HiThere">HiThere</a>  <span class="uid"><a href="//slashdot.org/~HiThere">( 15173 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500809">		 &lt;<a href="mailto:%60charleshixsn'+%60at'+%60earthlink.net'">`charleshixsn' `at' `earthlink.net'</a>&gt;
		on Sunday May 26, 2024 @02:07PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500809">#64500809</a>)
		<small> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500809"><p>I'm sorry, but I don't see how this is an argument for including Rust code in the kernel.  The prior argument was that maximizing human understanding would argue against that.  And it's definitely clear that requiring someone to be expert in both Rust and C is a higher requirement than only requiring them to be expert in C.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500809">
<span class="ind"></span><a id="reply_link_64500809" class="btn link" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=Reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500809" onclick="D2.replyTo(64500809); return false;">Reply to This</a> <span class="ind"></span><a class="btn link" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;cid=64500775" onclick="return D2.selectParent(64500775)">Parent</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="t slashpop" href="https://twitter.com/intent/tweet?text=Re: Further Proof Rust on Linux Kernal is Sabbotag%20by%20HiThere%20%40slashdot%20https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500809" target="_blank">twitter</a>
		<a class="f slashpop" href="https://www.facebook.com/sharer/sharer.php?u=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500809" target="_blank">facebook</a>
		<a class="g" href="https://plus.google.com/share?url=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500809" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="https://www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>


	</div>
 <span class="ind"></span><a id="reply_link_64500809" title="Flag this comment as Inappropriate" class="ui-icon flag fright" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=flag&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500809" onclick="return false;">Flag as Inappropriate</a>
</div>
</div>

<div id="replyto_64500809"></div>

<ul id="group_64500809">
	<li id="hiddens_64500809" class="hide"></li>
</ul>

<ul id="commtree_64500809"><li id="tree_64500853" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500853" class="commentstatus"></div>
<div id="comment_64500853" class="cw">
	<div id="comment_top_64500853" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500853" name="comment_link_64500853" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500853" onclick="return D2.setFocusComment(64500853)" >Re:</a>


		 	<span id="comment_score_64500853" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500853); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~UnknowingFool">UnknowingFool</a>  <span class="uid"><a href="//slashdot.org/~UnknowingFool">( 672806 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500853"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500853"><p><div class="quote"><p> I'm sorry, but I don't see how this is an argument for including Rust code in the kernel.</p></div><p>The argument is that Rust is nearly as efficient as C and more efficient than C++. In addition to that Rust has better type and memory safety. Naysayers has said that type safety could be done in C++. Yes but at the cost of efficiency.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500853">

</div>
</div>

<div id="replyto_64500853"></div>

<ul id="group_64500853">
	<li id="hiddens_64500853" class="hide"></li>
</ul>

<ul id="commtree_64500853"><li id="tree_64501123" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501123" class="commentstatus"></div>
<div id="comment_64501123" class="cw">
	<div id="comment_top_64501123" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501123" name="comment_link_64501123" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501123" onclick="return D2.setFocusComment(64501123)" >Re:</a>


		 	<span id="comment_score_64501123" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501123); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ArmoredDragon">ArmoredDragon</a>  <span class="uid"><a href="//slashdot.org/~ArmoredDragon">( 3450605 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501123"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501123"><p><div class="quote"><p>Naysayers has said that type safety could be done in C++. Yes but at the cost of efficiency.</p></div><p>But they've still yet to actually even pull even that off.</p><p>Bjarne Stroustrup did his bizarre "call to arms" speech in response to this with his key argument being that there's more to safety than memory safety. Problem is, when you listen to his words carefully, his definition of memory safety seems to be extremely narrow. It seems like his only definition of it is temporal safety, which yeah, there's more to memory safety than temporal safety, but it seems like he wants to brush that aside solely because it<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64501123">

</div>
</div>

<div id="replyto_64501123"></div>

<ul id="group_64501123">
	<li id="hiddens_64501123" class="hide"></li>
</ul>

</li><li id="tree_64501595" class="comment hidden"><span class="ind"></span>
<div id="comment_status_64501595" class="commentstatus"></div>
<div id="comment_64501595" class="cw">
</div>

<div id="replyto_64501595"></div>

<ul id="group_64501595">
	<li id="hiddens_64501595" class="hide"></li>
</ul>

</li><li id="hidestring_64500853"><noscript><b class='more'><span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23335423&amp;threshold=-1&amp;commentsort=0&amp;mode=thread&amp;pid=64500853">1 reply</a> beneath your current threshold.</b></noscript></li></ul></li><li id="tree_64501105" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501105" class="commentstatus"></div>
<div id="comment_64501105" class="cw">
	<div id="comment_top_64501105" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501105" name="comment_link_64501105" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501105" onclick="return D2.setFocusComment(64501105)" >Re:</a>


		 	<span id="comment_score_64501105" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501105); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ArmoredDragon">ArmoredDragon</a>  <span class="uid"><a href="//slashdot.org/~ArmoredDragon">( 3450605 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501105"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501105"><p><div class="quote"><p>I'm sorry, but I don't see how this is an argument for including Rust code in the kernel.</p></div><p>It wasn't meant to be.</p><p><div class="quote"><p>The prior argument was that maximizing human understanding would argue against that. And it's definitely clear that requiring someone to be expert in both Rust and C is a higher requirement than only requiring them to be expert in C.</p></div><p>I wasn't making any argument about this, but I'd argue C is harder than Rust. Sure, C is small and well-defined, but much of what you do with it is well-defined as being undefined in very subtle ways that arguably takes at least a decade to get (mostly) right. C++ on the other hand is just an ultimately pointless extension of C, and I completely understand why Linus Torvalds doesn't want it.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64501105">

</div>
</div>

<div id="replyto_64501105"></div>

<ul id="group_64501105">
	<li id="hiddens_64501105" class="hide"></li>
</ul>

<ul id="commtree_64501105"><li id="tree_64501131" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501131" class="commentstatus"></div>
<div id="comment_64501131" class="cw">
	<div id="comment_top_64501131" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501131" name="comment_link_64501131" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501131" onclick="return D2.setFocusComment(64501131)" >Re:</a>


		 	<span id="comment_score_64501131" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501131); return false"><span class=opt>Score:</span>3</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~HiThere">HiThere</a>  <span class="uid"><a href="//slashdot.org/~HiThere">( 15173 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501131"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501131"><p>If you think C++ is pointless, you haven't tried to implement a hash table in C.  But they are a standardized part of C++.  There are many other examples.  But this is NOT an argument for including C++ in the kernel.</p><p>(Yes, you can add libraries to do in C what C++ includes as part of the standard.  This makes things much more fragile.  Which is why Python comes with all those libraries attached as a part of the standard build.)</p><p>FWIW, in the section of developer space that I typically operate in C++ appears to<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64501131">

</div>
</div>

<div id="replyto_64501131"></div>

<ul id="group_64501131">
	<li id="hiddens_64501131" class="hide"></li>
</ul>

<ul id="commtree_64501131"><li id="tree_64502099" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64502099" class="commentstatus"></div>
<div id="comment_64502099" class="cw">
	<div id="comment_top_64502099" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64502099" name="comment_link_64502099" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64502099" onclick="return D2.setFocusComment(64502099)" >Re:</a>


		 	<span id="comment_score_64502099" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64502099); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~DamnOregonian">DamnOregonian</a>  <span class="uid"><a href="//slashdot.org/~DamnOregonian">( 963763 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64502099"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64502099"><p><div class="quote"><p>If you think C++ is pointless, you haven't tried to implement a hash table in C.</p></div><p>I have. Hundreds of times.<br>
The only thing I can imagine that C++ adds to that is some neat overloading syntax, and a gigantic performance-consuming dildo rammed up your ass.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64502099">

</div>
</div>

<div id="replyto_64502099"></div>

<ul id="group_64502099">
	<li id="hiddens_64502099" class="hide"></li>
</ul>

</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li id="tree_64500633" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500633" class="commentstatus"></div>
<div id="comment_64500633" class="cw">
	<div id="comment_top_64500633" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500633" name="comment_link_64500633" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500633" onclick="return D2.setFocusComment(64500633)" >So what they're saying is</a>


		 	<span id="comment_score_64500633" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500633); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~quonset">quonset</a>  <span class="uid"><a href="//slashdot.org/~quonset">( 4839537 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500633"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500633"><p>Rust programmers need a safe word.  Banana is a good one.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500633">

</div>
</div>

<div id="replyto_64500633"></div>

<ul id="group_64500633">
	<li id="hiddens_64500633" class="hide"></li>
</ul>

<ul id="commtree_64500633"><li id="tree_64500785" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500785" class="commentstatus"></div>
<div id="comment_64500785" class="cw">
	<div id="comment_top_64500785" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500785" name="comment_link_64500785" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500785" onclick="return D2.setFocusComment(64500785)" >Re:</a>


		 	<span id="comment_score_64500785" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500785); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~rlwinm">rlwinm</a>  <span class="uid"><a href="//slashdot.org/~rlwinm">( 6158720 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500785"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500785">LOL! The safe word I use when having to hear from some Rust coder about how great Rust is, is "cockholster."
<br> <br>
The fundamental fallacy that C code is a flaming security disaster is just not true. Given the number of exploits found related to buffer management (as opposed to logic/design errors or race conditions, etc. where things are comparable in the Rust world) is actually quite small when you look at the sheer amount of C code out there. There are tons of embedded systems running the world, programmed i</div>
	</div>

	<div class="commentSub" id="comment_sub_64500785">

</div>
</div>

<div id="replyto_64500785"></div>

<ul id="group_64500785">
	<li id="hiddens_64500785" class="hide"></li>
</ul>

<ul id="commtree_64500785"><li id="tree_64501021" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501021" class="commentstatus"></div>
<div id="comment_64501021" class="cw">
	<div id="comment_top_64501021" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501021" name="comment_link_64501021" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501021" onclick="return D2.setFocusComment(64501021)" >Re:</a>


		 	<span id="comment_score_64501021" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501021); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ArmoredDragon">ArmoredDragon</a>  <span class="uid"><a href="//slashdot.org/~ArmoredDragon">( 3450605 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501021"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501021"><p><div class="quote"><p>The fundamental fallacy that C code is a flaming security disaster is just not true.</p></div><p>No, C++ code is the flaming security disaster. For C, I think the argument is that large C codebases are a potential security disaster.</p><p>A good analogy I'm sure everybody can relate to is writing big code projects purely in dynamic scripting languages. The reason for this is basically that you don't have a compiler there ensuring you're doing things like properly re-initializing variables between for loops so that you're not carrying over data from a previous iteration and getting confused looks from your pee<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64501021">

</div>
</div>

<div id="replyto_64501021"></div>

<ul id="group_64501021">
	<li id="hiddens_64501021" class="hide"></li>
</ul>

<ul id="commtree_64501021"><li id="tree_64501403" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501403" class="commentstatus"></div>
<div id="comment_64501403" class="cw">
	<div id="comment_top_64501403" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501403" name="comment_link_64501403" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501403" onclick="return D2.setFocusComment(64501403)" >Re:</a>


		 	<span id="comment_score_64501403" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501403); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~rlwinm">rlwinm</a>  <span class="uid"><a href="//slashdot.org/~rlwinm">( 6158720 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501403"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501403"><blockquote><div><p>C++ code is the flaming security disaster</p></div></blockquote><p>

I disagree: C++ is just a flaming disaster all around. Readability and maintainability are pretty poor in C++. It's hard to even lump C++ code into a single style. Some C++ code is mostly OOP relying on virtual functions (how I write C++). Some C++ code is mostly template driven and a bit like macro-heavy Scheme code. There's straight C with C++-isms and of course modern lambda-heavy C++.
<br> <br>
C++ is very design by committee, IMHO.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64501403">

</div>
</div>

<div id="replyto_64501403"></div>

<ul id="group_64501403">
	<li id="hiddens_64501403" class="hide"></li>
</ul>

</li><li id="tree_64502113" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64502113" class="commentstatus"></div>
<div id="comment_64502113" class="cw">
	<div id="comment_top_64502113" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64502113" name="comment_link_64502113" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64502113" onclick="return D2.setFocusComment(64502113)" >Re:</a>


		 	<span id="comment_score_64502113" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64502113); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~DamnOregonian">DamnOregonian</a>  <span class="uid"><a href="//slashdot.org/~DamnOregonian">( 963763 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64502113"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64502113"><p><div class="quote"><p>For C, I think the argument is that large C codebases are a potential security disaster.</p></div><p>I've been a professional C programmer for several decades, and as much as I adore the language, this can absolutely be true.<br>
<br>
As for the perl, perl has 100% lexical scoping- there's never a need to reinitialize any variable.<br>
Any block is a new scope, and you can put one anywhere. It need not be tacked to an anonymous sub, or a flow control statement.<br>
use strict;<br>
use warnings;<br>
<br>
If you don't- you're a criminal.<br>
<br>
If you were literally referring to that gigantic fucking bash script- well ya. Big bash scripts ar<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64502113">

</div>
</div>

<div id="replyto_64502113"></div>

<ul id="group_64502113">
	<li id="hiddens_64502113" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_64500827" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500827" class="commentstatus"></div>
<div id="comment_64500827" class="cw">
	<div id="comment_top_64500827" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500827" name="comment_link_64500827" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500827" onclick="return D2.setFocusComment(64500827)" >Re: So what they're saying is</a>


		 	<span id="comment_score_64500827" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500827); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ArmoredDragon">ArmoredDragon</a>  <span class="uid"><a href="//slashdot.org/~ArmoredDragon">( 3450605 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500827"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500827"><p>There is none. Either it's satisfied or it tells you to get your clothes on and get out.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500827">

</div>
</div>

<div id="replyto_64500827"></div>

<ul id="group_64500827">
	<li id="hiddens_64500827" class="hide"></li>
</ul>

</li><li id="tree_64500911" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500911" class="commentstatus"></div>
<div id="comment_64500911" class="cw">
	<div id="comment_top_64500911" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500911" name="comment_link_64500911" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500911" onclick="return D2.setFocusComment(64500911)" >Re:</a>


		 	<span id="comment_score_64500911" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500911); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~NoWayNoShapeNoForm">NoWayNoShapeNoForm</a>  <span class="uid"><a href="//slashdot.org/~NoWayNoShapeNoForm">( 7060585 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500911"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500911"><p><div class="quote"><p>Rust programmers need a safe word.  Banana is a good one.</p></div><p>+1 Funny - if I had mod points</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500911">

</div>
</div>

<div id="replyto_64500911"></div>

<ul id="group_64500911">
	<li id="hiddens_64500911" class="hide"></li>
</ul>

</li><li id="tree_64501169" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501169" class="commentstatus"></div>
<div id="comment_64501169" class="cw">
	<div id="comment_top_64501169" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501169" name="comment_link_64501169" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501169" onclick="return D2.setFocusComment(64501169)" >Re:</a>


		 	<span id="comment_score_64501169" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501169); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Briareos">Briareos</a>  <span class="uid"><a href="//slashdot.org/~Briareos">( 21163 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501169"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501169"><p>I'd say "Sunstone", but that's just a waste of a perfectly good safeword...</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64501169">

</div>
</div>

<div id="replyto_64501169"></div>

<ul id="group_64501169">
	<li id="hiddens_64501169" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64500639" class="comment full contain"><span class="ind"></span>
<div id="comment_status_64500639" class="commentstatus"></div>
<div id="comment_64500639" class="cw">
	<div id="comment_top_64500639" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500639" name="comment_link_64500639" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500639" onclick="return D2.setFocusComment(64500639)" >Rust is a good language</a>


		 	<span id="comment_score_64500639" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500639); return false"><span class=opt>Score:</span>4</a>, Interesting)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~jd">jd</a>  <span class="uid"><a href="//slashdot.org/~jd">( 1658 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500639">		 &lt;<a href="mailto:imipak%40yaho%5B+%5Dom+%5B'o.c'+in+gap%5D">imipak@yaho[ ]om ['o.c' in gap]</a>&gt;
		on Sunday May 26, 2024 @12:51PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500639">#64500639</a>)
		<small><a href="http://slashdot.org/" title="http://slashdot.org/" class="user_homepage_display">Homepage</a>
<a href="//slashdot.org/~jd/journal/" title="Friday May 10, 2024 @06:58AM" class="user_journal_display">Journal</a> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500639"><p>But throughout history, there have been many good languages, especially ones that had one or two clever features absent from others that made a big difference.</p><p>Most of these languages (Eiffel, Nim, Ada, SPARK, Tcl/Tk, LISP, Forth, MUMPS, Oberon, Ruby, Occam, Erlang, Haskell, MARS D, PL/I, etc) had some time in the sun, and a few of these are still very popular in niche fields. But they never took the world by storm. Perl, which DID take the world by storm, suffered from some disastrous politics and over-ambitious updates and has all but been replaced by Python and PHP, where PHP is itself withdrawing to more of a background presence.</p><p>All but Occam will survive, sure, but as tiny islands that can't survive in the longer term. Occam is functionally extinct, which is a shame as it had by far the best IPC system and multithreading system of any language.</p><p>SILK was an ingenious parralel extension to C, but it exists now only in an extension to Intel's compiler. Nobody else has reimplemented it and it's not in the standard. Is Unified Parallel C still a thing? A lot of other parallel extensions have died - the ATLAS library tried a few and found it made the code slower.</p><p>But Fortran (which has implicit parallelism) and COBOL are recovering, and C/C++ are still fighting hard. Java nearly died during the dot com era and Oracle has been sabotaging it ever since, but it might endure despite their best efforts.</p><p>Rust might endure and even replace one of the Lovecraftian Great Old Ones. It easily could. It's a strong language with a lot of support. But so did other languages whose stars have faded. It cannot and should not be taken for granted that Rust will join the Ancient Ones and become essentially immortal.</p><p>(Python shouldn't assume it either, given what happened to Perl and what is happening to PHP.)</p><p>Fortelling the future of programming languages is a dangerous game, and as Galadriel, top geek in Lothlorien, once said, for telling is in vain and all paths may run ill.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500639">
<span class="ind"></span><a id="reply_link_64500639" class="btn link" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=Reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500639" onclick="D2.replyTo(64500639); return false;">Reply to This</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="t slashpop" href="https://twitter.com/intent/tweet?text=Rust is a good language%20by%20jd%20%40slashdot%20https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500639" target="_blank">twitter</a>
		<a class="f slashpop" href="https://www.facebook.com/sharer/sharer.php?u=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500639" target="_blank">facebook</a>
		<a class="g" href="https://plus.google.com/share?url=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500639" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="https://www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>


	</div>
 <span class="ind"></span><a id="reply_link_64500639" title="Flag this comment as Inappropriate" class="ui-icon flag fright" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=flag&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500639" onclick="return false;">Flag as Inappropriate</a>
</div>
</div>

<div id="replyto_64500639"></div>

<ul id="group_64500639">
	<li id="hiddens_64500639" class="hide"></li>
</ul>

<ul id="commtree_64500639"><li id="tree_64500693" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500693" class="commentstatus"></div>
<div id="comment_64500693" class="cw">
	<div id="comment_top_64500693" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500693" name="comment_link_64500693" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500693" onclick="return D2.setFocusComment(64500693)" >Re:</a>


		 	<span id="comment_score_64500693" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500693); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~iggymanz">iggymanz</a>  <span class="uid"><a href="//slashdot.org/~iggymanz">( 596061 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500693"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500693"><p>Some of your stuff is funny, your money and insurance are moved by COBOL and/or Java, as are the resources ERP/MRP of the biggest companies on Earth.  Billions of lines of COBOL and the enterprise Java will be around for decades.  It never waned.</p><p>Occam?  Yes good design but  ha, never saw it after decades in engineering, hard science and now multi-tier mixed services architectures, it's dead if it ever was alive and was used for anything major?  Survive where?</p><p>The numerical libraries built in ForTran are all<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500693">

</div>
</div>

<div id="replyto_64500693"></div>

<ul id="group_64500693">
	<li id="hiddens_64500693" class="hide"></li>
</ul>

<ul id="commtree_64500693"><li id="tree_64502025" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64502025" class="commentstatus"></div>
<div id="comment_64502025" class="cw">
	<div id="comment_top_64502025" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64502025" name="comment_link_64502025" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64502025" onclick="return D2.setFocusComment(64502025)" >Re:</a>


		 	<span id="comment_score_64502025" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64502025); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~jd">jd</a>  <span class="uid"><a href="//slashdot.org/~jd">( 1658 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64502025"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64502025"><p>BLAS and Lapack were converted to C years ago.<br>Less sure about the NAG libraries.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64502025">

</div>
</div>

<div id="replyto_64502025"></div>

<ul id="group_64502025">
	<li id="hiddens_64502025" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64500793" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500793" class="commentstatus"></div>
<div id="comment_64500793" class="cw">
	<div id="comment_top_64500793" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500793" name="comment_link_64500793" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500793" onclick="return D2.setFocusComment(64500793)" >Re:</a>


		 	<span id="comment_score_64500793" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500793); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Misagon">Misagon</a>  <span class="uid"><a href="//slashdot.org/~Misagon">( 1135 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500793"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500793"><blockquote><div><p> Occam is functionally extinct, which is a shame as it had by far the best IPC system and multithreading system of any language.</p></div></blockquote><p>I've been told that Go's "goroutines" and channels supposedly were designed after the same <a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes" title="wikipedia.org">CSP</a> [wikipedia.org]-formalism.as Occam.<br>I which ways do you think Go's concurrency is deficient compared to Occam's?</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500793">

</div>
</div>

<div id="replyto_64500793"></div>

<ul id="group_64500793">
	<li id="hiddens_64500793" class="hide"></li>
</ul>

<ul id="commtree_64500793"><li id="tree_64501335" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501335" class="commentstatus"></div>
<div id="comment_64501335" class="cw">
	<div id="comment_top_64501335" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501335" name="comment_link_64501335" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501335" onclick="return D2.setFocusComment(64501335)" >Re:</a>


		 	<span id="comment_score_64501335" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501335); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~_merlin">_merlin</a>  <span class="uid"><a href="//slashdot.org/~_merlin">( 160982 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501335"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501335"><p>Go's concurrency model is a lot like Erlang's.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64501335">

</div>
</div>

<div id="replyto_64501335"></div>

<ul id="group_64501335">
	<li id="hiddens_64501335" class="hide"></li>
</ul>

</li><li id="tree_64502037" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64502037" class="commentstatus"></div>
<div id="comment_64502037" class="cw">
	<div id="comment_top_64502037" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64502037" name="comment_link_64502037" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64502037" onclick="return D2.setFocusComment(64502037)" >Re:</a>


		 	<span id="comment_score_64502037" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64502037); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~jd">jd</a>  <span class="uid"><a href="//slashdot.org/~jd">( 1658 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64502037"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64502037"><p>Occam supported implicit and explicit parallelism (the PAR keyword) and could enforce sequential processing, overriding the optimiser, if necessary (SEQ).</p><p>It supported process migration over a cluster, but more crucially supported the MOBILE keyword that allowed data structures to also migrate.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64502037">

</div>
</div>

<div id="replyto_64502037"></div>

<ul id="group_64502037">
	<li id="hiddens_64502037" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64500889" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500889" class="commentstatus"></div>
<div id="comment_64500889" class="cw">
	<div id="comment_top_64500889" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500889" name="comment_link_64500889" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500889" onclick="return D2.setFocusComment(64500889)" >Re:</a>


		 	<span id="comment_score_64500889" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500889); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~fluffernutter">fluffernutter</a>  <span class="uid"><a href="//slashdot.org/~fluffernutter">( 1411889 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500889"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500889">Extending perl was a lot harder than extending python.  pip ate cpan for lunch.  Perl was always held back by the fact that it was very much a scripting language, one step above bash.  For example the ()<nobr> <wbr></nobr>/string/ search stuff was just weird... but it worked for scripts.  Python brought a clean and complete programming language to scripting.</div>
	</div>

	<div class="commentSub" id="comment_sub_64500889">

</div>
</div>

<div id="replyto_64500889"></div>

<ul id="group_64500889">
	<li id="hiddens_64500889" class="hide"></li>
</ul>

</li><li id="tree_64501245" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501245" class="commentstatus"></div>
<div id="comment_64501245" class="cw">
	<div id="comment_top_64501245" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501245" name="comment_link_64501245" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501245" onclick="return D2.setFocusComment(64501245)" >Re:</a>


		 	<span id="comment_score_64501245" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501245); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~RoccamOccam">RoccamOccam</a>  <span class="uid"><a href="//slashdot.org/~RoccamOccam">( 953524 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501245"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501245">Kudos for the Occam love!  I still have a rack full of Transputers in my basement.</div>
	</div>

	<div class="commentSub" id="comment_sub_64501245">

</div>
</div>

<div id="replyto_64501245"></div>

<ul id="group_64501245">
	<li id="hiddens_64501245" class="hide"></li>
</ul>

<ul id="commtree_64501245"><li id="tree_64502093" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64502093" class="commentstatus"></div>
<div id="comment_64502093" class="cw">
	<div id="comment_top_64502093" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64502093" name="comment_link_64502093" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64502093" onclick="return D2.setFocusComment(64502093)" >Re:</a>


		 	<span id="comment_score_64502093" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64502093); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~jd">jd</a>  <span class="uid"><a href="//slashdot.org/~jd">( 1658 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64502093"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64502093"><p>The transputer was a marvellous device that really got CPU manufacturers into considering multi CPU systems. It's a shame they never got the T9000 working properly.</p><p>If I get a chance, I might try to rehabilitate the KROC Occam compiler.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64502093">

</div>
</div>

<div id="replyto_64502093"></div>

<ul id="group_64502093">
	<li id="hiddens_64502093" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64502027" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64502027" class="commentstatus"></div>
<div id="comment_64502027" class="cw">
	<div id="comment_top_64502027" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64502027" name="comment_link_64502027" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64502027" onclick="return D2.setFocusComment(64502027)" >Re:</a>


		 	<span id="comment_score_64502027" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64502027); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Waccoon">Waccoon</a>  <span class="uid"><a href="//slashdot.org/~Waccoon">( 1186667 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64502027"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64502027"><p>Languages, like all platforms, survive thanks to killer apps.  We use the languages we do because we have to, not because they are good.</p><p>That's why the Rust people are fighting so damn hard to get it integrated into the Linux kernel.  Once that happens, it guarantees it will survive and we will have to use it whether we like it or not.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64502027">

</div>
</div>

<div id="replyto_64502027"></div>

<ul id="group_64502027">
	<li id="hiddens_64502027" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64500649" class="comment full contain"><span class="ind"></span>
<div id="comment_status_64500649" class="commentstatus"></div>
<div id="comment_64500649" class="cw">
	<div id="comment_top_64500649" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500649" name="comment_link_64500649" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500649" onclick="return D2.setFocusComment(64500649)" >Aah, reminds me of mutable, const, and const_cast</a>


		 	<span id="comment_score_64500649" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500649); return false"><span class=opt>Score:</span>4</a>, Insightful)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~fleeped">fleeped</a>  <span class="uid"><a href="//slashdot.org/~fleeped">( 1945926 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500649">		
		on Sunday May 26, 2024 @12:58PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500649">#64500649</a>)
		<small> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500649">Here are your new shoes and here's the shotgun, go have fun now. "With great power comes a great power-trip" aka "it's really important to break the rules just this time, trust me. The language spec allows me to!"</div>
	</div>

	<div class="commentSub" id="comment_sub_64500649">
<span class="ind"></span><a id="reply_link_64500649" class="btn link" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=Reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500649" onclick="D2.replyTo(64500649); return false;">Reply to This</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="t slashpop" href="https://twitter.com/intent/tweet?text=Aah, reminds me of mutable, const, and const_cast%20by%20fleeped%20%40slashdot%20https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500649" target="_blank">twitter</a>
		<a class="f slashpop" href="https://www.facebook.com/sharer/sharer.php?u=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500649" target="_blank">facebook</a>
		<a class="g" href="https://plus.google.com/share?url=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500649" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="https://www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>


	</div>
 <span class="ind"></span><a id="reply_link_64500649" title="Flag this comment as Inappropriate" class="ui-icon flag fright" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=flag&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500649" onclick="return false;">Flag as Inappropriate</a>
</div>
</div>

<div id="replyto_64500649"></div>

<ul id="group_64500649">
	<li id="hiddens_64500649" class="hide"></li>
</ul>

</li><li id="tree_64500651" class="comment full contain"><span class="ind"></span>
<div id="comment_status_64500651" class="commentstatus"></div>
<div id="comment_64500651" class="cw">
	<div id="comment_top_64500651" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500651" name="comment_link_64500651" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500651" onclick="return D2.setFocusComment(64500651)" >Exception for unsafe is valuable</a>


		 	<span id="comment_score_64500651" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500651); return false"><span class=opt>Score:</span>4</a>, Informative)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~penguinoid">penguinoid</a>  <span class="uid"><a href="//slashdot.org/~penguinoid">( 724646 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500651">		
		on Sunday May 26, 2024 @12:59PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500651">#64500651</a>)
		<small><a href="http://mailinator.net/" title="http://mailinator.net/" class="user_homepage_display">Homepage</a>
<a href="//slashdot.org/~penguinoid/journal/" title="Tuesday December 06, 2005 @06:55PM" class="user_journal_display">Journal</a> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500651"><p>It's good to allow unsafe code (we've done all along) and it's also good that it's pushed into a small section and labeled unsafe.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500651">
<span class="ind"></span><a id="reply_link_64500651" class="btn link" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=Reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500651" onclick="D2.replyTo(64500651); return false;">Reply to This</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="t slashpop" href="https://twitter.com/intent/tweet?text=Exception for unsafe is valuable%20by%20penguinoid%20%40slashdot%20https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500651" target="_blank">twitter</a>
		<a class="f slashpop" href="https://www.facebook.com/sharer/sharer.php?u=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500651" target="_blank">facebook</a>
		<a class="g" href="https://plus.google.com/share?url=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500651" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="https://www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>


	</div>
 <span class="ind"></span><a id="reply_link_64500651" title="Flag this comment as Inappropriate" class="ui-icon flag fright" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=flag&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500651" onclick="return false;">Flag as Inappropriate</a>
</div>
</div>

<div id="replyto_64500651"></div>

<ul id="group_64500651">
	<li id="hiddens_64500651" class="hide"></li>
</ul>

<ul id="commtree_64500651"><li id="tree_64500711" class="comment full contain"><span class="ind"></span>
<div id="comment_status_64500711" class="commentstatus"></div>
<div id="comment_64500711" class="cw">
	<div id="comment_top_64500711" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500711" name="comment_link_64500711" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500711" onclick="return D2.setFocusComment(64500711)" >Re:Exception for unsafe is valuable</a>


		 	<span id="comment_score_64500711" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500711); return false"><span class=opt>Score:</span>4</a>, Informative)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ThosLives">ThosLives</a>  <span class="uid"><a href="//slashdot.org/~ThosLives">( 686517 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500711">		
		on Sunday May 26, 2024 @01:31PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500711">#64500711</a>)
		<small><a href="//slashdot.org/~ThosLives/journal/" title="Friday September 21, 2007 @08:18AM" class="user_journal_display">Journal</a> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500711"><p>It's good to label code unsafe if and only if it is <em>actually</em> unsafe.</p><p>The keyword gives the wrong connotation for what code in those blocks is.  The code in those blocks is merely not subject to some of the compiler rules. That is it.</p><p>I know why the language creators chose that word, but that word choice is (mis)leading. In fact, if I was running a Rust project, I would ensure that code inside the unsafe blocks should actually be <em>the most safe</em> code, because it should be subject to the most diligent review and testing possible.</p><p>The vast majority of my career is in safety-critical (as in, if it breaks it causes physical harm, not merely causing offense or financial issues) systems, and one rule about safety is that if you assume your tools are going to make you safe, you will fail. Tools can help you be safe, but what makes you safe is diligence, not tooling or testing or any other such thing.</p><p>Calling something "unsafe" when it's not gives false understanding about the entire codebase, and false understanding causes all sorts of problems that <em>cannot</em> be solved by technology.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500711">
<span class="ind"></span><a id="reply_link_64500711" class="btn link" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=Reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500711" onclick="D2.replyTo(64500711); return false;">Reply to This</a> <span class="ind"></span><a class="btn link" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;cid=64500651" onclick="return D2.selectParent(64500651)">Parent</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="t slashpop" href="https://twitter.com/intent/tweet?text=Re:Exception for unsafe is valuable%20by%20ThosLives%20%40slashdot%20https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500711" target="_blank">twitter</a>
		<a class="f slashpop" href="https://www.facebook.com/sharer/sharer.php?u=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500711" target="_blank">facebook</a>
		<a class="g" href="https://plus.google.com/share?url=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500711" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="https://www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>


	</div>
 <span class="ind"></span><a id="reply_link_64500711" title="Flag this comment as Inappropriate" class="ui-icon flag fright" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=flag&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500711" onclick="return false;">Flag as Inappropriate</a>
</div>
</div>

<div id="replyto_64500711"></div>

<ul id="group_64500711">
	<li id="hiddens_64500711" class="hide"></li>
</ul>

<ul id="commtree_64500711"><li id="tree_64500739" class="comment full contain"><span class="ind"></span>
<div id="comment_status_64500739" class="commentstatus"></div>
<div id="comment_64500739" class="cw">
	<div id="comment_top_64500739" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500739" name="comment_link_64500739" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500739" onclick="return D2.setFocusComment(64500739)" >Re:Exception for unsafe is valuable</a>


		 	<span id="comment_score_64500739" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500739); return false"><span class=opt>Score:</span>4</a>, Funny)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~penguinoid">penguinoid</a>  <span class="uid"><a href="//slashdot.org/~penguinoid">( 724646 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500739">		
		on Sunday May 26, 2024 @01:47PM (<span class="ind"></span><a href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500739">#64500739</a>)
		<small><a href="http://mailinator.net/" title="http://mailinator.net/" class="user_homepage_display">Homepage</a>
<a href="//slashdot.org/~penguinoid/journal/" title="Tuesday December 06, 2005 @06:55PM" class="user_journal_display">Journal</a> </small>
</span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500739"><p>Well it would be awkward to label it failsOurAlgorithmicCheckForSafetyButMightStillBeSafeAndTheSafeCodeMightBeUnsafe.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500739">
<span class="ind"></span><a id="reply_link_64500739" class="btn link" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=Reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500739" onclick="D2.replyTo(64500739); return false;">Reply to This</a> <span class="ind"></span><a class="btn link" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;cid=64500711" onclick="return D2.selectParent(64500711)">Parent</a> 	<a href="#" class="comment_share_toggle btn link">Share</a>
	<div class="comment_share sharethis-0 hide"><span class="au"></span>
		<a class="t slashpop" href="https://twitter.com/intent/tweet?text=Re:Exception for unsafe is valuable%20by%20penguinoid%20%40slashdot%20https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500739" target="_blank">twitter</a>
		<a class="f slashpop" href="https://www.facebook.com/sharer/sharer.php?u=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500739" target="_blank">facebook</a>
		<a class="g" href="https://plus.google.com/share?url=https://developers.slashdot.org/comments.pl?sid=23335423&cid=64500739" onclick="javascript:window.open(this.href,'', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src="https://www.gstatic.com/images/icons/gplus-16.png" alt="Share on Google+"/></a>


	</div>
 <span class="ind"></span><a id="reply_link_64500739" title="Flag this comment as Inappropriate" class="ui-icon flag fright" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=flag&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=64500739" onclick="return false;">Flag as Inappropriate</a>
</div>
</div>

<div id="replyto_64500739"></div>

<ul id="group_64500739">
	<li id="hiddens_64500739" class="hide"></li>
</ul>

</li><li id="tree_64500741" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500741" class="commentstatus"></div>
<div id="comment_64500741" class="cw">
	<div id="comment_top_64500741" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500741" name="comment_link_64500741" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500741" onclick="return D2.setFocusComment(64500741)" >Re:</a>


		 	<span id="comment_score_64500741" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500741); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~stabiesoft">stabiesoft</a>  <span class="uid"><a href="//slashdot.org/~stabiesoft">( 733417 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500741"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500741">Good point about the unsafe word. Maybe a better word would have been waiver or some other word that implies don't check the rules.</div>
	</div>

	<div class="commentSub" id="comment_sub_64500741">

</div>
</div>

<div id="replyto_64500741"></div>

<ul id="group_64500741">
	<li id="hiddens_64500741" class="hide"></li>
</ul>

</li><li id="tree_64500783" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500783" class="commentstatus"></div>
<div id="comment_64500783" class="cw">
	<div id="comment_top_64500783" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500783" name="comment_link_64500783" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500783" onclick="return D2.setFocusComment(64500783)" >Re:</a>


		 	<span id="comment_score_64500783" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500783); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~Fly+Swatter">Fly Swatter</a>  <span class="uid"><a href="//slashdot.org/~Fly+Swatter">( 30498 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500783"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500783">Rust's design (and marketing) goal is to be a memory safe language... For times when it may not be as advertised they are using the proper word.</div>
	</div>

	<div class="commentSub" id="comment_sub_64500783">

</div>
</div>

<div id="replyto_64500783"></div>

<ul id="group_64500783">
	<li id="hiddens_64500783" class="hide"></li>
</ul>

<ul id="commtree_64500783"><li id="tree_64501051" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501051" class="commentstatus"></div>
<div id="comment_64501051" class="cw">
	<div id="comment_top_64501051" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501051" name="comment_link_64501051" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501051" onclick="return D2.setFocusComment(64501051)" >Re:</a>


		 	<span id="comment_score_64501051" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501051); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ArmoredDragon">ArmoredDragon</a>  <span class="uid"><a href="//slashdot.org/~ArmoredDragon">( 3450605 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501051"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501051"><p>With regard to marketing...well...The main thing you can say about Rust is that it's the only language that not only has already delivered everything it promised, it continues to deliver a hell of a lot more on top of it: Performance in excess of what it even set out to be, easy as hell parallelism and concurrency that actually works and intuitively so. Turns out all you had to do to get all of that was set a few strict but simple rules around pointers.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64501051">

</div>
</div>

<div id="replyto_64501051"></div>

<ul id="group_64501051">
	<li id="hiddens_64501051" class="hide"></li>
</ul>

</li></ul></li></ul></li><li id="tree_64500729" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500729" class="commentstatus"></div>
<div id="comment_64500729" class="cw">
	<div id="comment_top_64500729" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500729" name="comment_link_64500729" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500729" onclick="return D2.setFocusComment(64500729)" >Re:</a>


		 	<span id="comment_score_64500729" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500729); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~timeOday">timeOday</a>  <span class="uid"><a href="//slashdot.org/~timeOday">( 582209 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500729"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500729">Any general-purpose language must <i>allow</i> unsafe code.  Every software stack has unsafe code at some level, because ultimately type information has to come from <i>somewhere</i> (which ideally would just be device drivers).  But at some level, type information must be originally assigned, and that operation is 'unsafe.'</div>
	</div>

	<div class="commentSub" id="comment_sub_64500729">

</div>
</div>

<div id="replyto_64500729"></div>

<ul id="group_64500729">
	<li id="hiddens_64500729" class="hide"></li>
</ul>

<ul id="commtree_64500729"><li id="tree_64500849" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500849" class="commentstatus"></div>
<div id="comment_64500849" class="cw">
	<div id="comment_top_64500849" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500849" name="comment_link_64500849" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500849" onclick="return D2.setFocusComment(64500849)" >Re:</a>


		 	<span id="comment_score_64500849" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500849); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~HiThere">HiThere</a>  <span class="uid"><a href="//slashdot.org/~HiThere">( 15173 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500849"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500849"><p>That's an unproven assertion.  It reminds me of the claim that every language needs to allow unguarded array access of long jump.  It *may* be true, but perhaps we just haven't come up with the correct abstraction.</p><p>OTOH, if you mean that deep under the hood, there will be unsafe mechanisms used...yeah, that's going to be true.  At least with all existing cpus.</p><p>But since the existence of labelled break statements, I haven't been convinced that a raw goto was needed in high level code.  And FWIW, I had to check<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500849">

</div>
</div>

<div id="replyto_64500849"></div>

<ul id="group_64500849">
	<li id="hiddens_64500849" class="hide"></li>
</ul>

<ul id="commtree_64500849"><li id="tree_64501363" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501363" class="commentstatus"></div>
<div id="comment_64501363" class="cw">
	<div id="comment_top_64501363" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501363" name="comment_link_64501363" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501363" onclick="return D2.setFocusComment(64501363)" >Re:</a>


		 	<span id="comment_score_64501363" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501363); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~timeOday">timeOday</a>  <span class="uid"><a href="//slashdot.org/~timeOday">( 582209 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501363"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501363"><blockquote><div><p>That's an unproven assertion. It reminds me of the claim that every language needs to allow unguarded array access of long jump. It *may* be true, but perhaps we just haven't come up with the correct abstraction.</p></div></blockquote><p>

No, I'm making a logical argument.  Type information cannot <i>just</i> be propagated - at some point it must have been <i>created</i>.  For example a keyboard driver reads 2 bytes (or whatever it is) from some hardware memory address  and says 'this value is a character code' - an unsafe operation, in the sens<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64501363">

</div>
</div>

<div id="replyto_64501363"></div>

<ul id="group_64501363">
	<li id="hiddens_64501363" class="hide"></li>
</ul>

</li><li id="tree_64502125" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64502125" class="commentstatus"></div>
<div id="comment_64502125" class="cw">
	<div id="comment_top_64502125" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64502125" name="comment_link_64502125" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64502125" onclick="return D2.setFocusComment(64502125)" >Re:</a>


		 	<span id="comment_score_64502125" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64502125); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~DamnOregonian">DamnOregonian</a>  <span class="uid"><a href="//slashdot.org/~DamnOregonian">( 963763 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64502125"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64502125"><p><div class="quote"><p>That's an unproven assertion. It reminds me of the claim that every language needs to allow unguarded array access of long jump. It *may* be true, but perhaps we just haven't come up with the correct abstraction.</p></div><p>Don't be absurd.<br>
At some point, you must interact with the CPU, and it is memory-unsafe <b>by design.</b> <br>
It doesn't check the bounds of your array dereference, because it has no fucking idea what an array is.</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64502125">

</div>
</div>

<div id="replyto_64502125"></div>

<ul id="group_64502125">
	<li id="hiddens_64502125" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64501143" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501143" class="commentstatus"></div>
<div id="comment_64501143" class="cw">
	<div id="comment_top_64501143" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501143" name="comment_link_64501143" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501143" onclick="return D2.setFocusComment(64501143)" >Re:</a>


		 	<span id="comment_score_64501143" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501143); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~ThosLives">ThosLives</a>  <span class="uid"><a href="//slashdot.org/~ThosLives">( 686517 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501143"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501143"><p>I think my point is that it comes down to what you mean by "unsafe."  Code isn't safe or not because of the language it uses, or what is checked by the compiler, etc.  It is safe by what it does and does not <em>do</em>.</p><p>Sure it's splitting semantic hairs, but it's important to know that the safety comes from the principles and structures used, not the tools!  What you get from the tooling is <em>efficiency</em> when implementing those principles and structures.  Which I grant is indeed quite valuable, especially in a world w<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64501143">

</div>
</div>

<div id="replyto_64501143"></div>

<ul id="group_64501143">
	<li id="hiddens_64501143" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64500917" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500917" class="commentstatus"></div>
<div id="comment_64500917" class="cw">
	<div id="comment_top_64500917" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500917" name="comment_link_64500917" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500917" onclick="return D2.setFocusComment(64500917)" >Re:</a>


		 	<span id="comment_score_64500917" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500917); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~NoWayNoShapeNoForm">NoWayNoShapeNoForm</a>  <span class="uid"><a href="//slashdot.org/~NoWayNoShapeNoForm">( 7060585 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500917"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500917"><p><div class="quote"><p>It's good to allow unsafe code (we've done all along) and it's also good that it's pushed into a small section and labeled unsafe.</p></div><p>And here is the part you forgot to add in your statement:</p><p> <b>And that small section that is labeled 'unsafe' is then quickly jettisoned overboard onto a sulfur-fueled h3ll of a planet.</b> </p></div>
	</div>

	<div class="commentSub" id="comment_sub_64500917">

</div>
</div>

<div id="replyto_64500917"></div>

<ul id="group_64500917">
	<li id="hiddens_64500917" class="hide"></li>
</ul>

</li></ul></li><li id="tree_64500895" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64500895" class="commentstatus"></div>
<div id="comment_64500895" class="cw">
	<div id="comment_top_64500895" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64500895" name="comment_link_64500895" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64500895" onclick="return D2.setFocusComment(64500895)" >Training wheels</a>


		 	<span id="comment_score_64500895" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64500895); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~fluffernutter">fluffernutter</a>  <span class="uid"><a href="//slashdot.org/~fluffernutter">( 1411889 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64500895"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64500895">People who work as professional developers should understand how computers work.  Rust seems like a set of training wheels for everyone to me.</div>
	</div>

	<div class="commentSub" id="comment_sub_64500895">

</div>
</div>

<div id="replyto_64500895"></div>

<ul id="group_64500895">
	<li id="hiddens_64500895" class="hide"></li>
</ul>

</li><li id="tree_64501167" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501167" class="commentstatus"></div>
<div id="comment_64501167" class="cw">
	<div id="comment_top_64501167" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501167" name="comment_link_64501167" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501167" onclick="return D2.setFocusComment(64501167)" >Rust is also kinda dumb/pedantic, is kinda toxic</a>


		 	<span id="comment_score_64501167" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501167); return false"><span class=opt>Score:</span>1</a>, Informative)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span>Anonymous Coward</span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501167"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501167"><p>One of the big issues with rust is the fact that it's so pedantic, but doesn't actively have a reason for a lot of that. The language designers don't really care about the language itself being useful to people. They just want to have a place to be as pedantic as possible.</p><p>For example, if you just simply want to define a string constant in rust, its harder than it should be.  Why? Because they want to be pedantic instead of helpful.</p><p>Example:</p><p>pub const CONSTANT_STRING_DERP: String = "derp";</p><p>That wont compile.</p><p>pub<span class="substr"> </span></p></div>
	</div>

	<div class="commentSub" id="comment_sub_64501167">

</div>
</div>

<div id="replyto_64501167"></div>

<ul id="group_64501167">
	<li id="hiddens_64501167" class="hide"></li>
</ul>

</li><li id="tree_64501291" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501291" class="commentstatus"></div>
<div id="comment_64501291" class="cw">
	<div id="comment_top_64501291" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501291" name="comment_link_64501291" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501291" onclick="return D2.setFocusComment(64501291)" >Not surprised</a>


		 	<span id="comment_score_64501291" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501291); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~dubist">dubist</a>  <span class="uid"><a href="//slashdot.org/~dubist">( 2893961 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501291"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501291">I had to implement a bunch of native accelerations for a java api and I started using Rust only to find that virtually the entire thing from handling JNI calls and gaining critical access to java byte arrays through to the calling the CPU intrinsics was unsafe.

Switched back to C because Rust didn't provide any additional safety and people take the C related issues seriously because C lacks the vaneer of security that Rust has.</div>
	</div>

	<div class="commentSub" id="comment_sub_64501291">

</div>
</div>

<div id="replyto_64501291"></div>

<ul id="group_64501291">
	<li id="hiddens_64501291" class="hide"></li>
</ul>

</li><li id="tree_64501885" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64501885" class="commentstatus"></div>
<div id="comment_64501885" class="cw">
	<div id="comment_top_64501885" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64501885" name="comment_link_64501885" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64501885" onclick="return D2.setFocusComment(64501885)" >Literally 0% of C code contains the unsafe keyword</a>


		 	<span id="comment_score_64501885" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64501885); return false"><span class=opt>Score:</span>2</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~AntisocialNetworker">AntisocialNetworker</a>  <span class="uid"><a href="//slashdot.org/~AntisocialNetworker">( 5443888 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64501885"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64501885"><p>Just sayin'</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64501885">

</div>
</div>

<div id="replyto_64501885"></div>

<ul id="group_64501885">
	<li id="hiddens_64501885" class="hide"></li>
</ul>

</li><li id="tree_64502625" class="comment oneline"><span class="ind"></span>
<div id="comment_status_64502625" class="commentstatus"></div>
<div id="comment_64502625" class="cw">
	<div id="comment_top_64502625" class="commentTop newcomment">
		<div class="title">
			<h4><a id="comment_link_64502625" name="comment_link_64502625" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;cid=64502625" onclick="return D2.setFocusComment(64502625)" >Shouldn't we expect MORE unsafe in libraries?</a>


		 	<span id="comment_score_64502625" class="score"> (<a href="#" onclick="getModalPrefs('modcommentlog', 'Moderation Comment Log', 64502625); return false"><span class=opt>Score:</span>1</a>)</span></h4>
		</div>
		<div class="details">
			<span class="by"><span class="byby">by </span><a href="//slashdot.org/~mukundajohnson">mukundajohnson</a>  <span class="uid"><a href="//slashdot.org/~mukundajohnson">( 10427278 )</a></span></a></span><span class="writes" style="display:none"> writes:</span> 
			<span class="otherdetails" id="comment_otherdetails_64502625"></span>
		</div>
	</div>
	<div class="commentBody">
		<div id="comment_body_64502625"><p>Pardon my Rust ignorance, but when I read about it some years ago, I understood "unsafe" to be a keyword to mark sections that perform necessary operations that are not possible when under the safety rules of the compiler. So long as it is implemented correctly, there is no problem, but the unsafe keyword makes it so such sections of code are extra-visible to review processes.</p><p>Seems fine to me, no? Or is it possible to do *everything* in a "safe" way?</p></div>
	</div>

	<div class="commentSub" id="comment_sub_64502625">

</div>
</div>

<div id="replyto_64502625"></div>

<ul id="group_64502625">
	<li id="hiddens_64502625" class="hide"></li>
</ul>

</li>
			<li id="roothiddens" class="hide"></li>
		</ul>
	
	
	
	

<noscript><p><b>There may be more comments in this discussion. Without JavaScript enabled, you might want to <a href="//developers.slashdot.org/users.pl?op=editcomm">turn on Classic Discussion System</a> in your preferences instead.</b></p></noscript>
<div id="discussion_buttons" class="clearfix">






</div>


<div class="newcmnt"><div id="replyto_0"></div></div>


	<script type="text/javascript">
<!--
		D2.currents()['hidden']   = 3;
		D2.currents()['full']     = 11;
		D2.currents()['oneline']  = 53;
		// D2.currents_total(67);

		D2.abbrev_comments({64501123:649,64500785:520,64501131:529,64501021:641,64500665:529,64502113:674,64500775:359,64501167:550,64501363:572,64501025:511,64500693:528,64500763:512,64501145:652,64501143:540,64500849:529});
		D2.noshow_comments([64500907,64500909,64501595]);
		D2.pieces_comments([64500705,64500767,64500843,64501145,64501365,64500963,64500841,64500763,64500883,64501025,64501779,64502287,64501093,64500949,64500995,64500665,64500775,64500853,64501123,64501105,64501131,64502099,64500633,64500785,64501021,64501403,64502113,64500827,64500911,64501169,64500693,64502025,64500793,64501335,64502037,64500889,64501245,64502093,64502027,64500741,64500783,64501051,64500729,64500849,64501363,64502125,64501143,64500917,64500895,64501167,64501291,64501885,64502625]);
		D2.init_hiddens([64500705,64500479,64500853]);

		D2.finishLoading();


		if (D2.thresh_totals()[6][6][1] == 0) {
			D2.replyTo(0, 1);
		}


//-->
	</script>


</div>



	
	
		<div id="clickgen" class="grid_24 b">
    <section class="grid_16 f">
        <div>
			<h4 class="nobg">
			    <a href="" class="selected btmrel" onClick="getRelatedStoriesForStory(428847);return false">Related Links</a>
			    <span class="tops fright">Top of the: <a href="" class="btmday" onClick="getTopStories(1);return false">day</a>, <a class="btmweek" href="" onClick="getTopStories(7); return false">week</a>, <a href="" onClick="getTopStories(30);return false" class="btmmonth">month</a>.</span>
			</h4>
			<ul class="nobullets bmrelatedlist">


	
	<li>
		<span class="cmntcnt"><span class="slant"></span><span>321<span class="hide"> comments</span></span></span><a href="//developers.slashdot.org/story/23/08/07/0136228/should-a-variables-type-come-after-its-name?sdsrc=popbyskidbtmprev">Should a Variable's Type Come After Its Name?</a>
	</li>

	
	<li>
		<span class="cmntcnt"><span class="slant"></span><span>293<span class="hide"> comments</span></span></span><a href="//developers.slashdot.org/story/23/09/02/1753239/are-scrums-a-cancer?sdsrc=popbyskidbtmprev">Are Scrums a Cancer?</a>
	</li>

	
	<li>
		<span class="cmntcnt"><span class="slant"></span><span>258<span class="hide"> comments</span></span></span><a href="//developers.slashdot.org/story/24/03/19/019240/c-creator-rebuts-white-house-warning?sdsrc=popbyskidbtmprev">C++ Creator Rebuts White House Warning</a>
	</li>

	
	<li>
		<span class="cmntcnt"><span class="slant"></span><span>228<span class="hide"> comments</span></span></span><a href="//developers.slashdot.org/story/24/02/28/1529238/white-house-urges-devs-to-switch-to-memory-safe-programming-languages?sdsrc=popbyskidbtmprev">White House Urges Devs To Switch To Memory-Safe Programming Languages</a>
	</li>

	
	<li>
		<span class="cmntcnt"><span class="slant"></span><span>226<span class="hide"> comments</span></span></span><a href="//developers.slashdot.org/story/23/06/26/018234/34-of-ap-cs-students-couldnt-solve-this-java-based-2d-array-question?sdsrc=popbyskidbtmprev">34% of AP CS Students Couldn't Solve This Java-Based 2D Array Question</a>
	</li>


</ul>
        </div>
    </section>
    <aside class="grid_8 st">
		<section class="grid_24 f">
			<div>
				<h5 class="tlnav"><a href="//games.slashdot.org/story/24/05/26/035202/ubuntu-2404-now-runs-on-the-nintendo-switch-unofficially?sdsrc=nextbtmnext">next</a></h5>
				<div class="grid_24">
	    
	    
            	 <span class="grid_7 tcenter"><img src="//a.fsdn.com/sd/topics/nintendo_64.png" width="64" height="64" alt="Nintendo"></span>
	    
					<p class="grid_12"><a href="//games.slashdot.org/story/24/05/26/035202/ubuntu-2404-now-runs-on-the-nintendo-switch-unofficially?sdsrc=nextbtmprev">Ubuntu 24.04 Now Runs on the Nintendo Switch (Unofficially)</a></p>
					<span class="grid_5 tcenter comments"><span class="cmntcnt_large fleft"><span class="slant"></span><span>5<span class="hide"> comments</span></span></span></span>
	
				</div>
			</div>
		</section>
		<section class="grid_24">
			<div>
				<h5 class="tlnav"><a href="//linux.slashdot.org/story/24/05/25/2155224/how-a-us-hospital-is-using-ai-to-analyze-x-rays---with-help-from-red-hat?sdsrc=prevbtmprev">previous</a></h5>
				<div class="grid_24">
	    
            	 <span class="grid_7 tcenter"><img src="//a.fsdn.com/sd/topics/ai_64.png" width="64" height="64" alt="AI"></span>
	    
					<p class="grid_12"><a href="//linux.slashdot.org/story/24/05/25/2155224/how-a-us-hospital-is-using-ai-to-analyze-x-rays---with-help-from-red-hat?sdsrc=prevbtmprev">How A US Hospital is Using AI to Analyze X-Rays - With Help From Red Hat</a></p>

					<span class="grid_5 tcenter comments"><span class="cmntcnt_large fleft"><span class="slant"></span><span>19<span class="hide"> comments</span></span></span></span>
				</div>
			</div>
		</section>
	</aside>
</div>
	

</section>
			</div>
		</div>
<div id="bottom-masonry" class="jobbioapp"></div>
		<div class="row top-space">


			<div class="grid_24">
				<!-- 728px ad -->

				<div class="adwrap">
<div id='div-gpt-ad-728x90_c'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-728x90_c');});</script></div>
</div>
				<!-- end 728px ad -->
				<!-- Slashdot Deals 6 Best Sellers -->
					<div class="row deals-footer">
						<div class="units-8 indent-2 deals-wrapper">
						  <div class="deals-header"><h1>Slashdot Top Deals</h1></div>
						  <div id="deals-output">
							<script id="deals-template" type="text/x-handlebars-template">
							  {{#each deal}}
								<div class="deal">
								  <a href="{{urlPath permalink}}?&utm_source=slashdot.org&utm_medium=dealfeed-footerfeed&utm_campaign={{slug}}" target="_blank">
								  	<img src="{{main_image}}" alt="" />
								  </a>
								  <p class="title"><a href="{{urlPath permalink}}?&utm_source=slashdot.org&utm_medium=dealfeed-footerfeed&utm_campaign={{slug}}" target="_blank">{{title}}</a></p>
								  <p class="deal-price">{{centConversion price_in_cents}}</p>
								</div>
							  {{/each}}
							</script>
						  </div>
						</div>
					</div>
					<script>
						if ( sdAdBlockActive && window.is_euro_union === 0) {
                                                    bizx.cmp.ifConsent('', ['all'], function () {
							$.ajaxSetup({
								cache: true
							});
							$.getScript( "//a.fsdn.com/sd/js/scripts/min/deals-min.js", function(){
								runDealsWidget();
							});
                                                    });
						}
					</script>

					<!-- End Slashdot Deals 6 Best Sellers -->
				</div>
			</div>
		</div>
	</div>
	<!-- SMACKS: END COMMENTS SECTION -->
</div>
<!-- SMACKS: END COMMENTS CONTAINER -->


	

<script type="text/javascript">

$(function(){
$('#firehose-filter').
	focus(function(event){
		gFocusedText = this;
	}).
	blur(function(event){
		if ( gFocusedText === this ) {
			gFocusedText = null;
		}
	});


apply_updates_when(		'at-end', true);
});
</script>

<!-- body end --><!-- footer type=current begin -->

	
	</section>
	
	


	<footer id="fhft" class="grid_24 nf aoc">
		<div id="logo_nf" class="fleft">
			<a href="//slashdot.org"><span>Slashdot</span></a>
		</div>
		<nav role="firehose footer">
			
				
				
				
				

				
						<span class="ind"></span><a class="btn first" href="//developers.slashdot.org/comments.pl?sid=23335423&amp;op=reply&amp;threshold=1&amp;commentsort=0&amp;mode=thread&amp;pid=" onclick="D2.replyTo(0); return false;">Post</a>
				
				<a class="btn hide" id="footer_moderate_button">Moderate</a>
				<a class="btn hide" id="footer_moderatorhelp_button">Moderator Help</a>
				<a class="btn hide" id="footer_delete_button" title="Checked comments will be deleted.">Delete</a>
				<script>
					(function($){
						var old_moderate_btn = $("#discussion_moderate_button");
						if (old_moderate_btn.length) {
							var moderate_btn = $("#footer_moderate_button");
							moderate_btn.click(
								function(){old_moderate_btn.click()}
							);
							moderate_btn.removeClass('hide');
						}

						var old_moderatorhelp_btn = $("#discussion_moderatorhelp_button");
						if (old_moderatorhelp_btn.length) {
							var moderatorhelp_btn = $("#footer_moderatorhelp_button");
							moderatorhelp_btn.click(
								function(){old_moderatorhelp_btn.click()}
							);
							moderatorhelp_btn.attr(
								'href', old_moderatorhelp_btn.attr('href')
							);
							moderatorhelp_btn.removeClass('hide');
						}

						var old_delete_btn = $("#discussion_delete_button");
						if (old_delete_btn.length) {
							var delete_btn = $("#footer_delete_button");
							delete_btn.click(
								function(){old_delete_btn.click()}
							);
							delete_btn.removeClass('hide');
						}

						$('#discussion_buttons').addClass('hide');
					})(Slash.jQuery); // (function($){
				</script>
				<ul class="fleft">
					
						<li class="fleft selected">
							<span class="nbutton btn hide link reset" id="more_comments_button">
								<a href="#" onclick="D2.ajaxFetchComments(0,1); return false">
									<span id="more_comments_num_a" class="hide">Get more comments</span>
								</a>
							</span>
						</li>
					
					
						<li class="fleft">
							<span class="loadedcommentcnt">67</span> of <span class="totalcommentcnt">67</span> loaded
						</li>
					
				</ul>
				
					<script type="text/javascript">D2.finishLoading()</script>
				
			

			
			<ul class="fright submitstory">
					<li class="fright">
						<a href="/submit">Submit<span class="opt"> Story</span></a>
					</li>
			</ul>
		</nav>
		


	</footer>
	<section class="bq">
		<blockquote class="msg grid_24" cite="https://slashdot.org">
			<p>Your code should be more efficient!</p>
			<span class="slant"></span>
		</blockquote>
	</section>
	<footer id="ft" class="grid_24">
		<nav class="grid_10" role="footer">
			<ul>
				<li><a href="//slashdot.org/faq">FAQ</a></li>
				<li><a href="//slashdot.org/archive.pl">Story Archive</a></li>
				<li><a href="//slashdot.org/hof.shtml">Hall of Fame</a></li>
				<li><a href="https://slashdotmedia.com/advertising-and-marketing-services/" rel="nofollow">Advertising</a></li>
				<li><a href="https://slashdotmedia.com/terms-of-use/" rel="nofollow">Terms</a></li>
				<li><a href="https://slashdotmedia.com/privacy-statement/" rel="nofollow">Privacy Statement</a></li>
				<li><a href="//slashdot.org/faq/slashmeta.shtml">About</a></li>
				<li><a href="mailto:feedback@slashdot.org">Feedback</a></li>
				<li><a href="#" onclick="set_mobile_pref('mobile',1);return false;">Mobile View</a></li>
				<li><a href="//slashdot.org/blog">Blog</a></li>
				<li><a href="#" id="opt-out-link"></a></li>
				<li><button class="btn opt-out" id="opt-out-button" style="display:none">
					<img src="//a.fsdn.com/sd/ccpa-optout.png" alt="Icon">
					Do Not Sell or Share My Personal Information</button></li>

			</ul>
		</nav>
		<br>
		
		<div class="grid_14 tright tm"><span class="nobr">Copyright &copy; 2024 Slashdot Media. All Rights Reserved.</span></div>

	<div class="modal-custom overlay-custom" id="ccpa-modal" style="max-width:100%">
		<div class="modal-content modal-content-ccpa">
	    	<span class="close" id="modal-close">&times;</span>
			<div class="modal-header" id="ccpa-modal-content-destination"></div>
		</div>
	</div>

	</footer>
	
	<div class="overlay"></div>
<div class="modal-box">
    <a href="#" id="close-modal">Close</a>
    <article class="modal-content">
    </article>
    <footer>
</div>




<div id="modal_cover" class="hide" onclick="hide_modal_box(); return false;"></div>
<div id="modal_box" class="hide">
      <div id="modal_box_content"></div>
      <header class="n">
                  <span class="fadeout"></span>
                  <span class="fadeoutfade"></span>
		  <span class="pf"><a class="ico close" onclick="hide_modal_box(); return false;" href="#"><span>Close</span></a></span>
		  <h3 class="pf"><div id="logo"><a href="//slashdot.org">Slashdot</a></div><span id="preference_title"></span></h3>
      </header>
</div>
	
	<!-- CCM Tag -->
<script type="text/javascript">
bizx.cmp.ifConsent({purposes: 'all', vendors: 'bombora'}, function() {
        /*global _ml:true, window */
        _ml = window._ml || {};
        _ml.eid = '771';

        var s = document.getElementsByTagName('script')[0], cd = new Date(), mltag = document.createElement('script');
        mltag.type = 'text/javascript'; mltag.async = true;
        mltag.src = '//ml314.com/tag.aspx?' + cd.getDate() + cd.getMonth() + cd.getFullYear();
        s.parentNode.insertBefore(mltag, s);
});
</script>
<!-- End CCM Tag -->

<script type="text/javascript">
window.google_analytics_uacct = "UA-199823890-2";

var _gaq = _gaq || [];





  _gaq.push(['_setAccount', 'UA-199823890-2']);
  _gaq.push(['_setDomainName', '.slashdot.org']);

	
		_gaq.push(['_addIgnoredRef', 'slashdot.org']);
	


  _gaq.push(['_setCustomVar', 1, 'User Type',  'Anon', 3]);		
	
	_gaq.push(['_setCustomVar', 2, 'Page','article2', 3]);

	



// track beta behavior for user
var betamatches = document.cookie.match(/betagroup=(-?\d+)/);

if(betamatches && betamatches[1]) {
  if(betamatches[1] == -1) {
    _gaq.push(['_setCustomVar', 3, 'Beta-Usage','opt-out', 3]);
  } else {
    _gaq.push(['_setCustomVar', 3, 'Beta-Usage','unredirected', 3]);
  }
}



  _gaq.push(['_trackPageview']);
  _gaq.push(['_trackPageLoadTime']);


if (window.is_euro_union === 0) {
bizx.cmp.ifConsent('', ['all'], function () {
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
});
}
</script>

<!-- CCM GA Push -->
<script>
    if (typeof _ml !== 'undefined' && _ml.us) {
        if (_ml.us.tp && _ml.us.tp.length > 0) {
            ga('set', 'dimension2', _ml.us.tp[0]);
        }
        if (_ml.us.pc && _ml.us.pc.length > 0) {
            ga('set', 'dimension7', _ml.us.pc[0]);
        }
        ga('set', 'dimension3', _ml.us.ind);
        ga('set', 'dimension4', _ml.us.cr);
        ga('set', 'dimension5', _ml.us.cs);
        ga('set', 'dimension6', _ml.us.dm);
        ga('set', 'dimension8', _ml.us.sn);
    }
</script>

<!-- Sticky Ads -->
<script type="text/javascript">
var topBannerViewed = false;
function initSticky(){
	if (SD.Ads.acceptable_ads_active) {
		return;
	}
		
	if($('#div-gpt-ad-728x90_a').length > 0 && $('#div-gpt-ad-300x250_a').length > 0 && window.outerWidth >= 1070 && !sdAdBlockActive){
	    $(window).scroll(function(){
		var y = $(document).scrollTop();
		var z =  y + window.outerHeight;
		var navOffset = 0;
		var offset = [
		    $('.nav-wrap').outerHeight(true),
		    $('.nav-secondary-wrap').outerHeight(true)
		];
		for(row in offset){
		    if(offset[row]) navOffset = navOffset + parseInt(offset[row]);
		}
		$('.adwrap-unviewed').each(function(){
		    var cls = 'adwrap-sticky';
		    var toggleCls = 'adwrap';
				//$('.banner-wrapper').css('height', $('.banner-contain').outerHeight());
		    if($(this).hasClass('railad')) {
			if(topBannerViewed){
			    var topPixels = $(this).offset().top;
			    navOffset += $('.adwrap').outerHeight();
			    if(y >= topPixels && y >= navOffset){
				$('#slashboxes').css('top', 0).css('position','sticky').css('right',13);
			    } else {
				$('#slashboxes').removeAttr('style');
			    }
			}
			return;
		    }
		    var topPixels = $(this).offset().top;
		if(y >= topPixels && y >= navOffset){
			$(this).addClass(cls);
			$(this).removeClass('adwrap');
					if(cls == 'adwrap-sticky') { //top banner
			    topBannerViewed = false;
						$('#slashboxes').css('top',$(this).outerHeight() || 0).css('position','sticky').css('right',13);
					}
		if(topBannerViewed) {
			    //console.log('hereeee');
						$('#slashboxes').css('top', 0).css('position','sticky').css('right',13);
					}
		    }else{
									//console.log('topBannerViewed', topBannerViewed);
			$(this).removeClass(cls);
			$(this).addClass(toggleCls);
			$('#slashboxes').removeAttr('style');
		    }
		});
			if($('.adwrap-viewed-banner').length > 0){
			  //console.log('ads topBanner displayed');
				topBannerViewed = true;
				$('.adwrap-viewed-banner').removeClass('adwrap-unviewed').removeClass('adwrap-sticky').addClass('adwrap');
			}
	    if($('.adwrap-viewed-railad').length > 0){
							//console.log('ads sidebar displayed');
		    $('.adwrap-viewed-railad').removeClass('adwrap-unviewed').removeClass('adwrap-railad-sticky');
				$('#slashboxes').removeAttr('style');
			}
	    });
	}
}
bizx.cmp.ifConsent({purposes: 'all', vendors: 'google-ads'}, function () {
	if (!sdAdBlockActive) {
		initSticky();
	}
	if (SD.Ads.acceptable_ads_active) {
		// similar to remove* code above in initSticky
		$('.adwrap-unviewed').removeClass('adwrap-unviewed').removeClass('adwrap-sticky').addClass('adwrap').removeClass('adwrap-railad-sticky');
		$('#slashboxes').removeAttr('style');
	}
});
</script>

<!-- Piwik -->
<script type="text/javascript">
  var _paq = _paq || [];
  _paq.push(["setCookieDomain", "*.slashdot.org"]);
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
function initPiwikAndNels() {
  (function() {
    var u="//analytics.slashdotmedia.com/";
    _paq.push(['setTrackerUrl', u+'sd.php']);
    _paq.push(['setSiteId', 40]);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'sd.js'; s.parentNode.insertBefore(g,s);
  })();

    if(window.location.pathname == '/'){
        var nelId = (location.search.split('nel_id=')[1] || '').split('&')[0];
        var url = '/ajax.pl?op=nel';
        if(nelId){
            url += '&nel_id='+nelId;
        }
        $.ajax({
            url: url,
            type: 'POST',
            success: function(html){
                $('#firehoselist article').eq(1).after(html);
            }
        });
    }
    //announcement NEL
    if(document.getElementById('announcementText')){
      $('#announcementText').hide();
      var hlUrl = '/ajax.pl?op=hl_nel';
      if(nelId){
        hlUrl += '&nel_id='+nelId;
      }
      $.ajax({
        url: hlUrl,
        type: 'POST',
        success: function(html){
          if(html.length < 10){
            $('#announcementText').show();
            return;
          }
          $('#announcementText').html(html).show();
        },
        error: function () {
          $('#announcementText').show();
        }
      });
    }
}
bizx.cmp.ifConsent({purposes: ['storage', 'measurement'], vendors: 'sdm'}, initPiwikAndNels);
$('#main-nav-badge-link').on('click', function(e){
     window._paq.push(['trackEvent', 'Nav Menu', 'GC']);
});
</script>


<!-- Datonics -->
<script type="text/javascript">
if (window.is_euro_union === 0) {
    bizx.cmp.ifConsent('', ['all'], function () {
        bizx.cmp.embedScript("//ads.pro-market.net/ads/scripts/site-143573.js", true);
    });
}
</script>
	<script id="after-content" type="text/javascript">
(function( $, fn, console ){
	$ && fn && $(function(){ fn($, console); });
})(window.jQuery, window.pageload_done, window.console);
</script>
	
	<script type='text/javascript'>
	if(!document.location.href.match(/source=autorefresh/)) {
		document.write('<img src="//slashdot.org/images/js.gif?573">');
	}
</script>
<noscript>
	<img src="//slashdot.org/images/njs.gif?297">
</noscript>
	<div class="busy genericspinner hide"><span>Working...</span></div>

	    <script>
            var regular_opt_out_link = true;

            if (bizx.cmp.show_do_not_sell()) {
                regular_opt_out_link = false;
                 document.getElementById('opt-out-button').setAttribute('style', 'display:inline');
            }

            if (window.is_euro_union === 1) {
                regular_opt_out_link = false;
                var elem = '<a href="#" title="Privacy Choices" onclick="bizx.cmp.promptConsent(); return false;">Privacy Choices</a>';
                document.getElementById('opt-out-link').innerHTML = elem;
            }

            if (regular_opt_out_link == true) {
                var elem = '<a href="https://slashdotmedia.com/opt-out-choices" title="Opt Out" rel="nofollow">Opt Out</a>';
                document.getElementById('opt-out-link').innerHTML = elem;
            }
            var cmp_modal = document.getElementById('ccpa-modal');
            var btn = document.getElementById('opt-out-button');
            var span = document.getElementById('modal-close');

            btn.onclick = function() {
            	cmp_modal.style.display = 'block';
            };

            span.onclick = function() {
            	cmp_modal.style.display = 'none';
            };

         </script>

	<script>
		if(typeof(Storage)!=="undefined"){
			window.scrollTo(0,sessionStorage.scrollPos);
				$(window).scroll(function () {
				//You've scrolled this much:
				sessionStorage.scrollPos = $(window).scrollTop();
			});
		}
		$(function(){
			$('a').click(function(){
				delete sessionStorage.scrollPos;
			})
		});
		// window.onbeforeunload = function () {
		// 	console.log('bakc button clicked');
		// 	delete sessionStorage.scrollPos;
		// }
		window.onpopstate=function() {
			delete sessionStorage.scrollPos;
		}
	</script>
	

	
		<!-- 1x1 story page -->
		<div id='div-gpt-ad-1x1'><script type='text/javascript'>
googletag.cmd.push(function(){
googletag.display('div-gpt-ad-1x1');});</script></div>
	

	</body>
	</html>


	<!-- footer type=current end -->